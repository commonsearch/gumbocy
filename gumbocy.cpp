/* Generated by Cython 0.24 */

#define PY_SSIZE_T_CLEAN
#include "Python.h"
#ifndef Py_PYTHON_H
    #error Python headers needed to compile C extensions, please install development version of Python.
#elif PY_VERSION_HEX < 0x02060000 || (0x03000000 <= PY_VERSION_HEX && PY_VERSION_HEX < 0x03020000)
    #error Cython requires Python 2.6+ or Python 3.2+.
#else
#define CYTHON_ABI "0_24"
#include <stddef.h>
#ifndef offsetof
  #define offsetof(type, member) ( (size_t) & ((type*)0) -> member )
#endif
#if !defined(WIN32) && !defined(MS_WINDOWS)
  #ifndef __stdcall
    #define __stdcall
  #endif
  #ifndef __cdecl
    #define __cdecl
  #endif
  #ifndef __fastcall
    #define __fastcall
  #endif
#endif
#ifndef DL_IMPORT
  #define DL_IMPORT(t) t
#endif
#ifndef DL_EXPORT
  #define DL_EXPORT(t) t
#endif
#ifndef PY_LONG_LONG
  #define PY_LONG_LONG LONG_LONG
#endif
#ifndef Py_HUGE_VAL
  #define Py_HUGE_VAL HUGE_VAL
#endif
#ifdef PYPY_VERSION
  #define CYTHON_COMPILING_IN_PYPY 1
  #define CYTHON_COMPILING_IN_CPYTHON 0
#else
  #define CYTHON_COMPILING_IN_PYPY 0
  #define CYTHON_COMPILING_IN_CPYTHON 1
#endif
#if !defined(CYTHON_USE_PYLONG_INTERNALS) && CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x02070000
  #define CYTHON_USE_PYLONG_INTERNALS 1
#endif
#if CYTHON_USE_PYLONG_INTERNALS
  #include "longintrepr.h"
  #undef SHIFT
  #undef BASE
  #undef MASK
#endif
#if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX < 0x02070600 && !defined(Py_OptimizeFlag)
  #define Py_OptimizeFlag 0
#endif
#define __PYX_BUILD_PY_SSIZE_T "n"
#define CYTHON_FORMAT_SSIZE_T "z"
#if PY_MAJOR_VERSION < 3
  #define __Pyx_BUILTIN_MODULE_NAME "__builtin__"
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_New(a+k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
  #define __Pyx_DefaultClassType PyClass_Type
#else
  #define __Pyx_BUILTIN_MODULE_NAME "builtins"
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
  #define __Pyx_DefaultClassType PyType_Type
#endif
#ifndef Py_TPFLAGS_CHECKTYPES
  #define Py_TPFLAGS_CHECKTYPES 0
#endif
#ifndef Py_TPFLAGS_HAVE_INDEX
  #define Py_TPFLAGS_HAVE_INDEX 0
#endif
#ifndef Py_TPFLAGS_HAVE_NEWBUFFER
  #define Py_TPFLAGS_HAVE_NEWBUFFER 0
#endif
#ifndef Py_TPFLAGS_HAVE_FINALIZE
  #define Py_TPFLAGS_HAVE_FINALIZE 0
#endif
#if PY_VERSION_HEX > 0x03030000 && defined(PyUnicode_KIND)
  #define CYTHON_PEP393_ENABLED 1
  #define __Pyx_PyUnicode_READY(op)       (likely(PyUnicode_IS_READY(op)) ?\
                                              0 : _PyUnicode_Ready((PyObject *)(op)))
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_LENGTH(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) PyUnicode_READ_CHAR(u, i)
  #define __Pyx_PyUnicode_KIND(u)         PyUnicode_KIND(u)
  #define __Pyx_PyUnicode_DATA(u)         PyUnicode_DATA(u)
  #define __Pyx_PyUnicode_READ(k, d, i)   PyUnicode_READ(k, d, i)
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != (likely(PyUnicode_IS_READY(u)) ? PyUnicode_GET_LENGTH(u) : PyUnicode_GET_SIZE(u)))
#else
  #define CYTHON_PEP393_ENABLED 0
  #define __Pyx_PyUnicode_READY(op)       (0)
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_SIZE(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) ((Py_UCS4)(PyUnicode_AS_UNICODE(u)[i]))
  #define __Pyx_PyUnicode_KIND(u)         (sizeof(Py_UNICODE))
  #define __Pyx_PyUnicode_DATA(u)         ((void*)PyUnicode_AS_UNICODE(u))
  #define __Pyx_PyUnicode_READ(k, d, i)   ((void)(k), (Py_UCS4)(((Py_UNICODE*)d)[i]))
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != PyUnicode_GET_SIZE(u))
#endif
#if CYTHON_COMPILING_IN_PYPY
  #define __Pyx_PyUnicode_Concat(a, b)      PyNumber_Add(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  PyNumber_Add(a, b)
#else
  #define __Pyx_PyUnicode_Concat(a, b)      PyUnicode_Concat(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  ((unlikely((a) == Py_None) || unlikely((b) == Py_None)) ?\
      PyNumber_Add(a, b) : __Pyx_PyUnicode_Concat(a, b))
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyUnicode_Contains)
  #define PyUnicode_Contains(u, s)  PySequence_Contains(u, s)
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyObject_Format)
  #define PyObject_Format(obj, fmt)  PyObject_CallMethod(obj, "__format__", "O", fmt)
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyObject_Malloc)
  #define PyObject_Malloc(s)   PyMem_Malloc(s)
  #define PyObject_Free(p)     PyMem_Free(p)
  #define PyObject_Realloc(p)  PyMem_Realloc(p)
#endif
#define __Pyx_PyString_FormatSafe(a, b)   ((unlikely((a) == Py_None)) ? PyNumber_Remainder(a, b) : __Pyx_PyString_Format(a, b))
#define __Pyx_PyUnicode_FormatSafe(a, b)  ((unlikely((a) == Py_None)) ? PyNumber_Remainder(a, b) : PyUnicode_Format(a, b))
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyString_Format(a, b)  PyUnicode_Format(a, b)
#else
  #define __Pyx_PyString_Format(a, b)  PyString_Format(a, b)
#endif
#if PY_MAJOR_VERSION < 3 && !defined(PyObject_ASCII)
  #define PyObject_ASCII(o)            PyObject_Repr(o)
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBaseString_Type            PyUnicode_Type
  #define PyStringObject               PyUnicodeObject
  #define PyString_Type                PyUnicode_Type
  #define PyString_Check               PyUnicode_Check
  #define PyString_CheckExact          PyUnicode_CheckExact
#endif
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyBaseString_Check(obj) PyUnicode_Check(obj)
  #define __Pyx_PyBaseString_CheckExact(obj) PyUnicode_CheckExact(obj)
#else
  #define __Pyx_PyBaseString_Check(obj) (PyString_Check(obj) || PyUnicode_Check(obj))
  #define __Pyx_PyBaseString_CheckExact(obj) (PyString_CheckExact(obj) || PyUnicode_CheckExact(obj))
#endif
#ifndef PySet_CheckExact
  #define PySet_CheckExact(obj)        (Py_TYPE(obj) == &PySet_Type)
#endif
#define __Pyx_TypeCheck(obj, type) PyObject_TypeCheck(obj, (PyTypeObject *)type)
#if PY_MAJOR_VERSION >= 3
  #define PyIntObject                  PyLongObject
  #define PyInt_Type                   PyLong_Type
  #define PyInt_Check(op)              PyLong_Check(op)
  #define PyInt_CheckExact(op)         PyLong_CheckExact(op)
  #define PyInt_FromString             PyLong_FromString
  #define PyInt_FromUnicode            PyLong_FromUnicode
  #define PyInt_FromLong               PyLong_FromLong
  #define PyInt_FromSize_t             PyLong_FromSize_t
  #define PyInt_FromSsize_t            PyLong_FromSsize_t
  #define PyInt_AsLong                 PyLong_AsLong
  #define PyInt_AS_LONG                PyLong_AS_LONG
  #define PyInt_AsSsize_t              PyLong_AsSsize_t
  #define PyInt_AsUnsignedLongMask     PyLong_AsUnsignedLongMask
  #define PyInt_AsUnsignedLongLongMask PyLong_AsUnsignedLongLongMask
  #define PyNumber_Int                 PyNumber_Long
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBoolObject                 PyLongObject
#endif
#if PY_MAJOR_VERSION >= 3 && CYTHON_COMPILING_IN_PYPY
  #ifndef PyUnicode_InternFromString
    #define PyUnicode_InternFromString(s) PyUnicode_FromString(s)
  #endif
#endif
#if PY_VERSION_HEX < 0x030200A4
  typedef long Py_hash_t;
  #define __Pyx_PyInt_FromHash_t PyInt_FromLong
  #define __Pyx_PyInt_AsHash_t   PyInt_AsLong
#else
  #define __Pyx_PyInt_FromHash_t PyInt_FromSsize_t
  #define __Pyx_PyInt_AsHash_t   PyInt_AsSsize_t
#endif
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyMethod_New(func, self, klass) ((self) ? PyMethod_New(func, self) : PyInstanceMethod_New(func))
#else
  #define __Pyx_PyMethod_New(func, self, klass) PyMethod_New(func, self, klass)
#endif
#if PY_VERSION_HEX >= 0x030500B1
#define __Pyx_PyAsyncMethodsStruct PyAsyncMethods
#define __Pyx_PyType_AsAsync(obj) (Py_TYPE(obj)->tp_as_async)
#elif CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION >= 3
typedef struct {
    unaryfunc am_await;
    unaryfunc am_aiter;
    unaryfunc am_anext;
} __Pyx_PyAsyncMethodsStruct;
#define __Pyx_PyType_AsAsync(obj) ((__Pyx_PyAsyncMethodsStruct*) (Py_TYPE(obj)->tp_reserved))
#else
#define __Pyx_PyType_AsAsync(obj) NULL
#endif
#ifndef CYTHON_RESTRICT
  #if defined(__GNUC__)
    #define CYTHON_RESTRICT __restrict__
  #elif defined(_MSC_VER) && _MSC_VER >= 1400
    #define CYTHON_RESTRICT __restrict
  #elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define CYTHON_RESTRICT restrict
  #else
    #define CYTHON_RESTRICT
  #endif
#endif
#define __Pyx_void_to_None(void_result) ((void)(void_result), Py_INCREF(Py_None), Py_None)

#ifndef __cplusplus
  #error "Cython files generated with the C++ option must be compiled with a C++ compiler."
#endif
#ifndef CYTHON_INLINE
  #define CYTHON_INLINE inline
#endif
template<typename T>
void __Pyx_call_destructor(T& x) {
    x.~T();
}
template<typename T>
class __Pyx_FakeReference {
  public:
    __Pyx_FakeReference() : ptr(NULL) { }
    __Pyx_FakeReference(const T& ref) : ptr(const_cast<T*>(&ref)) { }
    T *operator->() { return ptr; }
    operator T&() { return *ptr; }
  private:
    T *ptr;
};

#if defined(WIN32) || defined(MS_WINDOWS)
  #define _USE_MATH_DEFINES
#endif
#include <math.h>
#ifdef NAN
#define __PYX_NAN() ((float) NAN)
#else
static CYTHON_INLINE float __PYX_NAN() {
  float value;
  memset(&value, 0xFF, sizeof(value));
  return value;
}
#endif


#define __PYX_ERR(f_index, lineno, Ln_error) \
{ \
  __pyx_filename = __pyx_f[f_index]; __pyx_lineno = lineno; __pyx_clineno = __LINE__; goto Ln_error; \
}

#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_TrueDivide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceTrueDivide(x,y)
#else
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_Divide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceDivide(x,y)
#endif

#ifndef __PYX_EXTERN_C
  #ifdef __cplusplus
    #define __PYX_EXTERN_C extern "C"
  #else
    #define __PYX_EXTERN_C extern
  #endif
#endif

#define __PYX_HAVE__gumbocy
#define __PYX_HAVE_API__gumbocy
#include "gumbo.h"
#include "string.h"
#include <string>
#include "ios"
#include "new"
#include "stdexcept"
#include "typeinfo"
#include "re2/stringpiece.h"
#include "re2/re2.h"
#include <utility>
#include <unordered_set>
#include <vector>
#include "stdio.h"
#ifdef _OPENMP
#include <omp.h>
#endif /* _OPENMP */

#ifdef PYREX_WITHOUT_ASSERTIONS
#define CYTHON_WITHOUT_ASSERTIONS
#endif

#ifndef CYTHON_UNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define CYTHON_UNUSED __attribute__ ((__unused__))
#   else
#     define CYTHON_UNUSED
#   endif
# elif defined(__ICC) || (defined(__INTEL_COMPILER) && !defined(_MSC_VER))
#   define CYTHON_UNUSED __attribute__ ((__unused__))
# else
#   define CYTHON_UNUSED
# endif
#endif
#ifndef CYTHON_NCP_UNUSED
# if CYTHON_COMPILING_IN_CPYTHON
#  define CYTHON_NCP_UNUSED
# else
#  define CYTHON_NCP_UNUSED CYTHON_UNUSED
# endif
#endif
typedef struct {PyObject **p; const char *s; const Py_ssize_t n; const char* encoding;
                const char is_unicode; const char is_str; const char intern; } __Pyx_StringTabEntry;

#define __PYX_DEFAULT_STRING_ENCODING_IS_ASCII 0
#define __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT 0
#define __PYX_DEFAULT_STRING_ENCODING ""
#define __Pyx_PyObject_FromString __Pyx_PyBytes_FromString
#define __Pyx_PyObject_FromStringAndSize __Pyx_PyBytes_FromStringAndSize
#define __Pyx_uchar_cast(c) ((unsigned char)c)
#define __Pyx_long_cast(x) ((long)x)
#define __Pyx_fits_Py_ssize_t(v, type, is_signed)  (\
    (sizeof(type) < sizeof(Py_ssize_t))  ||\
    (sizeof(type) > sizeof(Py_ssize_t) &&\
          likely(v < (type)PY_SSIZE_T_MAX ||\
                 v == (type)PY_SSIZE_T_MAX)  &&\
          (!is_signed || likely(v > (type)PY_SSIZE_T_MIN ||\
                                v == (type)PY_SSIZE_T_MIN)))  ||\
    (sizeof(type) == sizeof(Py_ssize_t) &&\
          (is_signed || likely(v < (type)PY_SSIZE_T_MAX ||\
                               v == (type)PY_SSIZE_T_MAX)))  )
#if defined (__cplusplus) && __cplusplus >= 201103L
    #include <cstdlib>
    #define __Pyx_sst_abs(value) std::abs(value)
#elif SIZEOF_INT >= SIZEOF_SIZE_T
    #define __Pyx_sst_abs(value) abs(value)
#elif SIZEOF_LONG >= SIZEOF_SIZE_T
    #define __Pyx_sst_abs(value) labs(value)
#elif defined (_MSC_VER) && defined (_M_X64)
    #define __Pyx_sst_abs(value) _abs64(value)
#elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define __Pyx_sst_abs(value) llabs(value)
#elif defined (__GNUC__)
    #define __Pyx_sst_abs(value) __builtin_llabs(value)
#else
    #define __Pyx_sst_abs(value) ((value<0) ? -value : value)
#endif
static CYTHON_INLINE char* __Pyx_PyObject_AsString(PyObject*);
static CYTHON_INLINE char* __Pyx_PyObject_AsStringAndSize(PyObject*, Py_ssize_t* length);
#define __Pyx_PyByteArray_FromString(s) PyByteArray_FromStringAndSize((const char*)s, strlen((const char*)s))
#define __Pyx_PyByteArray_FromStringAndSize(s, l) PyByteArray_FromStringAndSize((const char*)s, l)
#define __Pyx_PyBytes_FromString        PyBytes_FromString
#define __Pyx_PyBytes_FromStringAndSize PyBytes_FromStringAndSize
static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char*);
#if PY_MAJOR_VERSION < 3
    #define __Pyx_PyStr_FromString        __Pyx_PyBytes_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyBytes_FromStringAndSize
#else
    #define __Pyx_PyStr_FromString        __Pyx_PyUnicode_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyUnicode_FromStringAndSize
#endif
#define __Pyx_PyObject_AsSString(s)    ((signed char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsUString(s)    ((unsigned char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_FromCString(s)  __Pyx_PyObject_FromString((const char*)s)
#define __Pyx_PyBytes_FromCString(s)   __Pyx_PyBytes_FromString((const char*)s)
#define __Pyx_PyByteArray_FromCString(s)   __Pyx_PyByteArray_FromString((const char*)s)
#define __Pyx_PyStr_FromCString(s)     __Pyx_PyStr_FromString((const char*)s)
#define __Pyx_PyUnicode_FromCString(s) __Pyx_PyUnicode_FromString((const char*)s)
#if PY_MAJOR_VERSION < 3
static CYTHON_INLINE size_t __Pyx_Py_UNICODE_strlen(const Py_UNICODE *u)
{
    const Py_UNICODE *u_end = u;
    while (*u_end++) ;
    return (size_t)(u_end - u - 1);
}
#else
#define __Pyx_Py_UNICODE_strlen Py_UNICODE_strlen
#endif
#define __Pyx_PyUnicode_FromUnicode(u)       PyUnicode_FromUnicode(u, __Pyx_Py_UNICODE_strlen(u))
#define __Pyx_PyUnicode_FromUnicodeAndLength PyUnicode_FromUnicode
#define __Pyx_PyUnicode_AsUnicode            PyUnicode_AsUnicode
#define __Pyx_NewRef(obj) (Py_INCREF(obj), obj)
#define __Pyx_Owned_Py_None(b) __Pyx_NewRef(Py_None)
#define __Pyx_PyBool_FromLong(b) ((b) ? __Pyx_NewRef(Py_True) : __Pyx_NewRef(Py_False))
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject*);
static CYTHON_INLINE PyObject* __Pyx_PyNumber_IntOrLong(PyObject* x);
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject*);
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t);
#if CYTHON_COMPILING_IN_CPYTHON
#define __pyx_PyFloat_AsDouble(x) (PyFloat_CheckExact(x) ? PyFloat_AS_DOUBLE(x) : PyFloat_AsDouble(x))
#else
#define __pyx_PyFloat_AsDouble(x) PyFloat_AsDouble(x)
#endif
#define __pyx_PyFloat_AsFloat(x) ((float) __pyx_PyFloat_AsDouble(x))
#if PY_MAJOR_VERSION >= 3
#define __Pyx_PyNumber_Int(x) (PyLong_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Long(x))
#else
#define __Pyx_PyNumber_Int(x) (PyInt_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Int(x))
#endif
#define __Pyx_PyNumber_Float(x) (PyFloat_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Float(x))
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
static int __Pyx_sys_getdefaultencoding_not_ascii;
static int __Pyx_init_sys_getdefaultencoding_params(void) {
    PyObject* sys;
    PyObject* default_encoding = NULL;
    PyObject* ascii_chars_u = NULL;
    PyObject* ascii_chars_b = NULL;
    const char* default_encoding_c;
    sys = PyImport_ImportModule("sys");
    if (!sys) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) "getdefaultencoding", NULL);
    Py_DECREF(sys);
    if (!default_encoding) goto bad;
    default_encoding_c = PyBytes_AsString(default_encoding);
    if (!default_encoding_c) goto bad;
    if (strcmp(default_encoding_c, "ascii") == 0) {
        __Pyx_sys_getdefaultencoding_not_ascii = 0;
    } else {
        char ascii_chars[128];
        int c;
        for (c = 0; c < 128; c++) {
            ascii_chars[c] = c;
        }
        __Pyx_sys_getdefaultencoding_not_ascii = 1;
        ascii_chars_u = PyUnicode_DecodeASCII(ascii_chars, 128, NULL);
        if (!ascii_chars_u) goto bad;
        ascii_chars_b = PyUnicode_AsEncodedString(ascii_chars_u, default_encoding_c, NULL);
        if (!ascii_chars_b || !PyBytes_Check(ascii_chars_b) || memcmp(ascii_chars, PyBytes_AS_STRING(ascii_chars_b), 128) != 0) {
            PyErr_Format(
                PyExc_ValueError,
                "This module compiled with c_string_encoding=ascii, but default encoding '%.200s' is not a superset of ascii.",
                default_encoding_c);
            goto bad;
        }
        Py_DECREF(ascii_chars_u);
        Py_DECREF(ascii_chars_b);
    }
    Py_DECREF(default_encoding);
    return 0;
bad:
    Py_XDECREF(default_encoding);
    Py_XDECREF(ascii_chars_u);
    Py_XDECREF(ascii_chars_b);
    return -1;
}
#endif
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT && PY_MAJOR_VERSION >= 3
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_DecodeUTF8(c_str, size, NULL)
#else
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_Decode(c_str, size, __PYX_DEFAULT_STRING_ENCODING, NULL)
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
static char* __PYX_DEFAULT_STRING_ENCODING;
static int __Pyx_init_sys_getdefaultencoding_params(void) {
    PyObject* sys;
    PyObject* default_encoding = NULL;
    char* default_encoding_c;
    sys = PyImport_ImportModule("sys");
    if (!sys) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) (const char*) "getdefaultencoding", NULL);
    Py_DECREF(sys);
    if (!default_encoding) goto bad;
    default_encoding_c = PyBytes_AsString(default_encoding);
    if (!default_encoding_c) goto bad;
    __PYX_DEFAULT_STRING_ENCODING = (char*) malloc(strlen(default_encoding_c));
    if (!__PYX_DEFAULT_STRING_ENCODING) goto bad;
    strcpy(__PYX_DEFAULT_STRING_ENCODING, default_encoding_c);
    Py_DECREF(default_encoding);
    return 0;
bad:
    Py_XDECREF(default_encoding);
    return -1;
}
#endif
#endif


/* Test for GCC > 2.95 */
#if defined(__GNUC__)     && (__GNUC__ > 2 || (__GNUC__ == 2 && (__GNUC_MINOR__ > 95)))
  #define likely(x)   __builtin_expect(!!(x), 1)
  #define unlikely(x) __builtin_expect(!!(x), 0)
#else /* !__GNUC__ or GCC < 2.95 */
  #define likely(x)   (x)
  #define unlikely(x) (x)
#endif /* __GNUC__ */

static PyObject *__pyx_m;
static PyObject *__pyx_d;
static PyObject *__pyx_b;
static PyObject *__pyx_empty_tuple;
static PyObject *__pyx_empty_bytes;
static PyObject *__pyx_empty_unicode;
static int __pyx_lineno;
static int __pyx_clineno = 0;
static const char * __pyx_cfilenm= __FILE__;
static const char *__pyx_filename;


static const char *__pyx_f[] = {
  "gumbocy.pyx",
};

/*--- Type declarations ---*/
struct __pyx_obj_7gumbocy_HTMLParser;

/* "re2cy.pxd":3
 * from libcpp.string cimport string
 * 
 * ctypedef Arg* ArgPtr             # <<<<<<<<<<<<<<
 * 
 * 
 */
typedef RE2::Arg *__pyx_t_5re2cy_ArgPtr;

/* "gumbocy.pyx":23
 * _RE_SPLIT_WHITESPACE = re.compile(r"\s+")
 * 
 * cdef class HTMLParser:             # <<<<<<<<<<<<<<
 * 
 *     # Global parser variables
 */
struct __pyx_obj_7gumbocy_HTMLParser {
  PyObject_HEAD
  struct __pyx_vtabstruct_7gumbocy_HTMLParser *__pyx_vtab;
  int nesting_limit;
  int head_only;
  int has_ids_ignore;
  int has_classes_ignore;
  int has_ids_hidden;
  int has_classes_hidden;
  int has_attributes_whitelist;
  int has_classes_boilerplate;
  int has_ids_boilerplate;
  int has_roles_boilerplate;
  int has_metas_whitelist;
  std::unordered_set<int>  tags_ignore;
  std::unordered_set<int>  tags_ignore_head_only;
  std::unordered_set<int>  tags_boilerplate;
  std::unordered_set<int>  tags_boilerplate_bypass;
  std::unordered_set<int>  tags_separators;
  PyObject *attributes_whitelist;
  PyObject *metas_whitelist;
  PyObject *classes_ignore;
  PyObject *ids_ignore;
  PyObject *classes_hidden;
  PyObject *ids_hidden;
  PyObject *classes_boilerplate;
  PyObject *ids_boilerplate;
  PyObject *roles_boilerplate;
  int analyze_internal_hyperlinks;
  int analyze_external_hyperlinks;
  int analyze_word_groups;
  PyObject *current_stack;
  PyObject *analysis;
  PyObject *current_word_group;
  PyObject *current_hyperlink;
  int has_output;
  GumboOutput *output;
  PyObject *nodes;
};



struct __pyx_vtabstruct_7gumbocy_HTMLParser {
  int (*guess_node_hidden)(struct __pyx_obj_7gumbocy_HTMLParser *, GumboNode *, PyObject *);
  int (*guess_node_boilerplate)(struct __pyx_obj_7gumbocy_HTMLParser *, GumboNode *, PyObject *);
  PyObject *(*get_attributes)(struct __pyx_obj_7gumbocy_HTMLParser *, GumboNode *);
  void (*close_word_group)(struct __pyx_obj_7gumbocy_HTMLParser *);
  void (*add_text)(struct __pyx_obj_7gumbocy_HTMLParser *, PyObject *);
  void (*add_hyperlink_text)(struct __pyx_obj_7gumbocy_HTMLParser *, PyObject *);
  void (*open_hyperlink)(struct __pyx_obj_7gumbocy_HTMLParser *, PyObject *);
  void (*close_hyperlink)(struct __pyx_obj_7gumbocy_HTMLParser *);
  int (*_traverse_node)(struct __pyx_obj_7gumbocy_HTMLParser *, int, GumboNode *, int, int, int, int, int);
  int (*_traverse_node_simple)(struct __pyx_obj_7gumbocy_HTMLParser *, int, GumboNode *);
};
static struct __pyx_vtabstruct_7gumbocy_HTMLParser *__pyx_vtabptr_7gumbocy_HTMLParser;

/* --- Runtime support code (head) --- */
/* Refnanny.proto */
#ifndef CYTHON_REFNANNY
  #define CYTHON_REFNANNY 0
#endif
#if CYTHON_REFNANNY
  typedef struct {
    void (*INCREF)(void*, PyObject*, int);
    void (*DECREF)(void*, PyObject*, int);
    void (*GOTREF)(void*, PyObject*, int);
    void (*GIVEREF)(void*, PyObject*, int);
    void* (*SetupContext)(const char*, int, const char*);
    void (*FinishContext)(void**);
  } __Pyx_RefNannyAPIStruct;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNanny = NULL;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname);
  #define __Pyx_RefNannyDeclarations void *__pyx_refnanny = NULL;
#ifdef WITH_THREAD
  #define __Pyx_RefNannySetupContext(name, acquire_gil)\
          if (acquire_gil) {\
              PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();\
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__);\
              PyGILState_Release(__pyx_gilstate_save);\
          } else {\
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__);\
          }
#else
  #define __Pyx_RefNannySetupContext(name, acquire_gil)\
          __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__)
#endif
  #define __Pyx_RefNannyFinishContext()\
          __Pyx_RefNanny->FinishContext(&__pyx_refnanny)
  #define __Pyx_INCREF(r)  __Pyx_RefNanny->INCREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_DECREF(r)  __Pyx_RefNanny->DECREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GOTREF(r)  __Pyx_RefNanny->GOTREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GIVEREF(r) __Pyx_RefNanny->GIVEREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_XINCREF(r)  do { if((r) != NULL) {__Pyx_INCREF(r); }} while(0)
  #define __Pyx_XDECREF(r)  do { if((r) != NULL) {__Pyx_DECREF(r); }} while(0)
  #define __Pyx_XGOTREF(r)  do { if((r) != NULL) {__Pyx_GOTREF(r); }} while(0)
  #define __Pyx_XGIVEREF(r) do { if((r) != NULL) {__Pyx_GIVEREF(r);}} while(0)
#else
  #define __Pyx_RefNannyDeclarations
  #define __Pyx_RefNannySetupContext(name, acquire_gil)
  #define __Pyx_RefNannyFinishContext()
  #define __Pyx_INCREF(r) Py_INCREF(r)
  #define __Pyx_DECREF(r) Py_DECREF(r)
  #define __Pyx_GOTREF(r)
  #define __Pyx_GIVEREF(r)
  #define __Pyx_XINCREF(r) Py_XINCREF(r)
  #define __Pyx_XDECREF(r) Py_XDECREF(r)
  #define __Pyx_XGOTREF(r)
  #define __Pyx_XGIVEREF(r)
#endif
#define __Pyx_XDECREF_SET(r, v) do {\
        PyObject *tmp = (PyObject *) r;\
        r = v; __Pyx_XDECREF(tmp);\
    } while (0)
#define __Pyx_DECREF_SET(r, v) do {\
        PyObject *tmp = (PyObject *) r;\
        r = v; __Pyx_DECREF(tmp);\
    } while (0)
#define __Pyx_CLEAR(r)    do { PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);} while(0)
#define __Pyx_XCLEAR(r)   do { if((r) != NULL) {PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);}} while(0)

/* PyObjectGetAttrStr.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStr(PyObject* obj, PyObject* attr_name) {
    PyTypeObject* tp = Py_TYPE(obj);
    if (likely(tp->tp_getattro))
        return tp->tp_getattro(obj, attr_name);
#if PY_MAJOR_VERSION < 3
    if (likely(tp->tp_getattr))
        return tp->tp_getattr(obj, PyString_AS_STRING(attr_name));
#endif
    return PyObject_GetAttr(obj, attr_name);
}
#else
#define __Pyx_PyObject_GetAttrStr(o,n) PyObject_GetAttr(o,n)
#endif

/* GetBuiltinName.proto */
static PyObject *__Pyx_GetBuiltinName(PyObject *name);

/* RaiseDoubleKeywords.proto */
static void __Pyx_RaiseDoubleKeywordsError(const char* func_name, PyObject* kw_name);

/* ParseKeywords.proto */
static int __Pyx_ParseOptionalKeywords(PyObject *kwds, PyObject **argnames[],\
    PyObject *kwds2, PyObject *values[], Py_ssize_t num_pos_args,\
    const char* function_name);

/* RaiseArgTupleInvalid.proto */
static void __Pyx_RaiseArgtupleInvalid(const char* func_name, int exact,
    Py_ssize_t num_min, Py_ssize_t num_max, Py_ssize_t num_found);

/* ArgTypeTest.proto */
static CYTHON_INLINE int __Pyx_ArgTypeTest(PyObject *obj, PyTypeObject *type, int none_allowed,
    const char *name, int exact);

/* dict_getitem_default.proto */
static PyObject* __Pyx_PyDict_GetItemDefault(PyObject* d, PyObject* key, PyObject* default_value);

/* pyfrozenset_new.proto */
static CYTHON_INLINE PyObject* __Pyx_PyFrozenSet_New(PyObject* it) {
    if (it) {
        PyObject* result;
#if CYTHON_COMPILING_IN_PYPY
        PyObject* args;
        args = PyTuple_Pack(1, it);
        if (unlikely(!args))
            return NULL;
        result = PyObject_Call((PyObject*)&PyFrozenSet_Type, args, NULL);
        Py_DECREF(args);
        return result;
#else
        if (PyFrozenSet_CheckExact(it)) {
            Py_INCREF(it);
            return it;
        }
        result = PyFrozenSet_New(it);
        if (unlikely(!result))
            return NULL;
        if (likely(PySet_GET_SIZE(result)))
            return result;
        Py_DECREF(result);
#endif
    }
#if CYTHON_COMPILING_IN_CPYTHON
    return PyFrozenSet_Type.tp_new(&PyFrozenSet_Type, __pyx_empty_tuple, NULL);
#else
    return PyObject_Call((PyObject*)&PyFrozenSet_Type, __pyx_empty_tuple, NULL);
#endif
}

/* PyDictContains.proto */
static CYTHON_INLINE int __Pyx_PyDict_ContainsTF(PyObject* item, PyObject* dict, int eq) {
    int result = PyDict_Contains(dict, item);
    return unlikely(result < 0) ? result : (result == (eq == Py_EQ));
}

/* IncludeStringH.proto */
#include <string.h>

/* BytesEquals.proto */
static CYTHON_INLINE int __Pyx_PyBytes_Equals(PyObject* s1, PyObject* s2, int equals);

/* UnicodeEquals.proto */
static CYTHON_INLINE int __Pyx_PyUnicode_Equals(PyObject* s1, PyObject* s2, int equals);

/* StrEquals.proto */
#if PY_MAJOR_VERSION >= 3
#define __Pyx_PyString_Equals __Pyx_PyUnicode_Equals
#else
#define __Pyx_PyString_Equals __Pyx_PyBytes_Equals
#endif

/* DictGetItem.proto */
#if PY_MAJOR_VERSION >= 3 && !CYTHON_COMPILING_IN_PYPY
static PyObject *__Pyx_PyDict_GetItem(PyObject *d, PyObject* key) {
    PyObject *value;
    value = PyDict_GetItemWithError(d, key);
    if (unlikely(!value)) {
        if (!PyErr_Occurred()) {
            PyObject* args = PyTuple_Pack(1, key);
            if (likely(args))
                PyErr_SetObject(PyExc_KeyError, args);
            Py_XDECREF(args);
        }
        return NULL;
    }
    Py_INCREF(value);
    return value;
}
#else
    #define __Pyx_PyDict_GetItem(d, key) PyObject_GetItem(d, key)
#endif

/* PyObjectCall.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call(PyObject *func, PyObject *arg, PyObject *kw);
#else
#define __Pyx_PyObject_Call(func, arg, kw) PyObject_Call(func, arg, kw)
#endif

/* PyObjectCallMethO.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallMethO(PyObject *func, PyObject *arg);
#endif

/* PyObjectCallOneArg.proto */
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg);

/* PyObjectCallNoArg.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallNoArg(PyObject *func);
#else
#define __Pyx_PyObject_CallNoArg(func) __Pyx_PyObject_Call(func, __pyx_empty_tuple, NULL)
#endif

/* PySequenceContains.proto */
static CYTHON_INLINE int __Pyx_PySequence_ContainsTF(PyObject* item, PyObject* seq, int eq) {
    int result = PySequence_Contains(seq, item);
    return unlikely(result < 0) ? result : (result == (eq == Py_EQ));
}

/* PyThreadStateGet.proto */
#if CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_PyThreadState_declare  PyThreadState *__pyx_tstate;
#define __Pyx_PyThreadState_assign  __pyx_tstate = PyThreadState_GET();
#else
#define __Pyx_PyThreadState_declare
#define __Pyx_PyThreadState_assign
#endif

/* PyErrFetchRestore.proto */
#if CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_ErrRestoreWithState(type, value, tb)  __Pyx_ErrRestoreInState(PyThreadState_GET(), type, value, tb)
#define __Pyx_ErrFetchWithState(type, value, tb)    __Pyx_ErrFetchInState(PyThreadState_GET(), type, value, tb)
#define __Pyx_ErrRestore(type, value, tb)  __Pyx_ErrRestoreInState(__pyx_tstate, type, value, tb)
#define __Pyx_ErrFetch(type, value, tb)    __Pyx_ErrFetchInState(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx_ErrRestoreInState(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb);
static CYTHON_INLINE void __Pyx_ErrFetchInState(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#else
#define __Pyx_ErrRestoreWithState(type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetchWithState(type, value, tb)  PyErr_Fetch(type, value, tb)
#define __Pyx_ErrRestore(type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetch(type, value, tb)  PyErr_Fetch(type, value, tb)
#endif

/* WriteUnraisableException.proto */
static void __Pyx_WriteUnraisable(const char *name, int clineno,
                                  int lineno, const char *filename,
                                  int full_traceback, int nogil);

/* GetModuleGlobalName.proto */
static CYTHON_INLINE PyObject *__Pyx_GetModuleGlobalName(PyObject *name);

/* None.proto */
static CYTHON_INLINE void __Pyx_RaiseUnboundLocalError(const char *varname);

/* ListAppend.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE int __Pyx_PyList_Append(PyObject* list, PyObject* x) {
    PyListObject* L = (PyListObject*) list;
    Py_ssize_t len = Py_SIZE(list);
    if (likely(L->allocated > len) & likely(len > (L->allocated >> 1))) {
        Py_INCREF(x);
        PyList_SET_ITEM(list, len, x);
        Py_SIZE(list) = len+1;
        return 0;
    }
    return PyList_Append(list, x);
}
#else
#define __Pyx_PyList_Append(L,x) PyList_Append(L,x)
#endif

/* PyObjectCallMethod1.proto */
static PyObject* __Pyx_PyObject_CallMethod1(PyObject* obj, PyObject* method_name, PyObject* arg);

/* append.proto */
static CYTHON_INLINE int __Pyx_PyObject_Append(PyObject* L, PyObject* x);

/* GetItemInt.proto */
#define __Pyx_GetItemInt(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_GetItemInt_Fast(o, (Py_ssize_t)i, is_list, wraparound, boundscheck) :\
    (is_list ? (PyErr_SetString(PyExc_IndexError, "list index out of range"), (PyObject*)NULL) :\
               __Pyx_GetItemInt_Generic(o, to_py_func(i))))
#define __Pyx_GetItemInt_List(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_GetItemInt_List_Fast(o, (Py_ssize_t)i, wraparound, boundscheck) :\
    (PyErr_SetString(PyExc_IndexError, "list index out of range"), (PyObject*)NULL))
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_List_Fast(PyObject *o, Py_ssize_t i,
                                                              int wraparound, int boundscheck);
#define __Pyx_GetItemInt_Tuple(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_GetItemInt_Tuple_Fast(o, (Py_ssize_t)i, wraparound, boundscheck) :\
    (PyErr_SetString(PyExc_IndexError, "tuple index out of range"), (PyObject*)NULL))
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Tuple_Fast(PyObject *o, Py_ssize_t i,
                                                              int wraparound, int boundscheck);
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Generic(PyObject *o, PyObject* j);
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Fast(PyObject *o, Py_ssize_t i,
                                                     int is_list, int wraparound, int boundscheck);

/* SetItemInt.proto */
#define __Pyx_SetItemInt(o, i, v, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_SetItemInt_Fast(o, (Py_ssize_t)i, v, is_list, wraparound, boundscheck) :\
    (is_list ? (PyErr_SetString(PyExc_IndexError, "list assignment index out of range"), -1) :\
               __Pyx_SetItemInt_Generic(o, to_py_func(i), v)))
static CYTHON_INLINE int __Pyx_SetItemInt_Generic(PyObject *o, PyObject *j, PyObject *v);
static CYTHON_INLINE int __Pyx_SetItemInt_Fast(PyObject *o, Py_ssize_t i, PyObject *v,
                                               int is_list, int wraparound, int boundscheck);

/* SliceObject.proto */
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetSlice(
        PyObject* obj, Py_ssize_t cstart, Py_ssize_t cstop,
        PyObject** py_start, PyObject** py_stop, PyObject** py_slice,
        int has_cstart, int has_cstop, int wraparound);

/* PyIntBinop.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static PyObject* __Pyx_PyInt_EqObjC(PyObject *op1, PyObject *op2, long intval, int inplace);
#else
#define __Pyx_PyInt_EqObjC(op1, op2, intval, inplace)\
    PyObject_RichCompare(op1, op2, Py_EQ)
    #endif

/* PyObjectCallMethod2.proto */
static PyObject* __Pyx_PyObject_CallMethod2(PyObject* obj, PyObject* method_name, PyObject* arg1, PyObject* arg2);

/* dict_setdefault.proto */
static CYTHON_INLINE PyObject *__Pyx_PyDict_SetDefault(PyObject *d, PyObject *key, PyObject *default_value, int is_safe_type);

/* PyObjectCallMethod0.proto */
static PyObject* __Pyx_PyObject_CallMethod0(PyObject* obj, PyObject* method_name);

/* pop.proto */
static CYTHON_INLINE PyObject* __Pyx__PyObject_Pop(PyObject* L);
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyList_Pop(PyObject* L);
#define __Pyx_PyObject_Pop(L) (likely(PyList_CheckExact(L)) ?\
    __Pyx_PyList_Pop(L) : __Pyx__PyObject_Pop(L))
#else
#define __Pyx_PyList_Pop(L)  __Pyx__PyObject_Pop(L)
#define __Pyx_PyObject_Pop(L)  __Pyx__PyObject_Pop(L)
#endif

/* UnpackUnboundCMethod.proto */
typedef struct {
    PyObject *type;
    PyObject **method_name;
    PyCFunction func;
    PyObject *method;
    int flag;
} __Pyx_CachedCFunction;

/* CallUnboundCMethod0.proto */
static PyObject* __Pyx__CallUnboundCMethod0(__Pyx_CachedCFunction* cfunc, PyObject* self);
#if CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_CallUnboundCMethod0(cfunc, self)\
    ((likely((cfunc)->func)) ?\
        (likely((cfunc)->flag == METH_NOARGS) ?  (*((cfunc)->func))(self, NULL) :\
         (likely((cfunc)->flag == (METH_VARARGS | METH_KEYWORDS)) ?  ((*(PyCFunctionWithKeywords)(cfunc)->func)(self, __pyx_empty_tuple, NULL)) :\
             ((cfunc)->flag == METH_VARARGS ?  (*((cfunc)->func))(self, __pyx_empty_tuple) : __Pyx__CallUnboundCMethod0(cfunc, self)))) :\
        __Pyx__CallUnboundCMethod0(cfunc, self))
#else
#define __Pyx_CallUnboundCMethod0(cfunc, self)  __Pyx__CallUnboundCMethod0(cfunc, self)
#endif

/* SetVTable.proto */
static int __Pyx_SetVtable(PyObject *dict, void *vtable);

/* Import.proto */
static PyObject *__Pyx_Import(PyObject *name, PyObject *from_list, int level);

/* CodeObjectCache.proto */
typedef struct {
    PyCodeObject* code_object;
    int code_line;
} __Pyx_CodeObjectCacheEntry;
struct __Pyx_CodeObjectCache {
    int count;
    int max_count;
    __Pyx_CodeObjectCacheEntry* entries;
};
static struct __Pyx_CodeObjectCache __pyx_code_cache = {0,0,NULL};
static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line);
static PyCodeObject *__pyx_find_code_object(int code_line);
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object);

/* AddTraceback.proto */
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename);

/* None.proto */
#include <new>

/* CppExceptionConversion.proto */
#ifndef __Pyx_CppExn2PyErr
#include <new>
#include <typeinfo>
#include <stdexcept>
#include <ios>
static void __Pyx_CppExn2PyErr() {
  try {
    if (PyErr_Occurred())
      ; // let the latest Python exn pass through and ignore the current one
    else
      throw;
  } catch (const std::bad_alloc& exn) {
    PyErr_SetString(PyExc_MemoryError, exn.what());
  } catch (const std::bad_cast& exn) {
    PyErr_SetString(PyExc_TypeError, exn.what());
  } catch (const std::domain_error& exn) {
    PyErr_SetString(PyExc_ValueError, exn.what());
  } catch (const std::invalid_argument& exn) {
    PyErr_SetString(PyExc_ValueError, exn.what());
  } catch (const std::ios_base::failure& exn) {
    PyErr_SetString(PyExc_IOError, exn.what());
  } catch (const std::out_of_range& exn) {
    PyErr_SetString(PyExc_IndexError, exn.what());
  } catch (const std::overflow_error& exn) {
    PyErr_SetString(PyExc_OverflowError, exn.what());
  } catch (const std::range_error& exn) {
    PyErr_SetString(PyExc_ArithmeticError, exn.what());
  } catch (const std::underflow_error& exn) {
    PyErr_SetString(PyExc_ArithmeticError, exn.what());
  } catch (const std::exception& exn) {
    PyErr_SetString(PyExc_RuntimeError, exn.what());
  }
  catch (...)
  {
    PyErr_SetString(PyExc_RuntimeError, "Unknown exception");
  }
}
#endif

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_unsigned_int(unsigned int value);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_int(int value);

/* CIntFromPy.proto */
static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *);

/* CIntFromPy.proto */
static CYTHON_INLINE unsigned int __Pyx_PyInt_As_unsigned_int(PyObject *);

/* CIntFromPy.proto */
static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *);

/* CheckBinaryVersion.proto */
static int __Pyx_check_binary_version(void);

/* InitStrings.proto */
static int __Pyx_InitStrings(__Pyx_StringTabEntry *t);

static int __pyx_f_7gumbocy_10HTMLParser_guess_node_hidden(struct __pyx_obj_7gumbocy_HTMLParser *__pyx_v_self, CYTHON_UNUSED GumboNode *__pyx_v_node, PyObject *__pyx_v_attrs); /* proto*/
static int __pyx_f_7gumbocy_10HTMLParser_guess_node_boilerplate(struct __pyx_obj_7gumbocy_HTMLParser *__pyx_v_self, GumboNode *__pyx_v_node, PyObject *__pyx_v_attrs); /* proto*/
static PyObject *__pyx_f_7gumbocy_10HTMLParser_get_attributes(struct __pyx_obj_7gumbocy_HTMLParser *__pyx_v_self, GumboNode *__pyx_v_node); /* proto*/
static void __pyx_f_7gumbocy_10HTMLParser_close_word_group(struct __pyx_obj_7gumbocy_HTMLParser *__pyx_v_self); /* proto*/
static void __pyx_f_7gumbocy_10HTMLParser_add_text(struct __pyx_obj_7gumbocy_HTMLParser *__pyx_v_self, PyObject *__pyx_v_text); /* proto*/
static void __pyx_f_7gumbocy_10HTMLParser_add_hyperlink_text(struct __pyx_obj_7gumbocy_HTMLParser *__pyx_v_self, PyObject *__pyx_v_text); /* proto*/
static void __pyx_f_7gumbocy_10HTMLParser_open_hyperlink(struct __pyx_obj_7gumbocy_HTMLParser *__pyx_v_self, PyObject *__pyx_v_attrs); /* proto*/
static void __pyx_f_7gumbocy_10HTMLParser_close_hyperlink(struct __pyx_obj_7gumbocy_HTMLParser *__pyx_v_self); /* proto*/
static int __pyx_f_7gumbocy_10HTMLParser__traverse_node(struct __pyx_obj_7gumbocy_HTMLParser *__pyx_v_self, int __pyx_v_level, GumboNode *__pyx_v_node, int __pyx_v_is_head, int __pyx_v_is_hidden, int __pyx_v_is_boilerplate, int __pyx_v_is_boilerplate_bypassed, int __pyx_v_is_hyperlink); /* proto*/
static int __pyx_f_7gumbocy_10HTMLParser__traverse_node_simple(struct __pyx_obj_7gumbocy_HTMLParser *__pyx_v_self, int __pyx_v_level, GumboNode *__pyx_v_node); /* proto*/

/* Module declarations from 'libc.string' */

/* Module declarations from 'libcpp.string' */

/* Module declarations from 're2cy' */

/* Module declarations from 'libcpp.utility' */

/* Module declarations from 'libcpp.unordered_set' */

/* Module declarations from 'libcpp.vector' */

/* Module declarations from 'gumbocy' */
static PyTypeObject *__pyx_ptype_7gumbocy_HTMLParser = 0;
static std::vector<__pyx_t_5re2cy_ArgPtr>  *__pyx_v_7gumbocy_argp;
static __pyx_t_5re2cy_ArgPtr *__pyx_v_7gumbocy_empty_args;
static re2::RE2 *__pyx_v_7gumbocy__RE2_SEARCH_STYLE_HIDDEN;
static int __pyx_f_7gumbocy_re2_search(char *, re2::RE2 &); /*proto*/
#define __Pyx_MODULE_NAME "gumbocy"
int __pyx_module_is_main_gumbocy = 0;

/* Implementation of 'gumbocy' */
static PyObject *__pyx_builtin_range;
static const char __pyx_k_[] = " ";
static const char __pyx_k_s[] = "\\s+";
static const char __pyx_k__6[] = "";
static const char __pyx_k__9[] = "//";
static const char __pyx_k_id[] = "id";
static const char __pyx_k_re[] = "re";
static const char __pyx_k_alt[] = "alt";
static const char __pyx_k_get[] = "get";
static const char __pyx_k_pop[] = "pop";
static const char __pyx_k_rel[] = "rel";
static const char __pyx_k_href[] = "href";
static const char __pyx_k_http[] = "http://";
static const char __pyx_k_main[] = "__main__";
static const char __pyx_k_name[] = "name";
static const char __pyx_k_role[] = "role";
static const char __pyx_k_test[] = "__test__";
static const char __pyx_k_true[] = "true";
static const char __pyx_k_about[] = "about:";
static const char __pyx_k_class[] = "class";
static const char __pyx_k_https[] = "https://";
static const char __pyx_k_lower[] = "lower";
static const char __pyx_k_range[] = "range";
static const char __pyx_k_roles[] = "roles";
static const char __pyx_k_split[] = "split";
static const char __pyx_k_strip[] = "strip";
static const char __pyx_k_style[] = "style";
static const char __pyx_k_title[] = "title";
static const char __pyx_k_append[] = "append";
static const char __pyx_k_hidden[] = "hidden";
static const char __pyx_k_import[] = "__import__";
static const char __pyx_k_mailto[] = "mailto:";
static const char __pyx_k_search[] = "search";
static const char __pyx_k_article[] = "article";
static const char __pyx_k_compile[] = "compile";
static const char __pyx_k_content[] = "content";
static const char __pyx_k_options[] = "options";
static const char __pyx_k_base_url[] = "base_url";
static const char __pyx_k_property[] = "property";
static const char __pyx_k_A_Za_z0_9[] = "^([A-Za-z0-9\\+\\.\\-]+\\:)?\\/\\/";
static const char __pyx_k_head_only[] = "head_only";
static const char __pyx_k_head_links[] = "head_links";
static const char __pyx_k_head_metas[] = "head_metas";
static const char __pyx_k_ids_hidden[] = "ids_hidden";
static const char __pyx_k_ids_ignore[] = "ids_ignore";
static const char __pyx_k_javascript[] = "javascript:";
static const char __pyx_k_pyx_vtable[] = "__pyx_vtable__";
static const char __pyx_k_setdefault[] = "setdefault";
static const char __pyx_k_startswith[] = "startswith";
static const char __pyx_k_aria_hidden[] = "aria-hidden";
static const char __pyx_k_tags_ignore[] = "tags_ignore";
static const char __pyx_k_word_groups[] = "word_groups";
static const char __pyx_k_nesting_limit[] = "nesting_limit";
static const char __pyx_k_classes_hidden[] = "classes_hidden";
static const char __pyx_k_classes_ignore[] = "classes_ignore";
static const char __pyx_k_ids_boilerplate[] = "ids_boilerplate";
static const char __pyx_k_metas_whitelist[] = "metas_whitelist";
static const char __pyx_k_tags_separators[] = "tags_separators";
static const char __pyx_k_RE_EXTERNAL_HREF[] = "_RE_EXTERNAL_HREF";
static const char __pyx_k_tags_boilerplate[] = "tags_boilerplate";
static const char __pyx_k_roles_boilerplate[] = "roles_boilerplate";
static const char __pyx_k_RE_SPLIT_WHITESPACE[] = "_RE_SPLIT_WHITESPACE";
static const char __pyx_k_analyze_word_groups[] = "analyze_word_groups";
static const char __pyx_k_classes_boilerplate[] = "classes_boilerplate";
static const char __pyx_k_external_hyperlinks[] = "external_hyperlinks";
static const char __pyx_k_internal_hyperlinks[] = "internal_hyperlinks";
static const char __pyx_k_attributes_whitelist[] = "attributes_whitelist";
static const char __pyx_k_tags_boilerplate_bypass[] = "tags_boilerplate_bypass";
static const char __pyx_k_analyze_external_hyperlinks[] = "analyze_external_hyperlinks";
static const char __pyx_k_analyze_internal_hyperlinks[] = "analyze_internal_hyperlinks";
static PyObject *__pyx_kp_s_;
static PyObject *__pyx_kp_s_A_Za_z0_9;
static PyObject *__pyx_n_s_RE_EXTERNAL_HREF;
static PyObject *__pyx_n_s_RE_SPLIT_WHITESPACE;
static PyObject *__pyx_kp_b__6;
static PyObject *__pyx_kp_s__6;
static PyObject *__pyx_kp_s__9;
static PyObject *__pyx_kp_s_about;
static PyObject *__pyx_n_s_alt;
static PyObject *__pyx_n_s_analyze_external_hyperlinks;
static PyObject *__pyx_n_s_analyze_internal_hyperlinks;
static PyObject *__pyx_n_s_analyze_word_groups;
static PyObject *__pyx_n_s_append;
static PyObject *__pyx_kp_s_aria_hidden;
static PyObject *__pyx_n_s_article;
static PyObject *__pyx_n_s_attributes_whitelist;
static PyObject *__pyx_n_s_base_url;
static PyObject *__pyx_n_b_class;
static PyObject *__pyx_n_s_class;
static PyObject *__pyx_n_s_classes_boilerplate;
static PyObject *__pyx_n_s_classes_hidden;
static PyObject *__pyx_n_s_classes_ignore;
static PyObject *__pyx_n_s_compile;
static PyObject *__pyx_n_s_content;
static PyObject *__pyx_n_s_external_hyperlinks;
static PyObject *__pyx_n_s_get;
static PyObject *__pyx_n_s_head_links;
static PyObject *__pyx_n_s_head_metas;
static PyObject *__pyx_n_s_head_only;
static PyObject *__pyx_n_s_hidden;
static PyObject *__pyx_n_s_href;
static PyObject *__pyx_kp_s_http;
static PyObject *__pyx_kp_s_https;
static PyObject *__pyx_n_s_id;
static PyObject *__pyx_n_s_ids_boilerplate;
static PyObject *__pyx_n_s_ids_hidden;
static PyObject *__pyx_n_s_ids_ignore;
static PyObject *__pyx_n_s_import;
static PyObject *__pyx_n_s_internal_hyperlinks;
static PyObject *__pyx_kp_s_javascript;
static PyObject *__pyx_n_s_lower;
static PyObject *__pyx_kp_s_mailto;
static PyObject *__pyx_n_s_main;
static PyObject *__pyx_n_s_metas_whitelist;
static PyObject *__pyx_n_s_name;
static PyObject *__pyx_n_s_nesting_limit;
static PyObject *__pyx_n_s_options;
static PyObject *__pyx_n_s_pop;
static PyObject *__pyx_n_s_property;
static PyObject *__pyx_n_s_pyx_vtable;
static PyObject *__pyx_n_s_range;
static PyObject *__pyx_n_s_re;
static PyObject *__pyx_n_s_rel;
static PyObject *__pyx_n_s_role;
static PyObject *__pyx_n_s_roles;
static PyObject *__pyx_n_s_roles_boilerplate;
static PyObject *__pyx_kp_s_s;
static PyObject *__pyx_n_s_search;
static PyObject *__pyx_n_s_setdefault;
static PyObject *__pyx_n_s_split;
static PyObject *__pyx_n_s_startswith;
static PyObject *__pyx_n_s_strip;
static PyObject *__pyx_n_s_style;
static PyObject *__pyx_n_s_tags_boilerplate;
static PyObject *__pyx_n_s_tags_boilerplate_bypass;
static PyObject *__pyx_n_s_tags_ignore;
static PyObject *__pyx_n_s_tags_separators;
static PyObject *__pyx_n_s_test;
static PyObject *__pyx_n_s_title;
static PyObject *__pyx_n_s_true;
static PyObject *__pyx_n_s_word_groups;
static int __pyx_pf_7gumbocy_10HTMLParser___cinit__(struct __pyx_obj_7gumbocy_HTMLParser *__pyx_v_self, PyObject *__pyx_v_options); /* proto */
static PyObject *__pyx_pf_7gumbocy_10HTMLParser_2parse(struct __pyx_obj_7gumbocy_HTMLParser *__pyx_v_self, char *__pyx_v_html); /* proto */
static PyObject *__pyx_pf_7gumbocy_10HTMLParser_4analyze(struct __pyx_obj_7gumbocy_HTMLParser *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7gumbocy_10HTMLParser_6listnodes(struct __pyx_obj_7gumbocy_HTMLParser *__pyx_v_self); /* proto */
static void __pyx_pf_7gumbocy_10HTMLParser_8__dealloc__(struct __pyx_obj_7gumbocy_HTMLParser *__pyx_v_self); /* proto */
static PyObject *__pyx_tp_new_7gumbocy_HTMLParser(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static __Pyx_CachedCFunction __pyx_umethod_PyList_Type_pop = {0, &__pyx_n_s_pop, 0, 0, 0};
static PyObject *__pyx_int_0;
static PyObject *__pyx_int_999;
static PyObject *__pyx_tuple__2;
static PyObject *__pyx_tuple__3;
static PyObject *__pyx_tuple__4;
static PyObject *__pyx_tuple__5;
static PyObject *__pyx_tuple__7;
static PyObject *__pyx_tuple__8;
static PyObject *__pyx_tuple__10;
static PyObject *__pyx_tuple__11;
static PyObject *__pyx_tuple__12;
static PyObject *__pyx_tuple__13;
static PyObject *__pyx_tuple__14;
static PyObject *__pyx_tuple__15;
static PyObject *__pyx_tuple__16;
static PyObject *__pyx_tuple__17;
static PyObject *__pyx_tuple__18;
static PyObject *__pyx_tuple__19;

/* "gumbocy.pyx":15
 * cdef re2cy.ArgPtr *empty_args = &(deref(argp)[0])
 * 
 * cdef bint re2_search(char* s, re2cy.RE2 &pattern):             # <<<<<<<<<<<<<<
 *     return re2cy.RE2.PartialMatchN(s, pattern, empty_args, 0)
 * 
 */

static int __pyx_f_7gumbocy_re2_search(char *__pyx_v_s, re2::RE2 &__pyx_v_pattern) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("re2_search", 0);

  /* "gumbocy.pyx":16
 * 
 * cdef bint re2_search(char* s, re2cy.RE2 &pattern):
 *     return re2cy.RE2.PartialMatchN(s, pattern, empty_args, 0)             # <<<<<<<<<<<<<<
 * 
 * cdef re2cy.RE2 *_RE2_SEARCH_STYLE_HIDDEN = new re2cy.RE2(r"(display\s*\:\s*none)|(visibility\s*\:\s*hidden)")
 */
  __pyx_r = re2::RE2::PartialMatchN(__pyx_v_s, __pyx_v_pattern, __pyx_v_7gumbocy_empty_args, 0);
  goto __pyx_L0;

  /* "gumbocy.pyx":15
 * cdef re2cy.ArgPtr *empty_args = &(deref(argp)[0])
 * 
 * cdef bint re2_search(char* s, re2cy.RE2 &pattern):             # <<<<<<<<<<<<<<
 *     return re2cy.RE2.PartialMatchN(s, pattern, empty_args, 0)
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "gumbocy.pyx":73
 *     cdef list nodes
 * 
 *     def __cinit__(self, dict options=None):             # <<<<<<<<<<<<<<
 * 
 *         options = options or {}
 */

/* Python wrapper */
static int __pyx_pw_7gumbocy_10HTMLParser_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_7gumbocy_10HTMLParser_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_options = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_options,0};
    PyObject* values[1] = {0};
    values[0] = ((PyObject*)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_options);
          if (value) { values[0] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__cinit__") < 0)) __PYX_ERR(0, 73, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_options = ((PyObject*)values[0]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__cinit__", 0, 0, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 73, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("gumbocy.HTMLParser.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_options), (&PyDict_Type), 1, "options", 1))) __PYX_ERR(0, 73, __pyx_L1_error)
  __pyx_r = __pyx_pf_7gumbocy_10HTMLParser___cinit__(((struct __pyx_obj_7gumbocy_HTMLParser *)__pyx_v_self), __pyx_v_options);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7gumbocy_10HTMLParser___cinit__(struct __pyx_obj_7gumbocy_HTMLParser *__pyx_v_self, PyObject *__pyx_v_options) {
  PyObject *__pyx_v_tag_name = NULL;
  GumboTag __pyx_v_tag;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  Py_ssize_t __pyx_t_5;
  int __pyx_t_6;
  int __pyx_t_7;
  PyObject *(*__pyx_t_8)(PyObject *);
  char const *__pyx_t_9;
  __Pyx_RefNannySetupContext("__cinit__", 0);
  __Pyx_INCREF(__pyx_v_options);

  /* "gumbocy.pyx":75
 *     def __cinit__(self, dict options=None):
 * 
 *         options = options or {}             # <<<<<<<<<<<<<<
 * 
 *         self.nesting_limit = options.get("nesting_limit", 999)
 */
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_v_options); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 75, __pyx_L1_error)
  if (!__pyx_t_2) {
  } else {
    __Pyx_INCREF(__pyx_v_options);
    __pyx_t_1 = __pyx_v_options;
    goto __pyx_L3_bool_binop_done;
  }
  __pyx_t_3 = PyDict_New(); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 75, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_INCREF(__pyx_t_3);
  __pyx_t_1 = __pyx_t_3;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_L3_bool_binop_done:;
  __Pyx_DECREF_SET(__pyx_v_options, ((PyObject*)__pyx_t_1));
  __pyx_t_1 = 0;

  /* "gumbocy.pyx":77
 *         options = options or {}
 * 
 *         self.nesting_limit = options.get("nesting_limit", 999)             # <<<<<<<<<<<<<<
 *         self.head_only = options.get("head_only")
 * 
 */
  if (unlikely(__pyx_v_options == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%s'", "get");
    __PYX_ERR(0, 77, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_PyDict_GetItemDefault(__pyx_v_options, __pyx_n_s_nesting_limit, __pyx_int_999); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 77, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_4 = __Pyx_PyInt_As_int(__pyx_t_1); if (unlikely((__pyx_t_4 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 77, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_self->nesting_limit = __pyx_t_4;

  /* "gumbocy.pyx":78
 * 
 *         self.nesting_limit = options.get("nesting_limit", 999)
 *         self.head_only = options.get("head_only")             # <<<<<<<<<<<<<<
 * 
 *         self.analyze_external_hyperlinks = bool(options.get("analyze_external_hyperlinks", True))
 */
  if (unlikely(__pyx_v_options == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%s'", "get");
    __PYX_ERR(0, 78, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_PyDict_GetItemDefault(__pyx_v_options, __pyx_n_s_head_only, Py_None); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 78, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely((__pyx_t_2 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 78, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_self->head_only = __pyx_t_2;

  /* "gumbocy.pyx":80
 *         self.head_only = options.get("head_only")
 * 
 *         self.analyze_external_hyperlinks = bool(options.get("analyze_external_hyperlinks", True))             # <<<<<<<<<<<<<<
 *         self.analyze_internal_hyperlinks = bool(options.get("analyze_internal_hyperlinks", True))
 *         self.analyze_word_groups = bool(options.get("analyze_word_groups", True))
 */
  if (unlikely(__pyx_v_options == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%s'", "get");
    __PYX_ERR(0, 80, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_PyDict_GetItemDefault(__pyx_v_options, __pyx_n_s_analyze_external_hyperlinks, Py_True); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 80, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 80, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_self->analyze_external_hyperlinks = (!(!__pyx_t_2));

  /* "gumbocy.pyx":81
 * 
 *         self.analyze_external_hyperlinks = bool(options.get("analyze_external_hyperlinks", True))
 *         self.analyze_internal_hyperlinks = bool(options.get("analyze_internal_hyperlinks", True))             # <<<<<<<<<<<<<<
 *         self.analyze_word_groups = bool(options.get("analyze_word_groups", True))
 * 
 */
  if (unlikely(__pyx_v_options == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%s'", "get");
    __PYX_ERR(0, 81, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_PyDict_GetItemDefault(__pyx_v_options, __pyx_n_s_analyze_internal_hyperlinks, Py_True); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 81, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 81, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_self->analyze_internal_hyperlinks = (!(!__pyx_t_2));

  /* "gumbocy.pyx":82
 *         self.analyze_external_hyperlinks = bool(options.get("analyze_external_hyperlinks", True))
 *         self.analyze_internal_hyperlinks = bool(options.get("analyze_internal_hyperlinks", True))
 *         self.analyze_word_groups = bool(options.get("analyze_word_groups", True))             # <<<<<<<<<<<<<<
 * 
 *         self.classes_ignore = frozenset(options.get("classes_ignore") or [])
 */
  if (unlikely(__pyx_v_options == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%s'", "get");
    __PYX_ERR(0, 82, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_PyDict_GetItemDefault(__pyx_v_options, __pyx_n_s_analyze_word_groups, Py_True); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 82, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 82, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_self->analyze_word_groups = (!(!__pyx_t_2));

  /* "gumbocy.pyx":84
 *         self.analyze_word_groups = bool(options.get("analyze_word_groups", True))
 * 
 *         self.classes_ignore = frozenset(options.get("classes_ignore") or [])             # <<<<<<<<<<<<<<
 *         self.has_classes_ignore = len(self.classes_ignore) > 0
 * 
 */
  if (unlikely(__pyx_v_options == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%s'", "get");
    __PYX_ERR(0, 84, __pyx_L1_error)
  }
  __pyx_t_3 = __Pyx_PyDict_GetItemDefault(__pyx_v_options, __pyx_n_s_classes_ignore, Py_None); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 84, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 84, __pyx_L1_error)
  if (!__pyx_t_2) {
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  } else {
    __Pyx_INCREF(__pyx_t_3);
    __pyx_t_1 = __pyx_t_3;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    goto __pyx_L5_bool_binop_done;
  }
  __pyx_t_3 = PyList_New(0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 84, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_INCREF(__pyx_t_3);
  __pyx_t_1 = __pyx_t_3;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_L5_bool_binop_done:;
  __pyx_t_3 = __Pyx_PyFrozenSet_New(__pyx_t_1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 84, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_GIVEREF(__pyx_t_3);
  __Pyx_GOTREF(__pyx_v_self->classes_ignore);
  __Pyx_DECREF(__pyx_v_self->classes_ignore);
  __pyx_v_self->classes_ignore = ((PyObject*)__pyx_t_3);
  __pyx_t_3 = 0;

  /* "gumbocy.pyx":85
 * 
 *         self.classes_ignore = frozenset(options.get("classes_ignore") or [])
 *         self.has_classes_ignore = len(self.classes_ignore) > 0             # <<<<<<<<<<<<<<
 * 
 *         self.ids_ignore = frozenset(options.get("ids_ignore") or [])
 */
  __pyx_t_3 = __pyx_v_self->classes_ignore;
  __Pyx_INCREF(__pyx_t_3);
  if (unlikely(__pyx_t_3 == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");
    __PYX_ERR(0, 85, __pyx_L1_error)
  }
  __pyx_t_5 = PySet_GET_SIZE(__pyx_t_3); if (unlikely(__pyx_t_5 == -1)) __PYX_ERR(0, 85, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_self->has_classes_ignore = (__pyx_t_5 > 0);

  /* "gumbocy.pyx":87
 *         self.has_classes_ignore = len(self.classes_ignore) > 0
 * 
 *         self.ids_ignore = frozenset(options.get("ids_ignore") or [])             # <<<<<<<<<<<<<<
 *         self.has_ids_ignore = len(self.ids_ignore) > 0
 * 
 */
  if (unlikely(__pyx_v_options == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%s'", "get");
    __PYX_ERR(0, 87, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_PyDict_GetItemDefault(__pyx_v_options, __pyx_n_s_ids_ignore, Py_None); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 87, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 87, __pyx_L1_error)
  if (!__pyx_t_2) {
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  } else {
    __Pyx_INCREF(__pyx_t_1);
    __pyx_t_3 = __pyx_t_1;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    goto __pyx_L7_bool_binop_done;
  }
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 87, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_t_1);
  __pyx_t_3 = __pyx_t_1;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_L7_bool_binop_done:;
  __pyx_t_1 = __Pyx_PyFrozenSet_New(__pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 87, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->ids_ignore);
  __Pyx_DECREF(__pyx_v_self->ids_ignore);
  __pyx_v_self->ids_ignore = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "gumbocy.pyx":88
 * 
 *         self.ids_ignore = frozenset(options.get("ids_ignore") or [])
 *         self.has_ids_ignore = len(self.ids_ignore) > 0             # <<<<<<<<<<<<<<
 * 
 *         self.classes_hidden = frozenset(options.get("classes_hidden") or [])
 */
  __pyx_t_1 = __pyx_v_self->ids_ignore;
  __Pyx_INCREF(__pyx_t_1);
  if (unlikely(__pyx_t_1 == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");
    __PYX_ERR(0, 88, __pyx_L1_error)
  }
  __pyx_t_5 = PySet_GET_SIZE(__pyx_t_1); if (unlikely(__pyx_t_5 == -1)) __PYX_ERR(0, 88, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_self->has_ids_ignore = (__pyx_t_5 > 0);

  /* "gumbocy.pyx":90
 *         self.has_ids_ignore = len(self.ids_ignore) > 0
 * 
 *         self.classes_hidden = frozenset(options.get("classes_hidden") or [])             # <<<<<<<<<<<<<<
 *         self.has_classes_hidden = len(self.classes_hidden) > 0
 * 
 */
  if (unlikely(__pyx_v_options == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%s'", "get");
    __PYX_ERR(0, 90, __pyx_L1_error)
  }
  __pyx_t_3 = __Pyx_PyDict_GetItemDefault(__pyx_v_options, __pyx_n_s_classes_hidden, Py_None); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 90, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 90, __pyx_L1_error)
  if (!__pyx_t_2) {
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  } else {
    __Pyx_INCREF(__pyx_t_3);
    __pyx_t_1 = __pyx_t_3;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    goto __pyx_L9_bool_binop_done;
  }
  __pyx_t_3 = PyList_New(0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 90, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_INCREF(__pyx_t_3);
  __pyx_t_1 = __pyx_t_3;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_L9_bool_binop_done:;
  __pyx_t_3 = __Pyx_PyFrozenSet_New(__pyx_t_1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 90, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_GIVEREF(__pyx_t_3);
  __Pyx_GOTREF(__pyx_v_self->classes_hidden);
  __Pyx_DECREF(__pyx_v_self->classes_hidden);
  __pyx_v_self->classes_hidden = ((PyObject*)__pyx_t_3);
  __pyx_t_3 = 0;

  /* "gumbocy.pyx":91
 * 
 *         self.classes_hidden = frozenset(options.get("classes_hidden") or [])
 *         self.has_classes_hidden = len(self.classes_hidden) > 0             # <<<<<<<<<<<<<<
 * 
 *         self.ids_hidden = frozenset(options.get("ids_hidden") or [])
 */
  __pyx_t_3 = __pyx_v_self->classes_hidden;
  __Pyx_INCREF(__pyx_t_3);
  if (unlikely(__pyx_t_3 == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");
    __PYX_ERR(0, 91, __pyx_L1_error)
  }
  __pyx_t_5 = PySet_GET_SIZE(__pyx_t_3); if (unlikely(__pyx_t_5 == -1)) __PYX_ERR(0, 91, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_self->has_classes_hidden = (__pyx_t_5 > 0);

  /* "gumbocy.pyx":93
 *         self.has_classes_hidden = len(self.classes_hidden) > 0
 * 
 *         self.ids_hidden = frozenset(options.get("ids_hidden") or [])             # <<<<<<<<<<<<<<
 *         self.has_ids_hidden = len(self.ids_hidden) > 0
 * 
 */
  if (unlikely(__pyx_v_options == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%s'", "get");
    __PYX_ERR(0, 93, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_PyDict_GetItemDefault(__pyx_v_options, __pyx_n_s_ids_hidden, Py_None); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 93, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 93, __pyx_L1_error)
  if (!__pyx_t_2) {
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  } else {
    __Pyx_INCREF(__pyx_t_1);
    __pyx_t_3 = __pyx_t_1;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    goto __pyx_L11_bool_binop_done;
  }
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 93, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_t_1);
  __pyx_t_3 = __pyx_t_1;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_L11_bool_binop_done:;
  __pyx_t_1 = __Pyx_PyFrozenSet_New(__pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 93, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->ids_hidden);
  __Pyx_DECREF(__pyx_v_self->ids_hidden);
  __pyx_v_self->ids_hidden = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "gumbocy.pyx":94
 * 
 *         self.ids_hidden = frozenset(options.get("ids_hidden") or [])
 *         self.has_ids_hidden = len(self.ids_hidden) > 0             # <<<<<<<<<<<<<<
 * 
 *         self.classes_boilerplate = frozenset(options.get("classes_boilerplate") or [])
 */
  __pyx_t_1 = __pyx_v_self->ids_hidden;
  __Pyx_INCREF(__pyx_t_1);
  if (unlikely(__pyx_t_1 == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");
    __PYX_ERR(0, 94, __pyx_L1_error)
  }
  __pyx_t_5 = PySet_GET_SIZE(__pyx_t_1); if (unlikely(__pyx_t_5 == -1)) __PYX_ERR(0, 94, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_self->has_ids_hidden = (__pyx_t_5 > 0);

  /* "gumbocy.pyx":96
 *         self.has_ids_hidden = len(self.ids_hidden) > 0
 * 
 *         self.classes_boilerplate = frozenset(options.get("classes_boilerplate") or [])             # <<<<<<<<<<<<<<
 *         self.has_classes_boilerplate = len(self.classes_boilerplate) > 0
 * 
 */
  if (unlikely(__pyx_v_options == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%s'", "get");
    __PYX_ERR(0, 96, __pyx_L1_error)
  }
  __pyx_t_3 = __Pyx_PyDict_GetItemDefault(__pyx_v_options, __pyx_n_s_classes_boilerplate, Py_None); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 96, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 96, __pyx_L1_error)
  if (!__pyx_t_2) {
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  } else {
    __Pyx_INCREF(__pyx_t_3);
    __pyx_t_1 = __pyx_t_3;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    goto __pyx_L13_bool_binop_done;
  }
  __pyx_t_3 = PyList_New(0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 96, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_INCREF(__pyx_t_3);
  __pyx_t_1 = __pyx_t_3;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_L13_bool_binop_done:;
  __pyx_t_3 = __Pyx_PyFrozenSet_New(__pyx_t_1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 96, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_GIVEREF(__pyx_t_3);
  __Pyx_GOTREF(__pyx_v_self->classes_boilerplate);
  __Pyx_DECREF(__pyx_v_self->classes_boilerplate);
  __pyx_v_self->classes_boilerplate = ((PyObject*)__pyx_t_3);
  __pyx_t_3 = 0;

  /* "gumbocy.pyx":97
 * 
 *         self.classes_boilerplate = frozenset(options.get("classes_boilerplate") or [])
 *         self.has_classes_boilerplate = len(self.classes_boilerplate) > 0             # <<<<<<<<<<<<<<
 * 
 *         self.ids_boilerplate = frozenset(options.get("ids_boilerplate") or [])
 */
  __pyx_t_3 = __pyx_v_self->classes_boilerplate;
  __Pyx_INCREF(__pyx_t_3);
  if (unlikely(__pyx_t_3 == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");
    __PYX_ERR(0, 97, __pyx_L1_error)
  }
  __pyx_t_5 = PySet_GET_SIZE(__pyx_t_3); if (unlikely(__pyx_t_5 == -1)) __PYX_ERR(0, 97, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_self->has_classes_boilerplate = (__pyx_t_5 > 0);

  /* "gumbocy.pyx":99
 *         self.has_classes_boilerplate = len(self.classes_boilerplate) > 0
 * 
 *         self.ids_boilerplate = frozenset(options.get("ids_boilerplate") or [])             # <<<<<<<<<<<<<<
 *         self.has_ids_boilerplate = len(self.ids_boilerplate) > 0
 * 
 */
  if (unlikely(__pyx_v_options == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%s'", "get");
    __PYX_ERR(0, 99, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_PyDict_GetItemDefault(__pyx_v_options, __pyx_n_s_ids_boilerplate, Py_None); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 99, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 99, __pyx_L1_error)
  if (!__pyx_t_2) {
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  } else {
    __Pyx_INCREF(__pyx_t_1);
    __pyx_t_3 = __pyx_t_1;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    goto __pyx_L15_bool_binop_done;
  }
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 99, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_t_1);
  __pyx_t_3 = __pyx_t_1;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_L15_bool_binop_done:;
  __pyx_t_1 = __Pyx_PyFrozenSet_New(__pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 99, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->ids_boilerplate);
  __Pyx_DECREF(__pyx_v_self->ids_boilerplate);
  __pyx_v_self->ids_boilerplate = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "gumbocy.pyx":100
 * 
 *         self.ids_boilerplate = frozenset(options.get("ids_boilerplate") or [])
 *         self.has_ids_boilerplate = len(self.ids_boilerplate) > 0             # <<<<<<<<<<<<<<
 * 
 *         self.roles_boilerplate = frozenset(options.get("roles_boilerplate") or [])
 */
  __pyx_t_1 = __pyx_v_self->ids_boilerplate;
  __Pyx_INCREF(__pyx_t_1);
  if (unlikely(__pyx_t_1 == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");
    __PYX_ERR(0, 100, __pyx_L1_error)
  }
  __pyx_t_5 = PySet_GET_SIZE(__pyx_t_1); if (unlikely(__pyx_t_5 == -1)) __PYX_ERR(0, 100, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_self->has_ids_boilerplate = (__pyx_t_5 > 0);

  /* "gumbocy.pyx":102
 *         self.has_ids_boilerplate = len(self.ids_boilerplate) > 0
 * 
 *         self.roles_boilerplate = frozenset(options.get("roles_boilerplate") or [])             # <<<<<<<<<<<<<<
 *         self.has_roles_boilerplate = len(self.roles_boilerplate) > 0
 * 
 */
  if (unlikely(__pyx_v_options == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%s'", "get");
    __PYX_ERR(0, 102, __pyx_L1_error)
  }
  __pyx_t_3 = __Pyx_PyDict_GetItemDefault(__pyx_v_options, __pyx_n_s_roles_boilerplate, Py_None); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 102, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 102, __pyx_L1_error)
  if (!__pyx_t_2) {
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  } else {
    __Pyx_INCREF(__pyx_t_3);
    __pyx_t_1 = __pyx_t_3;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    goto __pyx_L17_bool_binop_done;
  }
  __pyx_t_3 = PyList_New(0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 102, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_INCREF(__pyx_t_3);
  __pyx_t_1 = __pyx_t_3;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_L17_bool_binop_done:;
  __pyx_t_3 = __Pyx_PyFrozenSet_New(__pyx_t_1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 102, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_GIVEREF(__pyx_t_3);
  __Pyx_GOTREF(__pyx_v_self->roles_boilerplate);
  __Pyx_DECREF(__pyx_v_self->roles_boilerplate);
  __pyx_v_self->roles_boilerplate = ((PyObject*)__pyx_t_3);
  __pyx_t_3 = 0;

  /* "gumbocy.pyx":103
 * 
 *         self.roles_boilerplate = frozenset(options.get("roles_boilerplate") or [])
 *         self.has_roles_boilerplate = len(self.roles_boilerplate) > 0             # <<<<<<<<<<<<<<
 * 
 *         self.attributes_whitelist = set(options.get("attributes_whitelist") or [])
 */
  __pyx_t_3 = __pyx_v_self->roles_boilerplate;
  __Pyx_INCREF(__pyx_t_3);
  if (unlikely(__pyx_t_3 == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");
    __PYX_ERR(0, 103, __pyx_L1_error)
  }
  __pyx_t_5 = PySet_GET_SIZE(__pyx_t_3); if (unlikely(__pyx_t_5 == -1)) __PYX_ERR(0, 103, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_self->has_roles_boilerplate = (__pyx_t_5 > 0);

  /* "gumbocy.pyx":105
 *         self.has_roles_boilerplate = len(self.roles_boilerplate) > 0
 * 
 *         self.attributes_whitelist = set(options.get("attributes_whitelist") or [])             # <<<<<<<<<<<<<<
 * 
 *         # Some options add attributes to the whitelist
 */
  if (unlikely(__pyx_v_options == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%s'", "get");
    __PYX_ERR(0, 105, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_PyDict_GetItemDefault(__pyx_v_options, __pyx_n_s_attributes_whitelist, Py_None); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 105, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 105, __pyx_L1_error)
  if (!__pyx_t_2) {
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  } else {
    __Pyx_INCREF(__pyx_t_1);
    __pyx_t_3 = __pyx_t_1;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    goto __pyx_L19_bool_binop_done;
  }
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 105, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_t_1);
  __pyx_t_3 = __pyx_t_1;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_L19_bool_binop_done:;
  __pyx_t_1 = PySet_New(__pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 105, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->attributes_whitelist);
  __Pyx_DECREF(__pyx_v_self->attributes_whitelist);
  __pyx_v_self->attributes_whitelist = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "gumbocy.pyx":108
 * 
 *         # Some options add attributes to the whitelist
 *         if self.analyze_external_hyperlinks or self.analyze_internal_hyperlinks:             # <<<<<<<<<<<<<<
 *             self.attributes_whitelist.add("href")
 *             self.attributes_whitelist.add("rel")
 */
  __pyx_t_6 = (__pyx_v_self->analyze_external_hyperlinks != 0);
  if (!__pyx_t_6) {
  } else {
    __pyx_t_2 = __pyx_t_6;
    goto __pyx_L22_bool_binop_done;
  }
  __pyx_t_6 = (__pyx_v_self->analyze_internal_hyperlinks != 0);
  __pyx_t_2 = __pyx_t_6;
  __pyx_L22_bool_binop_done:;
  if (__pyx_t_2) {

    /* "gumbocy.pyx":109
 *         # Some options add attributes to the whitelist
 *         if self.analyze_external_hyperlinks or self.analyze_internal_hyperlinks:
 *             self.attributes_whitelist.add("href")             # <<<<<<<<<<<<<<
 *             self.attributes_whitelist.add("rel")
 * 
 */
    if (unlikely(__pyx_v_self->attributes_whitelist == Py_None)) {
      PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%s'", "add");
      __PYX_ERR(0, 109, __pyx_L1_error)
    }
    __pyx_t_7 = PySet_Add(__pyx_v_self->attributes_whitelist, __pyx_n_s_href); if (unlikely(__pyx_t_7 == -1)) __PYX_ERR(0, 109, __pyx_L1_error)

    /* "gumbocy.pyx":110
 *         if self.analyze_external_hyperlinks or self.analyze_internal_hyperlinks:
 *             self.attributes_whitelist.add("href")
 *             self.attributes_whitelist.add("rel")             # <<<<<<<<<<<<<<
 * 
 *         if self.has_roles_boilerplate:
 */
    if (unlikely(__pyx_v_self->attributes_whitelist == Py_None)) {
      PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%s'", "add");
      __PYX_ERR(0, 110, __pyx_L1_error)
    }
    __pyx_t_7 = PySet_Add(__pyx_v_self->attributes_whitelist, __pyx_n_s_rel); if (unlikely(__pyx_t_7 == -1)) __PYX_ERR(0, 110, __pyx_L1_error)

    /* "gumbocy.pyx":108
 * 
 *         # Some options add attributes to the whitelist
 *         if self.analyze_external_hyperlinks or self.analyze_internal_hyperlinks:             # <<<<<<<<<<<<<<
 *             self.attributes_whitelist.add("href")
 *             self.attributes_whitelist.add("rel")
 */
  }

  /* "gumbocy.pyx":112
 *             self.attributes_whitelist.add("rel")
 * 
 *         if self.has_roles_boilerplate:             # <<<<<<<<<<<<<<
 *             self.attributes_whitelist.add("roles")
 * 
 */
  __pyx_t_2 = (__pyx_v_self->has_roles_boilerplate != 0);
  if (__pyx_t_2) {

    /* "gumbocy.pyx":113
 * 
 *         if self.has_roles_boilerplate:
 *             self.attributes_whitelist.add("roles")             # <<<<<<<<<<<<<<
 * 
 *         if self.has_ids_boilerplate or self.has_ids_hidden or self.has_ids_ignore:
 */
    if (unlikely(__pyx_v_self->attributes_whitelist == Py_None)) {
      PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%s'", "add");
      __PYX_ERR(0, 113, __pyx_L1_error)
    }
    __pyx_t_7 = PySet_Add(__pyx_v_self->attributes_whitelist, __pyx_n_s_roles); if (unlikely(__pyx_t_7 == -1)) __PYX_ERR(0, 113, __pyx_L1_error)

    /* "gumbocy.pyx":112
 *             self.attributes_whitelist.add("rel")
 * 
 *         if self.has_roles_boilerplate:             # <<<<<<<<<<<<<<
 *             self.attributes_whitelist.add("roles")
 * 
 */
  }

  /* "gumbocy.pyx":115
 *             self.attributes_whitelist.add("roles")
 * 
 *         if self.has_ids_boilerplate or self.has_ids_hidden or self.has_ids_ignore:             # <<<<<<<<<<<<<<
 *             self.attributes_whitelist.add("id")
 * 
 */
  __pyx_t_6 = (__pyx_v_self->has_ids_boilerplate != 0);
  if (!__pyx_t_6) {
  } else {
    __pyx_t_2 = __pyx_t_6;
    goto __pyx_L26_bool_binop_done;
  }
  __pyx_t_6 = (__pyx_v_self->has_ids_hidden != 0);
  if (!__pyx_t_6) {
  } else {
    __pyx_t_2 = __pyx_t_6;
    goto __pyx_L26_bool_binop_done;
  }
  __pyx_t_6 = (__pyx_v_self->has_ids_ignore != 0);
  __pyx_t_2 = __pyx_t_6;
  __pyx_L26_bool_binop_done:;
  if (__pyx_t_2) {

    /* "gumbocy.pyx":116
 * 
 *         if self.has_ids_boilerplate or self.has_ids_hidden or self.has_ids_ignore:
 *             self.attributes_whitelist.add("id")             # <<<<<<<<<<<<<<
 * 
 *         if self.has_classes_boilerplate or self.has_classes_hidden or self.has_classes_ignore:
 */
    if (unlikely(__pyx_v_self->attributes_whitelist == Py_None)) {
      PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%s'", "add");
      __PYX_ERR(0, 116, __pyx_L1_error)
    }
    __pyx_t_7 = PySet_Add(__pyx_v_self->attributes_whitelist, __pyx_n_s_id); if (unlikely(__pyx_t_7 == -1)) __PYX_ERR(0, 116, __pyx_L1_error)

    /* "gumbocy.pyx":115
 *             self.attributes_whitelist.add("roles")
 * 
 *         if self.has_ids_boilerplate or self.has_ids_hidden or self.has_ids_ignore:             # <<<<<<<<<<<<<<
 *             self.attributes_whitelist.add("id")
 * 
 */
  }

  /* "gumbocy.pyx":118
 *             self.attributes_whitelist.add("id")
 * 
 *         if self.has_classes_boilerplate or self.has_classes_hidden or self.has_classes_ignore:             # <<<<<<<<<<<<<<
 *             self.attributes_whitelist.add("class")
 * 
 */
  __pyx_t_6 = (__pyx_v_self->has_classes_boilerplate != 0);
  if (!__pyx_t_6) {
  } else {
    __pyx_t_2 = __pyx_t_6;
    goto __pyx_L30_bool_binop_done;
  }
  __pyx_t_6 = (__pyx_v_self->has_classes_hidden != 0);
  if (!__pyx_t_6) {
  } else {
    __pyx_t_2 = __pyx_t_6;
    goto __pyx_L30_bool_binop_done;
  }
  __pyx_t_6 = (__pyx_v_self->has_classes_ignore != 0);
  __pyx_t_2 = __pyx_t_6;
  __pyx_L30_bool_binop_done:;
  if (__pyx_t_2) {

    /* "gumbocy.pyx":119
 * 
 *         if self.has_classes_boilerplate or self.has_classes_hidden or self.has_classes_ignore:
 *             self.attributes_whitelist.add("class")             # <<<<<<<<<<<<<<
 * 
 *         self.has_attributes_whitelist = len(self.attributes_whitelist) > 0
 */
    if (unlikely(__pyx_v_self->attributes_whitelist == Py_None)) {
      PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%s'", "add");
      __PYX_ERR(0, 119, __pyx_L1_error)
    }
    __pyx_t_7 = PySet_Add(__pyx_v_self->attributes_whitelist, __pyx_n_s_class); if (unlikely(__pyx_t_7 == -1)) __PYX_ERR(0, 119, __pyx_L1_error)

    /* "gumbocy.pyx":118
 *             self.attributes_whitelist.add("id")
 * 
 *         if self.has_classes_boilerplate or self.has_classes_hidden or self.has_classes_ignore:             # <<<<<<<<<<<<<<
 *             self.attributes_whitelist.add("class")
 * 
 */
  }

  /* "gumbocy.pyx":121
 *             self.attributes_whitelist.add("class")
 * 
 *         self.has_attributes_whitelist = len(self.attributes_whitelist) > 0             # <<<<<<<<<<<<<<
 * 
 *         self.metas_whitelist = frozenset(options.get("metas_whitelist") or [])
 */
  __pyx_t_1 = __pyx_v_self->attributes_whitelist;
  __Pyx_INCREF(__pyx_t_1);
  if (unlikely(__pyx_t_1 == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");
    __PYX_ERR(0, 121, __pyx_L1_error)
  }
  __pyx_t_5 = PySet_GET_SIZE(__pyx_t_1); if (unlikely(__pyx_t_5 == -1)) __PYX_ERR(0, 121, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_self->has_attributes_whitelist = (__pyx_t_5 > 0);

  /* "gumbocy.pyx":123
 *         self.has_attributes_whitelist = len(self.attributes_whitelist) > 0
 * 
 *         self.metas_whitelist = frozenset(options.get("metas_whitelist") or [])             # <<<<<<<<<<<<<<
 *         self.has_metas_whitelist = len(self.metas_whitelist) > 0
 * 
 */
  if (unlikely(__pyx_v_options == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%s'", "get");
    __PYX_ERR(0, 123, __pyx_L1_error)
  }
  __pyx_t_3 = __Pyx_PyDict_GetItemDefault(__pyx_v_options, __pyx_n_s_metas_whitelist, Py_None); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 123, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 123, __pyx_L1_error)
  if (!__pyx_t_2) {
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  } else {
    __Pyx_INCREF(__pyx_t_3);
    __pyx_t_1 = __pyx_t_3;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    goto __pyx_L33_bool_binop_done;
  }
  __pyx_t_3 = PyList_New(0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 123, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_INCREF(__pyx_t_3);
  __pyx_t_1 = __pyx_t_3;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_L33_bool_binop_done:;
  __pyx_t_3 = __Pyx_PyFrozenSet_New(__pyx_t_1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 123, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_GIVEREF(__pyx_t_3);
  __Pyx_GOTREF(__pyx_v_self->metas_whitelist);
  __Pyx_DECREF(__pyx_v_self->metas_whitelist);
  __pyx_v_self->metas_whitelist = ((PyObject*)__pyx_t_3);
  __pyx_t_3 = 0;

  /* "gumbocy.pyx":124
 * 
 *         self.metas_whitelist = frozenset(options.get("metas_whitelist") or [])
 *         self.has_metas_whitelist = len(self.metas_whitelist) > 0             # <<<<<<<<<<<<<<
 * 
 *         self.tags_ignore_head_only.insert(gumbocy.GUMBO_TAG_BODY)
 */
  __pyx_t_3 = __pyx_v_self->metas_whitelist;
  __Pyx_INCREF(__pyx_t_3);
  if (unlikely(__pyx_t_3 == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");
    __PYX_ERR(0, 124, __pyx_L1_error)
  }
  __pyx_t_5 = PySet_GET_SIZE(__pyx_t_3); if (unlikely(__pyx_t_5 == -1)) __PYX_ERR(0, 124, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_self->has_metas_whitelist = (__pyx_t_5 > 0);

  /* "gumbocy.pyx":126
 *         self.has_metas_whitelist = len(self.metas_whitelist) > 0
 * 
 *         self.tags_ignore_head_only.insert(gumbocy.GUMBO_TAG_BODY)             # <<<<<<<<<<<<<<
 *         self.tags_ignore_head_only.insert(gumbocy.GUMBO_TAG_P)
 *         self.tags_ignore_head_only.insert(gumbocy.GUMBO_TAG_DIV)
 */
  __pyx_v_self->tags_ignore_head_only.insert(GUMBO_TAG_BODY);

  /* "gumbocy.pyx":127
 * 
 *         self.tags_ignore_head_only.insert(gumbocy.GUMBO_TAG_BODY)
 *         self.tags_ignore_head_only.insert(gumbocy.GUMBO_TAG_P)             # <<<<<<<<<<<<<<
 *         self.tags_ignore_head_only.insert(gumbocy.GUMBO_TAG_DIV)
 *         self.tags_ignore_head_only.insert(gumbocy.GUMBO_TAG_SPAN)
 */
  __pyx_v_self->tags_ignore_head_only.insert(GUMBO_TAG_P);

  /* "gumbocy.pyx":128
 *         self.tags_ignore_head_only.insert(gumbocy.GUMBO_TAG_BODY)
 *         self.tags_ignore_head_only.insert(gumbocy.GUMBO_TAG_P)
 *         self.tags_ignore_head_only.insert(gumbocy.GUMBO_TAG_DIV)             # <<<<<<<<<<<<<<
 *         self.tags_ignore_head_only.insert(gumbocy.GUMBO_TAG_SPAN)
 * 
 */
  __pyx_v_self->tags_ignore_head_only.insert(GUMBO_TAG_DIV);

  /* "gumbocy.pyx":129
 *         self.tags_ignore_head_only.insert(gumbocy.GUMBO_TAG_P)
 *         self.tags_ignore_head_only.insert(gumbocy.GUMBO_TAG_DIV)
 *         self.tags_ignore_head_only.insert(gumbocy.GUMBO_TAG_SPAN)             # <<<<<<<<<<<<<<
 * 
 *         for tag_name in options.get("tags_ignore", []):
 */
  __pyx_v_self->tags_ignore_head_only.insert(GUMBO_TAG_SPAN);

  /* "gumbocy.pyx":131
 *         self.tags_ignore_head_only.insert(gumbocy.GUMBO_TAG_SPAN)
 * 
 *         for tag_name in options.get("tags_ignore", []):             # <<<<<<<<<<<<<<
 *             tag = gumbocy.gumbo_tag_enum(tag_name)
 *             if tag != gumbocy.GUMBO_TAG_UNKNOWN:
 */
  if (unlikely(__pyx_v_options == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%s'", "get");
    __PYX_ERR(0, 131, __pyx_L1_error)
  }
  __pyx_t_3 = PyList_New(0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 131, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_1 = __Pyx_PyDict_GetItemDefault(__pyx_v_options, __pyx_n_s_tags_ignore, __pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 131, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (likely(PyList_CheckExact(__pyx_t_1)) || PyTuple_CheckExact(__pyx_t_1)) {
    __pyx_t_3 = __pyx_t_1; __Pyx_INCREF(__pyx_t_3); __pyx_t_5 = 0;
    __pyx_t_8 = NULL;
  } else {
    __pyx_t_5 = -1; __pyx_t_3 = PyObject_GetIter(__pyx_t_1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 131, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_8 = Py_TYPE(__pyx_t_3)->tp_iternext; if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 131, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  for (;;) {
    if (likely(!__pyx_t_8)) {
      if (likely(PyList_CheckExact(__pyx_t_3))) {
        if (__pyx_t_5 >= PyList_GET_SIZE(__pyx_t_3)) break;
        #if CYTHON_COMPILING_IN_CPYTHON
        __pyx_t_1 = PyList_GET_ITEM(__pyx_t_3, __pyx_t_5); __Pyx_INCREF(__pyx_t_1); __pyx_t_5++; if (unlikely(0 < 0)) __PYX_ERR(0, 131, __pyx_L1_error)
        #else
        __pyx_t_1 = PySequence_ITEM(__pyx_t_3, __pyx_t_5); __pyx_t_5++; if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 131, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        #endif
      } else {
        if (__pyx_t_5 >= PyTuple_GET_SIZE(__pyx_t_3)) break;
        #if CYTHON_COMPILING_IN_CPYTHON
        __pyx_t_1 = PyTuple_GET_ITEM(__pyx_t_3, __pyx_t_5); __Pyx_INCREF(__pyx_t_1); __pyx_t_5++; if (unlikely(0 < 0)) __PYX_ERR(0, 131, __pyx_L1_error)
        #else
        __pyx_t_1 = PySequence_ITEM(__pyx_t_3, __pyx_t_5); __pyx_t_5++; if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 131, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        #endif
      }
    } else {
      __pyx_t_1 = __pyx_t_8(__pyx_t_3);
      if (unlikely(!__pyx_t_1)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 131, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_1);
    }
    __Pyx_XDECREF_SET(__pyx_v_tag_name, __pyx_t_1);
    __pyx_t_1 = 0;

    /* "gumbocy.pyx":132
 * 
 *         for tag_name in options.get("tags_ignore", []):
 *             tag = gumbocy.gumbo_tag_enum(tag_name)             # <<<<<<<<<<<<<<
 *             if tag != gumbocy.GUMBO_TAG_UNKNOWN:
 *                 self.tags_ignore.insert(<int> gumbocy.gumbo_tag_enum(tag_name))
 */
    __pyx_t_9 = __Pyx_PyObject_AsString(__pyx_v_tag_name); if (unlikely((!__pyx_t_9) && PyErr_Occurred())) __PYX_ERR(0, 132, __pyx_L1_error)
    __pyx_v_tag = gumbo_tag_enum(__pyx_t_9);

    /* "gumbocy.pyx":133
 *         for tag_name in options.get("tags_ignore", []):
 *             tag = gumbocy.gumbo_tag_enum(tag_name)
 *             if tag != gumbocy.GUMBO_TAG_UNKNOWN:             # <<<<<<<<<<<<<<
 *                 self.tags_ignore.insert(<int> gumbocy.gumbo_tag_enum(tag_name))
 * 
 */
    __pyx_t_2 = ((__pyx_v_tag != GUMBO_TAG_UNKNOWN) != 0);
    if (__pyx_t_2) {

      /* "gumbocy.pyx":134
 *             tag = gumbocy.gumbo_tag_enum(tag_name)
 *             if tag != gumbocy.GUMBO_TAG_UNKNOWN:
 *                 self.tags_ignore.insert(<int> gumbocy.gumbo_tag_enum(tag_name))             # <<<<<<<<<<<<<<
 * 
 *         for tag_name in options.get("tags_boilerplate", []):
 */
      __pyx_t_9 = __Pyx_PyObject_AsString(__pyx_v_tag_name); if (unlikely((!__pyx_t_9) && PyErr_Occurred())) __PYX_ERR(0, 134, __pyx_L1_error)
      __pyx_v_self->tags_ignore.insert(((int)gumbo_tag_enum(__pyx_t_9)));

      /* "gumbocy.pyx":133
 *         for tag_name in options.get("tags_ignore", []):
 *             tag = gumbocy.gumbo_tag_enum(tag_name)
 *             if tag != gumbocy.GUMBO_TAG_UNKNOWN:             # <<<<<<<<<<<<<<
 *                 self.tags_ignore.insert(<int> gumbocy.gumbo_tag_enum(tag_name))
 * 
 */
    }

    /* "gumbocy.pyx":131
 *         self.tags_ignore_head_only.insert(gumbocy.GUMBO_TAG_SPAN)
 * 
 *         for tag_name in options.get("tags_ignore", []):             # <<<<<<<<<<<<<<
 *             tag = gumbocy.gumbo_tag_enum(tag_name)
 *             if tag != gumbocy.GUMBO_TAG_UNKNOWN:
 */
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "gumbocy.pyx":136
 *                 self.tags_ignore.insert(<int> gumbocy.gumbo_tag_enum(tag_name))
 * 
 *         for tag_name in options.get("tags_boilerplate", []):             # <<<<<<<<<<<<<<
 *             tag = gumbocy.gumbo_tag_enum(tag_name)
 *             if tag != gumbocy.GUMBO_TAG_UNKNOWN:
 */
  if (unlikely(__pyx_v_options == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%s'", "get");
    __PYX_ERR(0, 136, __pyx_L1_error)
  }
  __pyx_t_3 = PyList_New(0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 136, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_1 = __Pyx_PyDict_GetItemDefault(__pyx_v_options, __pyx_n_s_tags_boilerplate, __pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 136, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (likely(PyList_CheckExact(__pyx_t_1)) || PyTuple_CheckExact(__pyx_t_1)) {
    __pyx_t_3 = __pyx_t_1; __Pyx_INCREF(__pyx_t_3); __pyx_t_5 = 0;
    __pyx_t_8 = NULL;
  } else {
    __pyx_t_5 = -1; __pyx_t_3 = PyObject_GetIter(__pyx_t_1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 136, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_8 = Py_TYPE(__pyx_t_3)->tp_iternext; if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 136, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  for (;;) {
    if (likely(!__pyx_t_8)) {
      if (likely(PyList_CheckExact(__pyx_t_3))) {
        if (__pyx_t_5 >= PyList_GET_SIZE(__pyx_t_3)) break;
        #if CYTHON_COMPILING_IN_CPYTHON
        __pyx_t_1 = PyList_GET_ITEM(__pyx_t_3, __pyx_t_5); __Pyx_INCREF(__pyx_t_1); __pyx_t_5++; if (unlikely(0 < 0)) __PYX_ERR(0, 136, __pyx_L1_error)
        #else
        __pyx_t_1 = PySequence_ITEM(__pyx_t_3, __pyx_t_5); __pyx_t_5++; if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 136, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        #endif
      } else {
        if (__pyx_t_5 >= PyTuple_GET_SIZE(__pyx_t_3)) break;
        #if CYTHON_COMPILING_IN_CPYTHON
        __pyx_t_1 = PyTuple_GET_ITEM(__pyx_t_3, __pyx_t_5); __Pyx_INCREF(__pyx_t_1); __pyx_t_5++; if (unlikely(0 < 0)) __PYX_ERR(0, 136, __pyx_L1_error)
        #else
        __pyx_t_1 = PySequence_ITEM(__pyx_t_3, __pyx_t_5); __pyx_t_5++; if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 136, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        #endif
      }
    } else {
      __pyx_t_1 = __pyx_t_8(__pyx_t_3);
      if (unlikely(!__pyx_t_1)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 136, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_1);
    }
    __Pyx_XDECREF_SET(__pyx_v_tag_name, __pyx_t_1);
    __pyx_t_1 = 0;

    /* "gumbocy.pyx":137
 * 
 *         for tag_name in options.get("tags_boilerplate", []):
 *             tag = gumbocy.gumbo_tag_enum(tag_name)             # <<<<<<<<<<<<<<
 *             if tag != gumbocy.GUMBO_TAG_UNKNOWN:
 *                 self.tags_boilerplate.insert(<int> gumbocy.gumbo_tag_enum(tag_name))
 */
    __pyx_t_9 = __Pyx_PyObject_AsString(__pyx_v_tag_name); if (unlikely((!__pyx_t_9) && PyErr_Occurred())) __PYX_ERR(0, 137, __pyx_L1_error)
    __pyx_v_tag = gumbo_tag_enum(__pyx_t_9);

    /* "gumbocy.pyx":138
 *         for tag_name in options.get("tags_boilerplate", []):
 *             tag = gumbocy.gumbo_tag_enum(tag_name)
 *             if tag != gumbocy.GUMBO_TAG_UNKNOWN:             # <<<<<<<<<<<<<<
 *                 self.tags_boilerplate.insert(<int> gumbocy.gumbo_tag_enum(tag_name))
 * 
 */
    __pyx_t_2 = ((__pyx_v_tag != GUMBO_TAG_UNKNOWN) != 0);
    if (__pyx_t_2) {

      /* "gumbocy.pyx":139
 *             tag = gumbocy.gumbo_tag_enum(tag_name)
 *             if tag != gumbocy.GUMBO_TAG_UNKNOWN:
 *                 self.tags_boilerplate.insert(<int> gumbocy.gumbo_tag_enum(tag_name))             # <<<<<<<<<<<<<<
 * 
 *         for tag_name in options.get("tags_boilerplate_bypass", []):
 */
      __pyx_t_9 = __Pyx_PyObject_AsString(__pyx_v_tag_name); if (unlikely((!__pyx_t_9) && PyErr_Occurred())) __PYX_ERR(0, 139, __pyx_L1_error)
      __pyx_v_self->tags_boilerplate.insert(((int)gumbo_tag_enum(__pyx_t_9)));

      /* "gumbocy.pyx":138
 *         for tag_name in options.get("tags_boilerplate", []):
 *             tag = gumbocy.gumbo_tag_enum(tag_name)
 *             if tag != gumbocy.GUMBO_TAG_UNKNOWN:             # <<<<<<<<<<<<<<
 *                 self.tags_boilerplate.insert(<int> gumbocy.gumbo_tag_enum(tag_name))
 * 
 */
    }

    /* "gumbocy.pyx":136
 *                 self.tags_ignore.insert(<int> gumbocy.gumbo_tag_enum(tag_name))
 * 
 *         for tag_name in options.get("tags_boilerplate", []):             # <<<<<<<<<<<<<<
 *             tag = gumbocy.gumbo_tag_enum(tag_name)
 *             if tag != gumbocy.GUMBO_TAG_UNKNOWN:
 */
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "gumbocy.pyx":141
 *                 self.tags_boilerplate.insert(<int> gumbocy.gumbo_tag_enum(tag_name))
 * 
 *         for tag_name in options.get("tags_boilerplate_bypass", []):             # <<<<<<<<<<<<<<
 *             tag = gumbocy.gumbo_tag_enum(tag_name)
 *             if tag != gumbocy.GUMBO_TAG_UNKNOWN:
 */
  if (unlikely(__pyx_v_options == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%s'", "get");
    __PYX_ERR(0, 141, __pyx_L1_error)
  }
  __pyx_t_3 = PyList_New(0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 141, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_1 = __Pyx_PyDict_GetItemDefault(__pyx_v_options, __pyx_n_s_tags_boilerplate_bypass, __pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 141, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (likely(PyList_CheckExact(__pyx_t_1)) || PyTuple_CheckExact(__pyx_t_1)) {
    __pyx_t_3 = __pyx_t_1; __Pyx_INCREF(__pyx_t_3); __pyx_t_5 = 0;
    __pyx_t_8 = NULL;
  } else {
    __pyx_t_5 = -1; __pyx_t_3 = PyObject_GetIter(__pyx_t_1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 141, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_8 = Py_TYPE(__pyx_t_3)->tp_iternext; if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 141, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  for (;;) {
    if (likely(!__pyx_t_8)) {
      if (likely(PyList_CheckExact(__pyx_t_3))) {
        if (__pyx_t_5 >= PyList_GET_SIZE(__pyx_t_3)) break;
        #if CYTHON_COMPILING_IN_CPYTHON
        __pyx_t_1 = PyList_GET_ITEM(__pyx_t_3, __pyx_t_5); __Pyx_INCREF(__pyx_t_1); __pyx_t_5++; if (unlikely(0 < 0)) __PYX_ERR(0, 141, __pyx_L1_error)
        #else
        __pyx_t_1 = PySequence_ITEM(__pyx_t_3, __pyx_t_5); __pyx_t_5++; if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 141, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        #endif
      } else {
        if (__pyx_t_5 >= PyTuple_GET_SIZE(__pyx_t_3)) break;
        #if CYTHON_COMPILING_IN_CPYTHON
        __pyx_t_1 = PyTuple_GET_ITEM(__pyx_t_3, __pyx_t_5); __Pyx_INCREF(__pyx_t_1); __pyx_t_5++; if (unlikely(0 < 0)) __PYX_ERR(0, 141, __pyx_L1_error)
        #else
        __pyx_t_1 = PySequence_ITEM(__pyx_t_3, __pyx_t_5); __pyx_t_5++; if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 141, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        #endif
      }
    } else {
      __pyx_t_1 = __pyx_t_8(__pyx_t_3);
      if (unlikely(!__pyx_t_1)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 141, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_1);
    }
    __Pyx_XDECREF_SET(__pyx_v_tag_name, __pyx_t_1);
    __pyx_t_1 = 0;

    /* "gumbocy.pyx":142
 * 
 *         for tag_name in options.get("tags_boilerplate_bypass", []):
 *             tag = gumbocy.gumbo_tag_enum(tag_name)             # <<<<<<<<<<<<<<
 *             if tag != gumbocy.GUMBO_TAG_UNKNOWN:
 *                 self.tags_boilerplate_bypass.insert(<int> gumbocy.gumbo_tag_enum(tag_name))
 */
    __pyx_t_9 = __Pyx_PyObject_AsString(__pyx_v_tag_name); if (unlikely((!__pyx_t_9) && PyErr_Occurred())) __PYX_ERR(0, 142, __pyx_L1_error)
    __pyx_v_tag = gumbo_tag_enum(__pyx_t_9);

    /* "gumbocy.pyx":143
 *         for tag_name in options.get("tags_boilerplate_bypass", []):
 *             tag = gumbocy.gumbo_tag_enum(tag_name)
 *             if tag != gumbocy.GUMBO_TAG_UNKNOWN:             # <<<<<<<<<<<<<<
 *                 self.tags_boilerplate_bypass.insert(<int> gumbocy.gumbo_tag_enum(tag_name))
 * 
 */
    __pyx_t_2 = ((__pyx_v_tag != GUMBO_TAG_UNKNOWN) != 0);
    if (__pyx_t_2) {

      /* "gumbocy.pyx":144
 *             tag = gumbocy.gumbo_tag_enum(tag_name)
 *             if tag != gumbocy.GUMBO_TAG_UNKNOWN:
 *                 self.tags_boilerplate_bypass.insert(<int> gumbocy.gumbo_tag_enum(tag_name))             # <<<<<<<<<<<<<<
 * 
 *         for tag_name in options.get("tags_separators", []):
 */
      __pyx_t_9 = __Pyx_PyObject_AsString(__pyx_v_tag_name); if (unlikely((!__pyx_t_9) && PyErr_Occurred())) __PYX_ERR(0, 144, __pyx_L1_error)
      __pyx_v_self->tags_boilerplate_bypass.insert(((int)gumbo_tag_enum(__pyx_t_9)));

      /* "gumbocy.pyx":143
 *         for tag_name in options.get("tags_boilerplate_bypass", []):
 *             tag = gumbocy.gumbo_tag_enum(tag_name)
 *             if tag != gumbocy.GUMBO_TAG_UNKNOWN:             # <<<<<<<<<<<<<<
 *                 self.tags_boilerplate_bypass.insert(<int> gumbocy.gumbo_tag_enum(tag_name))
 * 
 */
    }

    /* "gumbocy.pyx":141
 *                 self.tags_boilerplate.insert(<int> gumbocy.gumbo_tag_enum(tag_name))
 * 
 *         for tag_name in options.get("tags_boilerplate_bypass", []):             # <<<<<<<<<<<<<<
 *             tag = gumbocy.gumbo_tag_enum(tag_name)
 *             if tag != gumbocy.GUMBO_TAG_UNKNOWN:
 */
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "gumbocy.pyx":146
 *                 self.tags_boilerplate_bypass.insert(<int> gumbocy.gumbo_tag_enum(tag_name))
 * 
 *         for tag_name in options.get("tags_separators", []):             # <<<<<<<<<<<<<<
 *             tag = gumbocy.gumbo_tag_enum(tag_name)
 *             if tag != gumbocy.GUMBO_TAG_UNKNOWN:
 */
  if (unlikely(__pyx_v_options == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%s'", "get");
    __PYX_ERR(0, 146, __pyx_L1_error)
  }
  __pyx_t_3 = PyList_New(0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 146, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_1 = __Pyx_PyDict_GetItemDefault(__pyx_v_options, __pyx_n_s_tags_separators, __pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 146, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (likely(PyList_CheckExact(__pyx_t_1)) || PyTuple_CheckExact(__pyx_t_1)) {
    __pyx_t_3 = __pyx_t_1; __Pyx_INCREF(__pyx_t_3); __pyx_t_5 = 0;
    __pyx_t_8 = NULL;
  } else {
    __pyx_t_5 = -1; __pyx_t_3 = PyObject_GetIter(__pyx_t_1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 146, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_8 = Py_TYPE(__pyx_t_3)->tp_iternext; if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 146, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  for (;;) {
    if (likely(!__pyx_t_8)) {
      if (likely(PyList_CheckExact(__pyx_t_3))) {
        if (__pyx_t_5 >= PyList_GET_SIZE(__pyx_t_3)) break;
        #if CYTHON_COMPILING_IN_CPYTHON
        __pyx_t_1 = PyList_GET_ITEM(__pyx_t_3, __pyx_t_5); __Pyx_INCREF(__pyx_t_1); __pyx_t_5++; if (unlikely(0 < 0)) __PYX_ERR(0, 146, __pyx_L1_error)
        #else
        __pyx_t_1 = PySequence_ITEM(__pyx_t_3, __pyx_t_5); __pyx_t_5++; if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 146, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        #endif
      } else {
        if (__pyx_t_5 >= PyTuple_GET_SIZE(__pyx_t_3)) break;
        #if CYTHON_COMPILING_IN_CPYTHON
        __pyx_t_1 = PyTuple_GET_ITEM(__pyx_t_3, __pyx_t_5); __Pyx_INCREF(__pyx_t_1); __pyx_t_5++; if (unlikely(0 < 0)) __PYX_ERR(0, 146, __pyx_L1_error)
        #else
        __pyx_t_1 = PySequence_ITEM(__pyx_t_3, __pyx_t_5); __pyx_t_5++; if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 146, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        #endif
      }
    } else {
      __pyx_t_1 = __pyx_t_8(__pyx_t_3);
      if (unlikely(!__pyx_t_1)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 146, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_1);
    }
    __Pyx_XDECREF_SET(__pyx_v_tag_name, __pyx_t_1);
    __pyx_t_1 = 0;

    /* "gumbocy.pyx":147
 * 
 *         for tag_name in options.get("tags_separators", []):
 *             tag = gumbocy.gumbo_tag_enum(tag_name)             # <<<<<<<<<<<<<<
 *             if tag != gumbocy.GUMBO_TAG_UNKNOWN:
 *                 self.tags_separators.insert(<int> gumbocy.gumbo_tag_enum(tag_name))
 */
    __pyx_t_9 = __Pyx_PyObject_AsString(__pyx_v_tag_name); if (unlikely((!__pyx_t_9) && PyErr_Occurred())) __PYX_ERR(0, 147, __pyx_L1_error)
    __pyx_v_tag = gumbo_tag_enum(__pyx_t_9);

    /* "gumbocy.pyx":148
 *         for tag_name in options.get("tags_separators", []):
 *             tag = gumbocy.gumbo_tag_enum(tag_name)
 *             if tag != gumbocy.GUMBO_TAG_UNKNOWN:             # <<<<<<<<<<<<<<
 *                 self.tags_separators.insert(<int> gumbocy.gumbo_tag_enum(tag_name))
 * 
 */
    __pyx_t_2 = ((__pyx_v_tag != GUMBO_TAG_UNKNOWN) != 0);
    if (__pyx_t_2) {

      /* "gumbocy.pyx":149
 *             tag = gumbocy.gumbo_tag_enum(tag_name)
 *             if tag != gumbocy.GUMBO_TAG_UNKNOWN:
 *                 self.tags_separators.insert(<int> gumbocy.gumbo_tag_enum(tag_name))             # <<<<<<<<<<<<<<
 * 
 *         self.tags_separators.insert(gumbocy.GUMBO_TAG_BODY)
 */
      __pyx_t_9 = __Pyx_PyObject_AsString(__pyx_v_tag_name); if (unlikely((!__pyx_t_9) && PyErr_Occurred())) __PYX_ERR(0, 149, __pyx_L1_error)
      __pyx_v_self->tags_separators.insert(((int)gumbo_tag_enum(__pyx_t_9)));

      /* "gumbocy.pyx":148
 *         for tag_name in options.get("tags_separators", []):
 *             tag = gumbocy.gumbo_tag_enum(tag_name)
 *             if tag != gumbocy.GUMBO_TAG_UNKNOWN:             # <<<<<<<<<<<<<<
 *                 self.tags_separators.insert(<int> gumbocy.gumbo_tag_enum(tag_name))
 * 
 */
    }

    /* "gumbocy.pyx":146
 *                 self.tags_boilerplate_bypass.insert(<int> gumbocy.gumbo_tag_enum(tag_name))
 * 
 *         for tag_name in options.get("tags_separators", []):             # <<<<<<<<<<<<<<
 *             tag = gumbocy.gumbo_tag_enum(tag_name)
 *             if tag != gumbocy.GUMBO_TAG_UNKNOWN:
 */
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "gumbocy.pyx":151
 *                 self.tags_separators.insert(<int> gumbocy.gumbo_tag_enum(tag_name))
 * 
 *         self.tags_separators.insert(gumbocy.GUMBO_TAG_BODY)             # <<<<<<<<<<<<<<
 * 
 *     cdef bint guess_node_hidden(self, gumbocy.GumboNode* node, dict attrs):
 */
  __pyx_v_self->tags_separators.insert(GUMBO_TAG_BODY);

  /* "gumbocy.pyx":73
 *     cdef list nodes
 * 
 *     def __cinit__(self, dict options=None):             # <<<<<<<<<<<<<<
 * 
 *         options = options or {}
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("gumbocy.HTMLParser.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_tag_name);
  __Pyx_XDECREF(__pyx_v_options);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "gumbocy.pyx":153
 *         self.tags_separators.insert(gumbocy.GUMBO_TAG_BODY)
 * 
 *     cdef bint guess_node_hidden(self, gumbocy.GumboNode* node, dict attrs):             # <<<<<<<<<<<<<<
 *         """ Rough guess to check if the element is explicitly hidden.
 * 
 */

static int __pyx_f_7gumbocy_10HTMLParser_guess_node_hidden(struct __pyx_obj_7gumbocy_HTMLParser *__pyx_v_self, CYTHON_UNUSED GumboNode *__pyx_v_node, PyObject *__pyx_v_attrs) {
  PyObject *__pyx_v_k = NULL;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  Py_ssize_t __pyx_t_7;
  PyObject *(*__pyx_t_8)(PyObject *);
  char *__pyx_t_9;
  __Pyx_RefNannySetupContext("guess_node_hidden", 0);

  /* "gumbocy.pyx":159
 *         """
 * 
 *         if not self.has_attributes_whitelist:             # <<<<<<<<<<<<<<
 *             return False
 * 
 */
  __pyx_t_1 = ((!(__pyx_v_self->has_attributes_whitelist != 0)) != 0);
  if (__pyx_t_1) {

    /* "gumbocy.pyx":160
 * 
 *         if not self.has_attributes_whitelist:
 *             return False             # <<<<<<<<<<<<<<
 * 
 *         # From the HTML5 spec
 */
    __pyx_r = 0;
    goto __pyx_L0;

    /* "gumbocy.pyx":159
 *         """
 * 
 *         if not self.has_attributes_whitelist:             # <<<<<<<<<<<<<<
 *             return False
 * 
 */
  }

  /* "gumbocy.pyx":163
 * 
 *         # From the HTML5 spec
 *         if "hidden" in attrs:             # <<<<<<<<<<<<<<
 *             return True
 * 
 */
  if (unlikely(__pyx_v_attrs == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
    __PYX_ERR(0, 163, __pyx_L1_error)
  }
  __pyx_t_1 = (__Pyx_PyDict_ContainsTF(__pyx_n_s_hidden, __pyx_v_attrs, Py_EQ)); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(0, 163, __pyx_L1_error)
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "gumbocy.pyx":164
 *         # From the HTML5 spec
 *         if "hidden" in attrs:
 *             return True             # <<<<<<<<<<<<<<
 * 
 *         if attrs.get("aria-hidden") == "true":
 */
    __pyx_r = 1;
    goto __pyx_L0;

    /* "gumbocy.pyx":163
 * 
 *         # From the HTML5 spec
 *         if "hidden" in attrs:             # <<<<<<<<<<<<<<
 *             return True
 * 
 */
  }

  /* "gumbocy.pyx":166
 *             return True
 * 
 *         if attrs.get("aria-hidden") == "true":             # <<<<<<<<<<<<<<
 *             return True
 * 
 */
  if (unlikely(__pyx_v_attrs == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%s'", "get");
    __PYX_ERR(0, 166, __pyx_L1_error)
  }
  __pyx_t_3 = __Pyx_PyDict_GetItemDefault(__pyx_v_attrs, __pyx_kp_s_aria_hidden, Py_None); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 166, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = (__Pyx_PyString_Equals(__pyx_t_3, __pyx_n_s_true, Py_EQ)); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 166, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (__pyx_t_2) {

    /* "gumbocy.pyx":167
 * 
 *         if attrs.get("aria-hidden") == "true":
 *             return True             # <<<<<<<<<<<<<<
 * 
 *         if self.has_ids_hidden:
 */
    __pyx_r = 1;
    goto __pyx_L0;

    /* "gumbocy.pyx":166
 *             return True
 * 
 *         if attrs.get("aria-hidden") == "true":             # <<<<<<<<<<<<<<
 *             return True
 * 
 */
  }

  /* "gumbocy.pyx":169
 *             return True
 * 
 *         if self.has_ids_hidden:             # <<<<<<<<<<<<<<
 *             if attrs.get("id") and attrs["id"].lower() in self.ids_hidden:
 *                 return True
 */
  __pyx_t_2 = (__pyx_v_self->has_ids_hidden != 0);
  if (__pyx_t_2) {

    /* "gumbocy.pyx":170
 * 
 *         if self.has_ids_hidden:
 *             if attrs.get("id") and attrs["id"].lower() in self.ids_hidden:             # <<<<<<<<<<<<<<
 *                 return True
 * 
 */
    if (unlikely(__pyx_v_attrs == Py_None)) {
      PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%s'", "get");
      __PYX_ERR(0, 170, __pyx_L1_error)
    }
    __pyx_t_3 = __Pyx_PyDict_GetItemDefault(__pyx_v_attrs, __pyx_n_s_id, Py_None); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 170, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(0, 170, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (__pyx_t_1) {
    } else {
      __pyx_t_2 = __pyx_t_1;
      goto __pyx_L8_bool_binop_done;
    }
    if (unlikely(__pyx_v_attrs == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(0, 170, __pyx_L1_error)
    }
    __pyx_t_4 = __Pyx_PyDict_GetItem(__pyx_v_attrs, __pyx_n_s_id); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 170, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_lower); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 170, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = NULL;
    if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_5))) {
      __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_5);
      if (likely(__pyx_t_4)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
        __Pyx_INCREF(__pyx_t_4);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_5, function);
      }
    }
    if (__pyx_t_4) {
      __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_t_4); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 170, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    } else {
      __pyx_t_3 = __Pyx_PyObject_CallNoArg(__pyx_t_5); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 170, __pyx_L1_error)
    }
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_1 = (__Pyx_PySequence_ContainsTF(__pyx_t_3, __pyx_v_self->ids_hidden, Py_EQ)); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(0, 170, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_6 = (__pyx_t_1 != 0);
    __pyx_t_2 = __pyx_t_6;
    __pyx_L8_bool_binop_done:;
    if (__pyx_t_2) {

      /* "gumbocy.pyx":171
 *         if self.has_ids_hidden:
 *             if attrs.get("id") and attrs["id"].lower() in self.ids_hidden:
 *                 return True             # <<<<<<<<<<<<<<
 * 
 *         if self.has_classes_hidden:
 */
      __pyx_r = 1;
      goto __pyx_L0;

      /* "gumbocy.pyx":170
 * 
 *         if self.has_ids_hidden:
 *             if attrs.get("id") and attrs["id"].lower() in self.ids_hidden:             # <<<<<<<<<<<<<<
 *                 return True
 * 
 */
    }

    /* "gumbocy.pyx":169
 *             return True
 * 
 *         if self.has_ids_hidden:             # <<<<<<<<<<<<<<
 *             if attrs.get("id") and attrs["id"].lower() in self.ids_hidden:
 *                 return True
 */
  }

  /* "gumbocy.pyx":173
 *                 return True
 * 
 *         if self.has_classes_hidden:             # <<<<<<<<<<<<<<
 *             if attrs.get("class"):
 *                 for k in attrs.get("class"):
 */
  __pyx_t_2 = (__pyx_v_self->has_classes_hidden != 0);
  if (__pyx_t_2) {

    /* "gumbocy.pyx":174
 * 
 *         if self.has_classes_hidden:
 *             if attrs.get("class"):             # <<<<<<<<<<<<<<
 *                 for k in attrs.get("class"):
 *                     if k in self.classes_hidden:
 */
    if (unlikely(__pyx_v_attrs == Py_None)) {
      PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%s'", "get");
      __PYX_ERR(0, 174, __pyx_L1_error)
    }
    __pyx_t_3 = __Pyx_PyDict_GetItemDefault(__pyx_v_attrs, __pyx_n_s_class, Py_None); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 174, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 174, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (__pyx_t_2) {

      /* "gumbocy.pyx":175
 *         if self.has_classes_hidden:
 *             if attrs.get("class"):
 *                 for k in attrs.get("class"):             # <<<<<<<<<<<<<<
 *                     if k in self.classes_hidden:
 *                         return True
 */
      if (unlikely(__pyx_v_attrs == Py_None)) {
        PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%s'", "get");
        __PYX_ERR(0, 175, __pyx_L1_error)
      }
      __pyx_t_3 = __Pyx_PyDict_GetItemDefault(__pyx_v_attrs, __pyx_n_s_class, Py_None); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 175, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      if (likely(PyList_CheckExact(__pyx_t_3)) || PyTuple_CheckExact(__pyx_t_3)) {
        __pyx_t_5 = __pyx_t_3; __Pyx_INCREF(__pyx_t_5); __pyx_t_7 = 0;
        __pyx_t_8 = NULL;
      } else {
        __pyx_t_7 = -1; __pyx_t_5 = PyObject_GetIter(__pyx_t_3); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 175, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        __pyx_t_8 = Py_TYPE(__pyx_t_5)->tp_iternext; if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 175, __pyx_L1_error)
      }
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      for (;;) {
        if (likely(!__pyx_t_8)) {
          if (likely(PyList_CheckExact(__pyx_t_5))) {
            if (__pyx_t_7 >= PyList_GET_SIZE(__pyx_t_5)) break;
            #if CYTHON_COMPILING_IN_CPYTHON
            __pyx_t_3 = PyList_GET_ITEM(__pyx_t_5, __pyx_t_7); __Pyx_INCREF(__pyx_t_3); __pyx_t_7++; if (unlikely(0 < 0)) __PYX_ERR(0, 175, __pyx_L1_error)
            #else
            __pyx_t_3 = PySequence_ITEM(__pyx_t_5, __pyx_t_7); __pyx_t_7++; if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 175, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_3);
            #endif
          } else {
            if (__pyx_t_7 >= PyTuple_GET_SIZE(__pyx_t_5)) break;
            #if CYTHON_COMPILING_IN_CPYTHON
            __pyx_t_3 = PyTuple_GET_ITEM(__pyx_t_5, __pyx_t_7); __Pyx_INCREF(__pyx_t_3); __pyx_t_7++; if (unlikely(0 < 0)) __PYX_ERR(0, 175, __pyx_L1_error)
            #else
            __pyx_t_3 = PySequence_ITEM(__pyx_t_5, __pyx_t_7); __pyx_t_7++; if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 175, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_3);
            #endif
          }
        } else {
          __pyx_t_3 = __pyx_t_8(__pyx_t_5);
          if (unlikely(!__pyx_t_3)) {
            PyObject* exc_type = PyErr_Occurred();
            if (exc_type) {
              if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
              else __PYX_ERR(0, 175, __pyx_L1_error)
            }
            break;
          }
          __Pyx_GOTREF(__pyx_t_3);
        }
        __Pyx_XDECREF_SET(__pyx_v_k, __pyx_t_3);
        __pyx_t_3 = 0;

        /* "gumbocy.pyx":176
 *             if attrs.get("class"):
 *                 for k in attrs.get("class"):
 *                     if k in self.classes_hidden:             # <<<<<<<<<<<<<<
 *                         return True
 * 
 */
        __pyx_t_2 = (__Pyx_PySequence_ContainsTF(__pyx_v_k, __pyx_v_self->classes_hidden, Py_EQ)); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 176, __pyx_L1_error)
        __pyx_t_6 = (__pyx_t_2 != 0);
        if (__pyx_t_6) {

          /* "gumbocy.pyx":177
 *                 for k in attrs.get("class"):
 *                     if k in self.classes_hidden:
 *                         return True             # <<<<<<<<<<<<<<
 * 
 *         if attrs.get("style"):
 */
          __pyx_r = 1;
          __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
          goto __pyx_L0;

          /* "gumbocy.pyx":176
 *             if attrs.get("class"):
 *                 for k in attrs.get("class"):
 *                     if k in self.classes_hidden:             # <<<<<<<<<<<<<<
 *                         return True
 * 
 */
        }

        /* "gumbocy.pyx":175
 *         if self.has_classes_hidden:
 *             if attrs.get("class"):
 *                 for k in attrs.get("class"):             # <<<<<<<<<<<<<<
 *                     if k in self.classes_hidden:
 *                         return True
 */
      }
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

      /* "gumbocy.pyx":174
 * 
 *         if self.has_classes_hidden:
 *             if attrs.get("class"):             # <<<<<<<<<<<<<<
 *                 for k in attrs.get("class"):
 *                     if k in self.classes_hidden:
 */
    }

    /* "gumbocy.pyx":173
 *                 return True
 * 
 *         if self.has_classes_hidden:             # <<<<<<<<<<<<<<
 *             if attrs.get("class"):
 *                 for k in attrs.get("class"):
 */
  }

  /* "gumbocy.pyx":179
 *                         return True
 * 
 *         if attrs.get("style"):             # <<<<<<<<<<<<<<
 *             if re2_search(attrs["style"], deref(_RE2_SEARCH_STYLE_HIDDEN)):
 *                 return True
 */
  if (unlikely(__pyx_v_attrs == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%s'", "get");
    __PYX_ERR(0, 179, __pyx_L1_error)
  }
  __pyx_t_5 = __Pyx_PyDict_GetItemDefault(__pyx_v_attrs, __pyx_n_s_style, Py_None); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 179, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_5); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(0, 179, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  if (__pyx_t_6) {

    /* "gumbocy.pyx":180
 * 
 *         if attrs.get("style"):
 *             if re2_search(attrs["style"], deref(_RE2_SEARCH_STYLE_HIDDEN)):             # <<<<<<<<<<<<<<
 *                 return True
 * 
 */
    if (unlikely(__pyx_v_attrs == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(0, 180, __pyx_L1_error)
    }
    __pyx_t_5 = __Pyx_PyDict_GetItem(__pyx_v_attrs, __pyx_n_s_style); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 180, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_9 = __Pyx_PyObject_AsString(__pyx_t_5); if (unlikely((!__pyx_t_9) && PyErr_Occurred())) __PYX_ERR(0, 180, __pyx_L1_error)
    __pyx_t_6 = (__pyx_f_7gumbocy_re2_search(__pyx_t_9, (*__pyx_v_7gumbocy__RE2_SEARCH_STYLE_HIDDEN)) != 0);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (__pyx_t_6) {

      /* "gumbocy.pyx":181
 *         if attrs.get("style"):
 *             if re2_search(attrs["style"], deref(_RE2_SEARCH_STYLE_HIDDEN)):
 *                 return True             # <<<<<<<<<<<<<<
 * 
 *         return False
 */
      __pyx_r = 1;
      goto __pyx_L0;

      /* "gumbocy.pyx":180
 * 
 *         if attrs.get("style"):
 *             if re2_search(attrs["style"], deref(_RE2_SEARCH_STYLE_HIDDEN)):             # <<<<<<<<<<<<<<
 *                 return True
 * 
 */
    }

    /* "gumbocy.pyx":179
 *                         return True
 * 
 *         if attrs.get("style"):             # <<<<<<<<<<<<<<
 *             if re2_search(attrs["style"], deref(_RE2_SEARCH_STYLE_HIDDEN)):
 *                 return True
 */
  }

  /* "gumbocy.pyx":183
 *                 return True
 * 
 *         return False             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = 0;
  goto __pyx_L0;

  /* "gumbocy.pyx":153
 *         self.tags_separators.insert(gumbocy.GUMBO_TAG_BODY)
 * 
 *     cdef bint guess_node_hidden(self, gumbocy.GumboNode* node, dict attrs):             # <<<<<<<<<<<<<<
 *         """ Rough guess to check if the element is explicitly hidden.
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_WriteUnraisable("gumbocy.HTMLParser.guess_node_hidden", __pyx_clineno, __pyx_lineno, __pyx_filename, 0, 0);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_k);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "gumbocy.pyx":186
 * 
 * 
 *     cdef bint guess_node_boilerplate(self, gumbocy.GumboNode* node, dict attrs):             # <<<<<<<<<<<<<<
 *         """ Rough guess to check if the element is boilerplate """
 * 
 */

static int __pyx_f_7gumbocy_10HTMLParser_guess_node_boilerplate(struct __pyx_obj_7gumbocy_HTMLParser *__pyx_v_self, GumboNode *__pyx_v_node, PyObject *__pyx_v_attrs) {
  PyObject *__pyx_v_k = NULL;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  Py_ssize_t __pyx_t_5;
  PyObject *(*__pyx_t_6)(PyObject *);
  PyObject *__pyx_t_7 = NULL;
  int __pyx_t_8;
  __Pyx_RefNannySetupContext("guess_node_boilerplate", 0);

  /* "gumbocy.pyx":189
 *         """ Rough guess to check if the element is boilerplate """
 * 
 *         if self.tags_boilerplate.count(<int> node.v.element.tag):             # <<<<<<<<<<<<<<
 *             return True
 * 
 */
  __pyx_t_1 = (__pyx_v_self->tags_boilerplate.count(((int)__pyx_v_node->v.element.tag)) != 0);
  if (__pyx_t_1) {

    /* "gumbocy.pyx":190
 * 
 *         if self.tags_boilerplate.count(<int> node.v.element.tag):
 *             return True             # <<<<<<<<<<<<<<
 * 
 *         # http://html5doctor.com/understanding-aside/
 */
    __pyx_r = 1;
    goto __pyx_L0;

    /* "gumbocy.pyx":189
 *         """ Rough guess to check if the element is boilerplate """
 * 
 *         if self.tags_boilerplate.count(<int> node.v.element.tag):             # <<<<<<<<<<<<<<
 *             return True
 * 
 */
  }

  /* "gumbocy.pyx":193
 * 
 *         # http://html5doctor.com/understanding-aside/
 *         if node.v.element.tag == gumbocy.GUMBO_TAG_ASIDE:             # <<<<<<<<<<<<<<
 *             if "article" not in self.current_stack:
 *                 return True
 */
  __pyx_t_1 = ((__pyx_v_node->v.element.tag == GUMBO_TAG_ASIDE) != 0);
  if (__pyx_t_1) {

    /* "gumbocy.pyx":194
 *         # http://html5doctor.com/understanding-aside/
 *         if node.v.element.tag == gumbocy.GUMBO_TAG_ASIDE:
 *             if "article" not in self.current_stack:             # <<<<<<<<<<<<<<
 *                 return True
 * 
 */
    __pyx_t_1 = (__Pyx_PySequence_ContainsTF(__pyx_n_s_article, __pyx_v_self->current_stack, Py_NE)); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(0, 194, __pyx_L1_error)
    __pyx_t_2 = (__pyx_t_1 != 0);
    if (__pyx_t_2) {

      /* "gumbocy.pyx":195
 *         if node.v.element.tag == gumbocy.GUMBO_TAG_ASIDE:
 *             if "article" not in self.current_stack:
 *                 return True             # <<<<<<<<<<<<<<
 * 
 *         if not self.has_attributes_whitelist:
 */
      __pyx_r = 1;
      goto __pyx_L0;

      /* "gumbocy.pyx":194
 *         # http://html5doctor.com/understanding-aside/
 *         if node.v.element.tag == gumbocy.GUMBO_TAG_ASIDE:
 *             if "article" not in self.current_stack:             # <<<<<<<<<<<<<<
 *                 return True
 * 
 */
    }

    /* "gumbocy.pyx":193
 * 
 *         # http://html5doctor.com/understanding-aside/
 *         if node.v.element.tag == gumbocy.GUMBO_TAG_ASIDE:             # <<<<<<<<<<<<<<
 *             if "article" not in self.current_stack:
 *                 return True
 */
  }

  /* "gumbocy.pyx":197
 *                 return True
 * 
 *         if not self.has_attributes_whitelist:             # <<<<<<<<<<<<<<
 *             return False
 * 
 */
  __pyx_t_2 = ((!(__pyx_v_self->has_attributes_whitelist != 0)) != 0);
  if (__pyx_t_2) {

    /* "gumbocy.pyx":198
 * 
 *         if not self.has_attributes_whitelist:
 *             return False             # <<<<<<<<<<<<<<
 * 
 *         if not attrs:
 */
    __pyx_r = 0;
    goto __pyx_L0;

    /* "gumbocy.pyx":197
 *                 return True
 * 
 *         if not self.has_attributes_whitelist:             # <<<<<<<<<<<<<<
 *             return False
 * 
 */
  }

  /* "gumbocy.pyx":200
 *             return False
 * 
 *         if not attrs:             # <<<<<<<<<<<<<<
 *             return False
 * 
 */
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_v_attrs); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 200, __pyx_L1_error)
  __pyx_t_1 = ((!__pyx_t_2) != 0);
  if (__pyx_t_1) {

    /* "gumbocy.pyx":201
 * 
 *         if not attrs:
 *             return False             # <<<<<<<<<<<<<<
 * 
 *         if self.has_classes_boilerplate:
 */
    __pyx_r = 0;
    goto __pyx_L0;

    /* "gumbocy.pyx":200
 *             return False
 * 
 *         if not attrs:             # <<<<<<<<<<<<<<
 *             return False
 * 
 */
  }

  /* "gumbocy.pyx":203
 *             return False
 * 
 *         if self.has_classes_boilerplate:             # <<<<<<<<<<<<<<
 *             if attrs.get("class"):
 *                 for k in attrs.get("class"):
 */
  __pyx_t_1 = (__pyx_v_self->has_classes_boilerplate != 0);
  if (__pyx_t_1) {

    /* "gumbocy.pyx":204
 * 
 *         if self.has_classes_boilerplate:
 *             if attrs.get("class"):             # <<<<<<<<<<<<<<
 *                 for k in attrs.get("class"):
 *                     if k in self.classes_boilerplate:
 */
    if (unlikely(__pyx_v_attrs == Py_None)) {
      PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%s'", "get");
      __PYX_ERR(0, 204, __pyx_L1_error)
    }
    __pyx_t_3 = __Pyx_PyDict_GetItemDefault(__pyx_v_attrs, __pyx_n_s_class, Py_None); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 204, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(0, 204, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (__pyx_t_1) {

      /* "gumbocy.pyx":205
 *         if self.has_classes_boilerplate:
 *             if attrs.get("class"):
 *                 for k in attrs.get("class"):             # <<<<<<<<<<<<<<
 *                     if k in self.classes_boilerplate:
 *                         return True
 */
      if (unlikely(__pyx_v_attrs == Py_None)) {
        PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%s'", "get");
        __PYX_ERR(0, 205, __pyx_L1_error)
      }
      __pyx_t_3 = __Pyx_PyDict_GetItemDefault(__pyx_v_attrs, __pyx_n_s_class, Py_None); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 205, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      if (likely(PyList_CheckExact(__pyx_t_3)) || PyTuple_CheckExact(__pyx_t_3)) {
        __pyx_t_4 = __pyx_t_3; __Pyx_INCREF(__pyx_t_4); __pyx_t_5 = 0;
        __pyx_t_6 = NULL;
      } else {
        __pyx_t_5 = -1; __pyx_t_4 = PyObject_GetIter(__pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 205, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __pyx_t_6 = Py_TYPE(__pyx_t_4)->tp_iternext; if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 205, __pyx_L1_error)
      }
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      for (;;) {
        if (likely(!__pyx_t_6)) {
          if (likely(PyList_CheckExact(__pyx_t_4))) {
            if (__pyx_t_5 >= PyList_GET_SIZE(__pyx_t_4)) break;
            #if CYTHON_COMPILING_IN_CPYTHON
            __pyx_t_3 = PyList_GET_ITEM(__pyx_t_4, __pyx_t_5); __Pyx_INCREF(__pyx_t_3); __pyx_t_5++; if (unlikely(0 < 0)) __PYX_ERR(0, 205, __pyx_L1_error)
            #else
            __pyx_t_3 = PySequence_ITEM(__pyx_t_4, __pyx_t_5); __pyx_t_5++; if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 205, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_3);
            #endif
          } else {
            if (__pyx_t_5 >= PyTuple_GET_SIZE(__pyx_t_4)) break;
            #if CYTHON_COMPILING_IN_CPYTHON
            __pyx_t_3 = PyTuple_GET_ITEM(__pyx_t_4, __pyx_t_5); __Pyx_INCREF(__pyx_t_3); __pyx_t_5++; if (unlikely(0 < 0)) __PYX_ERR(0, 205, __pyx_L1_error)
            #else
            __pyx_t_3 = PySequence_ITEM(__pyx_t_4, __pyx_t_5); __pyx_t_5++; if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 205, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_3);
            #endif
          }
        } else {
          __pyx_t_3 = __pyx_t_6(__pyx_t_4);
          if (unlikely(!__pyx_t_3)) {
            PyObject* exc_type = PyErr_Occurred();
            if (exc_type) {
              if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
              else __PYX_ERR(0, 205, __pyx_L1_error)
            }
            break;
          }
          __Pyx_GOTREF(__pyx_t_3);
        }
        __Pyx_XDECREF_SET(__pyx_v_k, __pyx_t_3);
        __pyx_t_3 = 0;

        /* "gumbocy.pyx":206
 *             if attrs.get("class"):
 *                 for k in attrs.get("class"):
 *                     if k in self.classes_boilerplate:             # <<<<<<<<<<<<<<
 *                         return True
 * 
 */
        __pyx_t_1 = (__Pyx_PySequence_ContainsTF(__pyx_v_k, __pyx_v_self->classes_boilerplate, Py_EQ)); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(0, 206, __pyx_L1_error)
        __pyx_t_2 = (__pyx_t_1 != 0);
        if (__pyx_t_2) {

          /* "gumbocy.pyx":207
 *                 for k in attrs.get("class"):
 *                     if k in self.classes_boilerplate:
 *                         return True             # <<<<<<<<<<<<<<
 * 
 *         if self.has_ids_boilerplate:
 */
          __pyx_r = 1;
          __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
          goto __pyx_L0;

          /* "gumbocy.pyx":206
 *             if attrs.get("class"):
 *                 for k in attrs.get("class"):
 *                     if k in self.classes_boilerplate:             # <<<<<<<<<<<<<<
 *                         return True
 * 
 */
        }

        /* "gumbocy.pyx":205
 *         if self.has_classes_boilerplate:
 *             if attrs.get("class"):
 *                 for k in attrs.get("class"):             # <<<<<<<<<<<<<<
 *                     if k in self.classes_boilerplate:
 *                         return True
 */
      }
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

      /* "gumbocy.pyx":204
 * 
 *         if self.has_classes_boilerplate:
 *             if attrs.get("class"):             # <<<<<<<<<<<<<<
 *                 for k in attrs.get("class"):
 *                     if k in self.classes_boilerplate:
 */
    }

    /* "gumbocy.pyx":203
 *             return False
 * 
 *         if self.has_classes_boilerplate:             # <<<<<<<<<<<<<<
 *             if attrs.get("class"):
 *                 for k in attrs.get("class"):
 */
  }

  /* "gumbocy.pyx":209
 *                         return True
 * 
 *         if self.has_ids_boilerplate:             # <<<<<<<<<<<<<<
 *             if attrs.get("id") and attrs["id"].lower() in self.ids_boilerplate:
 *                 return True
 */
  __pyx_t_2 = (__pyx_v_self->has_ids_boilerplate != 0);
  if (__pyx_t_2) {

    /* "gumbocy.pyx":210
 * 
 *         if self.has_ids_boilerplate:
 *             if attrs.get("id") and attrs["id"].lower() in self.ids_boilerplate:             # <<<<<<<<<<<<<<
 *                 return True
 * 
 */
    if (unlikely(__pyx_v_attrs == Py_None)) {
      PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%s'", "get");
      __PYX_ERR(0, 210, __pyx_L1_error)
    }
    __pyx_t_4 = __Pyx_PyDict_GetItemDefault(__pyx_v_attrs, __pyx_n_s_id, Py_None); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 210, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(0, 210, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (__pyx_t_1) {
    } else {
      __pyx_t_2 = __pyx_t_1;
      goto __pyx_L15_bool_binop_done;
    }
    if (unlikely(__pyx_v_attrs == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(0, 210, __pyx_L1_error)
    }
    __pyx_t_3 = __Pyx_PyDict_GetItem(__pyx_v_attrs, __pyx_n_s_id); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 210, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_lower); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 210, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = NULL;
    if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_7))) {
      __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_7);
      if (likely(__pyx_t_3)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
        __Pyx_INCREF(__pyx_t_3);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_7, function);
      }
    }
    if (__pyx_t_3) {
      __pyx_t_4 = __Pyx_PyObject_CallOneArg(__pyx_t_7, __pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 210, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    } else {
      __pyx_t_4 = __Pyx_PyObject_CallNoArg(__pyx_t_7); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 210, __pyx_L1_error)
    }
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __pyx_t_1 = (__Pyx_PySequence_ContainsTF(__pyx_t_4, __pyx_v_self->ids_boilerplate, Py_EQ)); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(0, 210, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_8 = (__pyx_t_1 != 0);
    __pyx_t_2 = __pyx_t_8;
    __pyx_L15_bool_binop_done:;
    if (__pyx_t_2) {

      /* "gumbocy.pyx":211
 *         if self.has_ids_boilerplate:
 *             if attrs.get("id") and attrs["id"].lower() in self.ids_boilerplate:
 *                 return True             # <<<<<<<<<<<<<<
 * 
 *         if self.has_roles_boilerplate:
 */
      __pyx_r = 1;
      goto __pyx_L0;

      /* "gumbocy.pyx":210
 * 
 *         if self.has_ids_boilerplate:
 *             if attrs.get("id") and attrs["id"].lower() in self.ids_boilerplate:             # <<<<<<<<<<<<<<
 *                 return True
 * 
 */
    }

    /* "gumbocy.pyx":209
 *                         return True
 * 
 *         if self.has_ids_boilerplate:             # <<<<<<<<<<<<<<
 *             if attrs.get("id") and attrs["id"].lower() in self.ids_boilerplate:
 *                 return True
 */
  }

  /* "gumbocy.pyx":213
 *                 return True
 * 
 *         if self.has_roles_boilerplate:             # <<<<<<<<<<<<<<
 *             if attrs.get("role") and attrs["role"].lower() in self.roles_boilerplate:
 *                 return True
 */
  __pyx_t_2 = (__pyx_v_self->has_roles_boilerplate != 0);
  if (__pyx_t_2) {

    /* "gumbocy.pyx":214
 * 
 *         if self.has_roles_boilerplate:
 *             if attrs.get("role") and attrs["role"].lower() in self.roles_boilerplate:             # <<<<<<<<<<<<<<
 *                 return True
 * 
 */
    if (unlikely(__pyx_v_attrs == Py_None)) {
      PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%s'", "get");
      __PYX_ERR(0, 214, __pyx_L1_error)
    }
    __pyx_t_4 = __Pyx_PyDict_GetItemDefault(__pyx_v_attrs, __pyx_n_s_role, Py_None); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 214, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_8 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_8 < 0)) __PYX_ERR(0, 214, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (__pyx_t_8) {
    } else {
      __pyx_t_2 = __pyx_t_8;
      goto __pyx_L19_bool_binop_done;
    }
    if (unlikely(__pyx_v_attrs == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(0, 214, __pyx_L1_error)
    }
    __pyx_t_7 = __Pyx_PyDict_GetItem(__pyx_v_attrs, __pyx_n_s_role); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 214, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_7, __pyx_n_s_lower); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 214, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __pyx_t_7 = NULL;
    if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_3))) {
      __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_3);
      if (likely(__pyx_t_7)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
        __Pyx_INCREF(__pyx_t_7);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_3, function);
      }
    }
    if (__pyx_t_7) {
      __pyx_t_4 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_7); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 214, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    } else {
      __pyx_t_4 = __Pyx_PyObject_CallNoArg(__pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 214, __pyx_L1_error)
    }
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_8 = (__Pyx_PySequence_ContainsTF(__pyx_t_4, __pyx_v_self->roles_boilerplate, Py_EQ)); if (unlikely(__pyx_t_8 < 0)) __PYX_ERR(0, 214, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_1 = (__pyx_t_8 != 0);
    __pyx_t_2 = __pyx_t_1;
    __pyx_L19_bool_binop_done:;
    if (__pyx_t_2) {

      /* "gumbocy.pyx":215
 *         if self.has_roles_boilerplate:
 *             if attrs.get("role") and attrs["role"].lower() in self.roles_boilerplate:
 *                 return True             # <<<<<<<<<<<<<<
 * 
 *         return False
 */
      __pyx_r = 1;
      goto __pyx_L0;

      /* "gumbocy.pyx":214
 * 
 *         if self.has_roles_boilerplate:
 *             if attrs.get("role") and attrs["role"].lower() in self.roles_boilerplate:             # <<<<<<<<<<<<<<
 *                 return True
 * 
 */
    }

    /* "gumbocy.pyx":213
 *                 return True
 * 
 *         if self.has_roles_boilerplate:             # <<<<<<<<<<<<<<
 *             if attrs.get("role") and attrs["role"].lower() in self.roles_boilerplate:
 *                 return True
 */
  }

  /* "gumbocy.pyx":217
 *                 return True
 * 
 *         return False             # <<<<<<<<<<<<<<
 * 
 *     cdef get_attributes(self, gumbocy.GumboNode* node):
 */
  __pyx_r = 0;
  goto __pyx_L0;

  /* "gumbocy.pyx":186
 * 
 * 
 *     cdef bint guess_node_boilerplate(self, gumbocy.GumboNode* node, dict attrs):             # <<<<<<<<<<<<<<
 *         """ Rough guess to check if the element is boilerplate """
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_WriteUnraisable("gumbocy.HTMLParser.guess_node_boilerplate", __pyx_clineno, __pyx_lineno, __pyx_filename, 0, 0);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_k);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "gumbocy.pyx":219
 *         return False
 * 
 *     cdef get_attributes(self, gumbocy.GumboNode* node):             # <<<<<<<<<<<<<<
 *         """ Build a dict with all the whitelisted attributes """
 * 
 */

static PyObject *__pyx_f_7gumbocy_10HTMLParser_get_attributes(struct __pyx_obj_7gumbocy_HTMLParser *__pyx_v_self, GumboNode *__pyx_v_node) {
  int __pyx_v_has_attrs;
  unsigned int __pyx_v_i;
  GumboAttribute *__pyx_v_attr;
  PyObject *__pyx_v_attr_name = NULL;
  PyObject *__pyx_v_multiple_value = NULL;
  PyObject *__pyx_v_v = NULL;
  PyObject *__pyx_v_attrs = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  unsigned int __pyx_t_1;
  unsigned int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  int __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  Py_ssize_t __pyx_t_11;
  PyObject *(*__pyx_t_12)(PyObject *);
  __Pyx_RefNannySetupContext("get_attributes", 0);

  /* "gumbocy.pyx":222
 *         """ Build a dict with all the whitelisted attributes """
 * 
 *         has_attrs = False             # <<<<<<<<<<<<<<
 * 
 *         for i in range(node.v.element.attributes.length):
 */
  __pyx_v_has_attrs = 0;

  /* "gumbocy.pyx":224
 *         has_attrs = False
 * 
 *         for i in range(node.v.element.attributes.length):             # <<<<<<<<<<<<<<
 * 
 *             attr = <gumbocy.GumboAttribute *> node.v.element.attributes.data[i]
 */
  __pyx_t_1 = __pyx_v_node->v.element.attributes.length;
  for (__pyx_t_2 = 0; __pyx_t_2 < __pyx_t_1; __pyx_t_2+=1) {
    __pyx_v_i = __pyx_t_2;

    /* "gumbocy.pyx":226
 *         for i in range(node.v.element.attributes.length):
 * 
 *             attr = <gumbocy.GumboAttribute *> node.v.element.attributes.data[i]             # <<<<<<<<<<<<<<
 *             attr_name = str(attr.name)
 *             if attr_name in self.attributes_whitelist:
 */
    __pyx_v_attr = ((GumboAttribute *)(__pyx_v_node->v.element.attributes.data[__pyx_v_i]));

    /* "gumbocy.pyx":227
 * 
 *             attr = <gumbocy.GumboAttribute *> node.v.element.attributes.data[i]
 *             attr_name = str(attr.name)             # <<<<<<<<<<<<<<
 *             if attr_name in self.attributes_whitelist:
 *                 if attr_name == b"class":
 */
    __pyx_t_3 = __Pyx_PyBytes_FromString(__pyx_v_attr->name); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 227, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 227, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_3);
    PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_3);
    __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyObject_Call(((PyObject *)(&PyString_Type)), __pyx_t_4, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 227, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_XDECREF_SET(__pyx_v_attr_name, __pyx_t_3);
    __pyx_t_3 = 0;

    /* "gumbocy.pyx":228
 *             attr = <gumbocy.GumboAttribute *> node.v.element.attributes.data[i]
 *             attr_name = str(attr.name)
 *             if attr_name in self.attributes_whitelist:             # <<<<<<<<<<<<<<
 *                 if attr_name == b"class":
 *                     multiple_value = frozenset(_RE_SPLIT_WHITESPACE.split(attr.value.strip().lower()))
 */
    __pyx_t_5 = (__Pyx_PySequence_ContainsTF(__pyx_v_attr_name, __pyx_v_self->attributes_whitelist, Py_EQ)); if (unlikely(__pyx_t_5 < 0)) __PYX_ERR(0, 228, __pyx_L1_error)
    __pyx_t_6 = (__pyx_t_5 != 0);
    if (__pyx_t_6) {

      /* "gumbocy.pyx":229
 *             attr_name = str(attr.name)
 *             if attr_name in self.attributes_whitelist:
 *                 if attr_name == b"class":             # <<<<<<<<<<<<<<
 *                     multiple_value = frozenset(_RE_SPLIT_WHITESPACE.split(attr.value.strip().lower()))
 *                     if len(multiple_value):
 */
      __pyx_t_6 = (__Pyx_PyBytes_Equals(__pyx_v_attr_name, __pyx_n_b_class, Py_EQ)); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(0, 229, __pyx_L1_error)
      if (__pyx_t_6) {

        /* "gumbocy.pyx":230
 *             if attr_name in self.attributes_whitelist:
 *                 if attr_name == b"class":
 *                     multiple_value = frozenset(_RE_SPLIT_WHITESPACE.split(attr.value.strip().lower()))             # <<<<<<<<<<<<<<
 *                     if len(multiple_value):
 *                         if self.has_classes_ignore:
 */
        __pyx_t_4 = __Pyx_GetModuleGlobalName(__pyx_n_s_RE_SPLIT_WHITESPACE); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 230, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_split); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 230, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        __pyx_t_9 = __Pyx_PyBytes_FromString(__pyx_v_attr->value); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 230, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_9);
        __pyx_t_10 = __Pyx_PyObject_GetAttrStr(__pyx_t_9, __pyx_n_s_strip); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 230, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_10);
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
        __pyx_t_9 = NULL;
        if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_10))) {
          __pyx_t_9 = PyMethod_GET_SELF(__pyx_t_10);
          if (likely(__pyx_t_9)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_10);
            __Pyx_INCREF(__pyx_t_9);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_10, function);
          }
        }
        if (__pyx_t_9) {
          __pyx_t_8 = __Pyx_PyObject_CallOneArg(__pyx_t_10, __pyx_t_9); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 230, __pyx_L1_error)
          __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
        } else {
          __pyx_t_8 = __Pyx_PyObject_CallNoArg(__pyx_t_10); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 230, __pyx_L1_error)
        }
        __Pyx_GOTREF(__pyx_t_8);
        __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
        __pyx_t_10 = __Pyx_PyObject_GetAttrStr(__pyx_t_8, __pyx_n_s_lower); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 230, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_10);
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        __pyx_t_8 = NULL;
        if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_10))) {
          __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_10);
          if (likely(__pyx_t_8)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_10);
            __Pyx_INCREF(__pyx_t_8);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_10, function);
          }
        }
        if (__pyx_t_8) {
          __pyx_t_4 = __Pyx_PyObject_CallOneArg(__pyx_t_10, __pyx_t_8); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 230, __pyx_L1_error)
          __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        } else {
          __pyx_t_4 = __Pyx_PyObject_CallNoArg(__pyx_t_10); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 230, __pyx_L1_error)
        }
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
        __pyx_t_10 = NULL;
        if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_7))) {
          __pyx_t_10 = PyMethod_GET_SELF(__pyx_t_7);
          if (likely(__pyx_t_10)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
            __Pyx_INCREF(__pyx_t_10);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_7, function);
          }
        }
        if (!__pyx_t_10) {
          __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_t_7, __pyx_t_4); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 230, __pyx_L1_error)
          __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
          __Pyx_GOTREF(__pyx_t_3);
        } else {
          __pyx_t_8 = PyTuple_New(1+1); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 230, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_8);
          __Pyx_GIVEREF(__pyx_t_10); PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_10); __pyx_t_10 = NULL;
          __Pyx_GIVEREF(__pyx_t_4);
          PyTuple_SET_ITEM(__pyx_t_8, 0+1, __pyx_t_4);
          __pyx_t_4 = 0;
          __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_7, __pyx_t_8, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 230, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_3);
          __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        }
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        __pyx_t_7 = __Pyx_PyFrozenSet_New(__pyx_t_3); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 230, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        __Pyx_XDECREF_SET(__pyx_v_multiple_value, ((PyObject*)__pyx_t_7));
        __pyx_t_7 = 0;

        /* "gumbocy.pyx":231
 *                 if attr_name == b"class":
 *                     multiple_value = frozenset(_RE_SPLIT_WHITESPACE.split(attr.value.strip().lower()))
 *                     if len(multiple_value):             # <<<<<<<<<<<<<<
 *                         if self.has_classes_ignore:
 *                             for v in multiple_value:
 */
        __pyx_t_11 = PySet_GET_SIZE(__pyx_v_multiple_value); if (unlikely(__pyx_t_11 == -1)) __PYX_ERR(0, 231, __pyx_L1_error)
        __pyx_t_6 = (__pyx_t_11 != 0);
        if (__pyx_t_6) {

          /* "gumbocy.pyx":232
 *                     multiple_value = frozenset(_RE_SPLIT_WHITESPACE.split(attr.value.strip().lower()))
 *                     if len(multiple_value):
 *                         if self.has_classes_ignore:             # <<<<<<<<<<<<<<
 *                             for v in multiple_value:
 *                                 if v in self.classes_ignore:
 */
          __pyx_t_6 = (__pyx_v_self->has_classes_ignore != 0);
          if (__pyx_t_6) {

            /* "gumbocy.pyx":233
 *                     if len(multiple_value):
 *                         if self.has_classes_ignore:
 *                             for v in multiple_value:             # <<<<<<<<<<<<<<
 *                                 if v in self.classes_ignore:
 *                                     return 0
 */
            __pyx_t_7 = PyObject_GetIter(__pyx_v_multiple_value); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 233, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_7);
            __pyx_t_12 = Py_TYPE(__pyx_t_7)->tp_iternext; if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 233, __pyx_L1_error)
            for (;;) {
              {
                __pyx_t_3 = __pyx_t_12(__pyx_t_7);
                if (unlikely(!__pyx_t_3)) {
                  PyObject* exc_type = PyErr_Occurred();
                  if (exc_type) {
                    if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
                    else __PYX_ERR(0, 233, __pyx_L1_error)
                  }
                  break;
                }
                __Pyx_GOTREF(__pyx_t_3);
              }
              __Pyx_XDECREF_SET(__pyx_v_v, __pyx_t_3);
              __pyx_t_3 = 0;

              /* "gumbocy.pyx":234
 *                         if self.has_classes_ignore:
 *                             for v in multiple_value:
 *                                 if v in self.classes_ignore:             # <<<<<<<<<<<<<<
 *                                     return 0
 * 
 */
              __pyx_t_6 = (__Pyx_PySequence_ContainsTF(__pyx_v_v, __pyx_v_self->classes_ignore, Py_EQ)); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(0, 234, __pyx_L1_error)
              __pyx_t_5 = (__pyx_t_6 != 0);
              if (__pyx_t_5) {

                /* "gumbocy.pyx":235
 *                             for v in multiple_value:
 *                                 if v in self.classes_ignore:
 *                                     return 0             # <<<<<<<<<<<<<<
 * 
 *                         if not has_attrs:
 */
                __Pyx_XDECREF(__pyx_r);
                __Pyx_INCREF(__pyx_int_0);
                __pyx_r = __pyx_int_0;
                __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
                goto __pyx_L0;

                /* "gumbocy.pyx":234
 *                         if self.has_classes_ignore:
 *                             for v in multiple_value:
 *                                 if v in self.classes_ignore:             # <<<<<<<<<<<<<<
 *                                     return 0
 * 
 */
              }

              /* "gumbocy.pyx":233
 *                     if len(multiple_value):
 *                         if self.has_classes_ignore:
 *                             for v in multiple_value:             # <<<<<<<<<<<<<<
 *                                 if v in self.classes_ignore:
 *                                     return 0
 */
            }
            __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

            /* "gumbocy.pyx":232
 *                     multiple_value = frozenset(_RE_SPLIT_WHITESPACE.split(attr.value.strip().lower()))
 *                     if len(multiple_value):
 *                         if self.has_classes_ignore:             # <<<<<<<<<<<<<<
 *                             for v in multiple_value:
 *                                 if v in self.classes_ignore:
 */
          }

          /* "gumbocy.pyx":237
 *                                     return 0
 * 
 *                         if not has_attrs:             # <<<<<<<<<<<<<<
 *                             attrs = {}
 *                             has_attrs = True
 */
          __pyx_t_5 = ((!(__pyx_v_has_attrs != 0)) != 0);
          if (__pyx_t_5) {

            /* "gumbocy.pyx":238
 * 
 *                         if not has_attrs:
 *                             attrs = {}             # <<<<<<<<<<<<<<
 *                             has_attrs = True
 *                         attrs[attr_name] = multiple_value
 */
            __pyx_t_7 = PyDict_New(); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 238, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_7);
            __Pyx_XDECREF_SET(__pyx_v_attrs, ((PyObject*)__pyx_t_7));
            __pyx_t_7 = 0;

            /* "gumbocy.pyx":239
 *                         if not has_attrs:
 *                             attrs = {}
 *                             has_attrs = True             # <<<<<<<<<<<<<<
 *                         attrs[attr_name] = multiple_value
 * 
 */
            __pyx_v_has_attrs = 1;

            /* "gumbocy.pyx":237
 *                                     return 0
 * 
 *                         if not has_attrs:             # <<<<<<<<<<<<<<
 *                             attrs = {}
 *                             has_attrs = True
 */
          }

          /* "gumbocy.pyx":240
 *                             attrs = {}
 *                             has_attrs = True
 *                         attrs[attr_name] = multiple_value             # <<<<<<<<<<<<<<
 * 
 *                 else:
 */
          if (unlikely(!__pyx_v_attrs)) { __Pyx_RaiseUnboundLocalError("attrs"); __PYX_ERR(0, 240, __pyx_L1_error) }
          if (unlikely(PyDict_SetItem(__pyx_v_attrs, __pyx_v_attr_name, __pyx_v_multiple_value) < 0)) __PYX_ERR(0, 240, __pyx_L1_error)

          /* "gumbocy.pyx":231
 *                 if attr_name == b"class":
 *                     multiple_value = frozenset(_RE_SPLIT_WHITESPACE.split(attr.value.strip().lower()))
 *                     if len(multiple_value):             # <<<<<<<<<<<<<<
 *                         if self.has_classes_ignore:
 *                             for v in multiple_value:
 */
        }

        /* "gumbocy.pyx":229
 *             attr_name = str(attr.name)
 *             if attr_name in self.attributes_whitelist:
 *                 if attr_name == b"class":             # <<<<<<<<<<<<<<
 *                     multiple_value = frozenset(_RE_SPLIT_WHITESPACE.split(attr.value.strip().lower()))
 *                     if len(multiple_value):
 */
        goto __pyx_L6;
      }

      /* "gumbocy.pyx":244
 *                 else:
 * 
 *                     if not has_attrs:             # <<<<<<<<<<<<<<
 *                         attrs = {}
 *                         has_attrs = True
 */
      /*else*/ {
        __pyx_t_5 = ((!(__pyx_v_has_attrs != 0)) != 0);
        if (__pyx_t_5) {

          /* "gumbocy.pyx":245
 * 
 *                     if not has_attrs:
 *                         attrs = {}             # <<<<<<<<<<<<<<
 *                         has_attrs = True
 *                     attrs[attr_name] = attr.value
 */
          __pyx_t_7 = PyDict_New(); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 245, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_7);
          __Pyx_XDECREF_SET(__pyx_v_attrs, ((PyObject*)__pyx_t_7));
          __pyx_t_7 = 0;

          /* "gumbocy.pyx":246
 *                     if not has_attrs:
 *                         attrs = {}
 *                         has_attrs = True             # <<<<<<<<<<<<<<
 *                     attrs[attr_name] = attr.value
 * 
 */
          __pyx_v_has_attrs = 1;

          /* "gumbocy.pyx":244
 *                 else:
 * 
 *                     if not has_attrs:             # <<<<<<<<<<<<<<
 *                         attrs = {}
 *                         has_attrs = True
 */
        }

        /* "gumbocy.pyx":247
 *                         attrs = {}
 *                         has_attrs = True
 *                     attrs[attr_name] = attr.value             # <<<<<<<<<<<<<<
 * 
 *         if not has_attrs:
 */
        __pyx_t_7 = __Pyx_PyBytes_FromString(__pyx_v_attr->value); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 247, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        if (unlikely(!__pyx_v_attrs)) { __Pyx_RaiseUnboundLocalError("attrs"); __PYX_ERR(0, 247, __pyx_L1_error) }
        if (unlikely(PyDict_SetItem(__pyx_v_attrs, __pyx_v_attr_name, __pyx_t_7) < 0)) __PYX_ERR(0, 247, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      }
      __pyx_L6:;

      /* "gumbocy.pyx":228
 *             attr = <gumbocy.GumboAttribute *> node.v.element.attributes.data[i]
 *             attr_name = str(attr.name)
 *             if attr_name in self.attributes_whitelist:             # <<<<<<<<<<<<<<
 *                 if attr_name == b"class":
 *                     multiple_value = frozenset(_RE_SPLIT_WHITESPACE.split(attr.value.strip().lower()))
 */
    }
  }

  /* "gumbocy.pyx":249
 *                     attrs[attr_name] = attr.value
 * 
 *         if not has_attrs:             # <<<<<<<<<<<<<<
 *             return {}
 * 
 */
  __pyx_t_5 = ((!(__pyx_v_has_attrs != 0)) != 0);
  if (__pyx_t_5) {

    /* "gumbocy.pyx":250
 * 
 *         if not has_attrs:
 *             return {}             # <<<<<<<<<<<<<<
 * 
 *         return attrs
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_7 = PyDict_New(); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 250, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_r = __pyx_t_7;
    __pyx_t_7 = 0;
    goto __pyx_L0;

    /* "gumbocy.pyx":249
 *                     attrs[attr_name] = attr.value
 * 
 *         if not has_attrs:             # <<<<<<<<<<<<<<
 *             return {}
 * 
 */
  }

  /* "gumbocy.pyx":252
 *             return {}
 * 
 *         return attrs             # <<<<<<<<<<<<<<
 * 
 *     cdef void close_word_group(self):
 */
  __Pyx_XDECREF(__pyx_r);
  if (unlikely(!__pyx_v_attrs)) { __Pyx_RaiseUnboundLocalError("attrs"); __PYX_ERR(0, 252, __pyx_L1_error) }
  __Pyx_INCREF(__pyx_v_attrs);
  __pyx_r = __pyx_v_attrs;
  goto __pyx_L0;

  /* "gumbocy.pyx":219
 *         return False
 * 
 *     cdef get_attributes(self, gumbocy.GumboNode* node):             # <<<<<<<<<<<<<<
 *         """ Build a dict with all the whitelisted attributes """
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_AddTraceback("gumbocy.HTMLParser.get_attributes", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_attr_name);
  __Pyx_XDECREF(__pyx_v_multiple_value);
  __Pyx_XDECREF(__pyx_v_v);
  __Pyx_XDECREF(__pyx_v_attrs);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "gumbocy.pyx":254
 *         return attrs
 * 
 *     cdef void close_word_group(self):             # <<<<<<<<<<<<<<
 *         """ Close the current word group """
 * 
 */

static void __pyx_f_7gumbocy_10HTMLParser_close_word_group(struct __pyx_obj_7gumbocy_HTMLParser *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  __Pyx_RefNannySetupContext("close_word_group", 0);

  /* "gumbocy.pyx":257
 *         """ Close the current word group """
 * 
 *         if self.current_word_group:             # <<<<<<<<<<<<<<
 *             self.analysis["word_groups"].append(tuple(self.current_word_group))
 *             self.current_word_group = None
 */
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_self->current_word_group); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(0, 257, __pyx_L1_error)
  if (__pyx_t_1) {

    /* "gumbocy.pyx":258
 * 
 *         if self.current_word_group:
 *             self.analysis["word_groups"].append(tuple(self.current_word_group))             # <<<<<<<<<<<<<<
 *             self.current_word_group = None
 * 
 */
    if (unlikely(__pyx_v_self->analysis == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(0, 258, __pyx_L1_error)
    }
    __pyx_t_2 = __Pyx_PyDict_GetItem(__pyx_v_self->analysis, __pyx_n_s_word_groups); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 258, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = PySequence_Tuple(__pyx_v_self->current_word_group); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 258, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_PyObject_Append(__pyx_t_2, __pyx_t_3); if (unlikely(__pyx_t_4 == -1)) __PYX_ERR(0, 258, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "gumbocy.pyx":259
 *         if self.current_word_group:
 *             self.analysis["word_groups"].append(tuple(self.current_word_group))
 *             self.current_word_group = None             # <<<<<<<<<<<<<<
 * 
 * 
 */
    __Pyx_INCREF(Py_None);
    __Pyx_GIVEREF(Py_None);
    __Pyx_GOTREF(__pyx_v_self->current_word_group);
    __Pyx_DECREF(__pyx_v_self->current_word_group);
    __pyx_v_self->current_word_group = Py_None;

    /* "gumbocy.pyx":257
 *         """ Close the current word group """
 * 
 *         if self.current_word_group:             # <<<<<<<<<<<<<<
 *             self.analysis["word_groups"].append(tuple(self.current_word_group))
 *             self.current_word_group = None
 */
  }

  /* "gumbocy.pyx":254
 *         return attrs
 * 
 *     cdef void close_word_group(self):             # <<<<<<<<<<<<<<
 *         """ Close the current word group """
 * 
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_WriteUnraisable("gumbocy.HTMLParser.close_word_group", __pyx_clineno, __pyx_lineno, __pyx_filename, 0, 0);
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
}

/* "gumbocy.pyx":262
 * 
 * 
 *     cdef void add_text(self, text):             # <<<<<<<<<<<<<<
 * 
 *         if not self.current_word_group:
 */

static void __pyx_f_7gumbocy_10HTMLParser_add_text(struct __pyx_obj_7gumbocy_HTMLParser *__pyx_v_self, PyObject *__pyx_v_text) {
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  Py_ssize_t __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  __Pyx_RefNannySetupContext("add_text", 0);

  /* "gumbocy.pyx":264
 *     cdef void add_text(self, text):
 * 
 *         if not self.current_word_group:             # <<<<<<<<<<<<<<
 *             self.current_word_group = [text.strip(), self.current_stack[-1]]
 *         else:
 */
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_self->current_word_group); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(0, 264, __pyx_L1_error)
  __pyx_t_2 = ((!__pyx_t_1) != 0);
  if (__pyx_t_2) {

    /* "gumbocy.pyx":265
 * 
 *         if not self.current_word_group:
 *             self.current_word_group = [text.strip(), self.current_stack[-1]]             # <<<<<<<<<<<<<<
 *         else:
 *             self.current_word_group[0] += " " + text.strip()
 */
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_text, __pyx_n_s_strip); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 265, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = NULL;
    if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
      }
    }
    if (__pyx_t_5) {
      __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_5); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 265, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    } else {
      __pyx_t_3 = __Pyx_PyObject_CallNoArg(__pyx_t_4); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 265, __pyx_L1_error)
    }
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (unlikely(__pyx_v_self->current_stack == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(0, 265, __pyx_L1_error)
    }
    __pyx_t_4 = __Pyx_GetItemInt_List(__pyx_v_self->current_stack, -1L, long, 1, __Pyx_PyInt_From_long, 1, 1, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 265, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = PyList_New(2); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 265, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_3);
    PyList_SET_ITEM(__pyx_t_5, 0, __pyx_t_3);
    __Pyx_GIVEREF(__pyx_t_4);
    PyList_SET_ITEM(__pyx_t_5, 1, __pyx_t_4);
    __pyx_t_3 = 0;
    __pyx_t_4 = 0;
    __Pyx_GIVEREF(__pyx_t_5);
    __Pyx_GOTREF(__pyx_v_self->current_word_group);
    __Pyx_DECREF(__pyx_v_self->current_word_group);
    __pyx_v_self->current_word_group = __pyx_t_5;
    __pyx_t_5 = 0;

    /* "gumbocy.pyx":264
 *     cdef void add_text(self, text):
 * 
 *         if not self.current_word_group:             # <<<<<<<<<<<<<<
 *             self.current_word_group = [text.strip(), self.current_stack[-1]]
 *         else:
 */
    goto __pyx_L3;
  }

  /* "gumbocy.pyx":267
 *             self.current_word_group = [text.strip(), self.current_stack[-1]]
 *         else:
 *             self.current_word_group[0] += " " + text.strip()             # <<<<<<<<<<<<<<
 * 
 *     cdef void add_hyperlink_text(self, text):
 */
  /*else*/ {
    __Pyx_INCREF(__pyx_v_self->current_word_group);
    __pyx_t_5 = __pyx_v_self->current_word_group;
    __pyx_t_6 = 0;
    __pyx_t_4 = __Pyx_GetItemInt(__pyx_t_5, __pyx_t_6, Py_ssize_t, 1, PyInt_FromSsize_t, 0, 1, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 267, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_v_text, __pyx_n_s_strip); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 267, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_8 = NULL;
    if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_7))) {
      __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_7);
      if (likely(__pyx_t_8)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
        __Pyx_INCREF(__pyx_t_8);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_7, function);
      }
    }
    if (__pyx_t_8) {
      __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_t_7, __pyx_t_8); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 267, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    } else {
      __pyx_t_3 = __Pyx_PyObject_CallNoArg(__pyx_t_7); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 267, __pyx_L1_error)
    }
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __pyx_t_7 = PyNumber_Add(__pyx_kp_s_, __pyx_t_3); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 267, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = PyNumber_InPlaceAdd(__pyx_t_4, __pyx_t_7); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 267, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    if (unlikely(__Pyx_SetItemInt(__pyx_t_5, __pyx_t_6, __pyx_t_3, Py_ssize_t, 1, PyInt_FromSsize_t, 0, 1, 1) < 0)) __PYX_ERR(0, 267, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  }
  __pyx_L3:;

  /* "gumbocy.pyx":262
 * 
 * 
 *     cdef void add_text(self, text):             # <<<<<<<<<<<<<<
 * 
 *         if not self.current_word_group:
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_WriteUnraisable("gumbocy.HTMLParser.add_text", __pyx_clineno, __pyx_lineno, __pyx_filename, 0, 0);
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
}

/* "gumbocy.pyx":269
 *             self.current_word_group[0] += " " + text.strip()
 * 
 *     cdef void add_hyperlink_text(self, text):             # <<<<<<<<<<<<<<
 *         if self.current_hyperlink:
 *             self.current_hyperlink[1] += text
 */

static void __pyx_f_7gumbocy_10HTMLParser_add_hyperlink_text(struct __pyx_obj_7gumbocy_HTMLParser *__pyx_v_self, PyObject *__pyx_v_text) {
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  Py_ssize_t __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  __Pyx_RefNannySetupContext("add_hyperlink_text", 0);

  /* "gumbocy.pyx":270
 * 
 *     cdef void add_hyperlink_text(self, text):
 *         if self.current_hyperlink:             # <<<<<<<<<<<<<<
 *             self.current_hyperlink[1] += text
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_self->current_hyperlink); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(0, 270, __pyx_L1_error)
  if (__pyx_t_1) {

    /* "gumbocy.pyx":271
 *     cdef void add_hyperlink_text(self, text):
 *         if self.current_hyperlink:
 *             self.current_hyperlink[1] += text             # <<<<<<<<<<<<<<
 * 
 *     cdef void open_hyperlink(self, attrs):
 */
    __Pyx_INCREF(__pyx_v_self->current_hyperlink);
    __pyx_t_2 = __pyx_v_self->current_hyperlink;
    __pyx_t_3 = 1;
    __pyx_t_4 = __Pyx_GetItemInt(__pyx_t_2, __pyx_t_3, Py_ssize_t, 1, PyInt_FromSsize_t, 0, 1, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 271, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = PyNumber_InPlaceAdd(__pyx_t_4, __pyx_v_text); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 271, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (unlikely(__Pyx_SetItemInt(__pyx_t_2, __pyx_t_3, __pyx_t_5, Py_ssize_t, 1, PyInt_FromSsize_t, 0, 1, 1) < 0)) __PYX_ERR(0, 271, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "gumbocy.pyx":270
 * 
 *     cdef void add_hyperlink_text(self, text):
 *         if self.current_hyperlink:             # <<<<<<<<<<<<<<
 *             self.current_hyperlink[1] += text
 * 
 */
  }

  /* "gumbocy.pyx":269
 *             self.current_word_group[0] += " " + text.strip()
 * 
 *     cdef void add_hyperlink_text(self, text):             # <<<<<<<<<<<<<<
 *         if self.current_hyperlink:
 *             self.current_hyperlink[1] += text
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_WriteUnraisable("gumbocy.HTMLParser.add_hyperlink_text", __pyx_clineno, __pyx_lineno, __pyx_filename, 0, 0);
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
}

/* "gumbocy.pyx":273
 *             self.current_hyperlink[1] += text
 * 
 *     cdef void open_hyperlink(self, attrs):             # <<<<<<<<<<<<<<
 *         href = attrs.get("href")
 *         if not href:
 */

static void __pyx_f_7gumbocy_10HTMLParser_open_hyperlink(struct __pyx_obj_7gumbocy_HTMLParser *__pyx_v_self, PyObject *__pyx_v_attrs) {
  PyObject *__pyx_v_href = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_t_4;
  __Pyx_RefNannySetupContext("open_hyperlink", 0);

  /* "gumbocy.pyx":274
 * 
 *     cdef void open_hyperlink(self, attrs):
 *         href = attrs.get("href")             # <<<<<<<<<<<<<<
 *         if not href:
 *             return
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_attrs, __pyx_n_s_get); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 274, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_tuple__2, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 274, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_href = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "gumbocy.pyx":275
 *     cdef void open_hyperlink(self, attrs):
 *         href = attrs.get("href")
 *         if not href:             # <<<<<<<<<<<<<<
 *             return
 * 
 */
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_v_href); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 275, __pyx_L1_error)
  __pyx_t_4 = ((!__pyx_t_3) != 0);
  if (__pyx_t_4) {

    /* "gumbocy.pyx":276
 *         href = attrs.get("href")
 *         if not href:
 *             return             # <<<<<<<<<<<<<<
 * 
 *         if href.startswith("javascript:") or href.startswith("mailto:") or href.startswith("about:"):
 */
    goto __pyx_L0;

    /* "gumbocy.pyx":275
 *     cdef void open_hyperlink(self, attrs):
 *         href = attrs.get("href")
 *         if not href:             # <<<<<<<<<<<<<<
 *             return
 * 
 */
  }

  /* "gumbocy.pyx":278
 *             return
 * 
 *         if href.startswith("javascript:") or href.startswith("mailto:") or href.startswith("about:"):             # <<<<<<<<<<<<<<
 *             return
 * 
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_href, __pyx_n_s_startswith); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 278, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_tuple__3, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 278, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 278, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (!__pyx_t_3) {
  } else {
    __pyx_t_4 = __pyx_t_3;
    goto __pyx_L5_bool_binop_done;
  }
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_href, __pyx_n_s_startswith); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 278, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_tuple__4, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 278, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 278, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (!__pyx_t_3) {
  } else {
    __pyx_t_4 = __pyx_t_3;
    goto __pyx_L5_bool_binop_done;
  }
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_href, __pyx_n_s_startswith); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 278, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_tuple__5, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 278, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 278, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_4 = __pyx_t_3;
  __pyx_L5_bool_binop_done:;
  if (__pyx_t_4) {

    /* "gumbocy.pyx":279
 * 
 *         if href.startswith("javascript:") or href.startswith("mailto:") or href.startswith("about:"):
 *             return             # <<<<<<<<<<<<<<
 * 
 *         self.close_hyperlink()
 */
    goto __pyx_L0;

    /* "gumbocy.pyx":278
 *             return
 * 
 *         if href.startswith("javascript:") or href.startswith("mailto:") or href.startswith("about:"):             # <<<<<<<<<<<<<<
 *             return
 * 
 */
  }

  /* "gumbocy.pyx":281
 *             return
 * 
 *         self.close_hyperlink()             # <<<<<<<<<<<<<<
 *         self.current_hyperlink = [href, ""]
 * 
 */
  ((struct __pyx_vtabstruct_7gumbocy_HTMLParser *)__pyx_v_self->__pyx_vtab)->close_hyperlink(__pyx_v_self);

  /* "gumbocy.pyx":282
 * 
 *         self.close_hyperlink()
 *         self.current_hyperlink = [href, ""]             # <<<<<<<<<<<<<<
 * 
 *     cdef void close_hyperlink(self):
 */
  __pyx_t_1 = PyList_New(2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 282, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_v_href);
  __Pyx_GIVEREF(__pyx_v_href);
  PyList_SET_ITEM(__pyx_t_1, 0, __pyx_v_href);
  __Pyx_INCREF(__pyx_kp_s__6);
  __Pyx_GIVEREF(__pyx_kp_s__6);
  PyList_SET_ITEM(__pyx_t_1, 1, __pyx_kp_s__6);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->current_hyperlink);
  __Pyx_DECREF(__pyx_v_self->current_hyperlink);
  __pyx_v_self->current_hyperlink = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "gumbocy.pyx":273
 *             self.current_hyperlink[1] += text
 * 
 *     cdef void open_hyperlink(self, attrs):             # <<<<<<<<<<<<<<
 *         href = attrs.get("href")
 *         if not href:
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_WriteUnraisable("gumbocy.HTMLParser.open_hyperlink", __pyx_clineno, __pyx_lineno, __pyx_filename, 0, 0);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_href);
  __Pyx_RefNannyFinishContext();
}

/* "gumbocy.pyx":284
 *         self.current_hyperlink = [href, ""]
 * 
 *     cdef void close_hyperlink(self):             # <<<<<<<<<<<<<<
 *         if self.current_hyperlink:
 *             href = self.current_hyperlink[0]
 */

static void __pyx_f_7gumbocy_10HTMLParser_close_hyperlink(struct __pyx_obj_7gumbocy_HTMLParser *__pyx_v_self) {
  PyObject *__pyx_v_href = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  int __pyx_t_7;
  __Pyx_RefNannySetupContext("close_hyperlink", 0);

  /* "gumbocy.pyx":285
 * 
 *     cdef void close_hyperlink(self):
 *         if self.current_hyperlink:             # <<<<<<<<<<<<<<
 *             href = self.current_hyperlink[0]
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_self->current_hyperlink); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(0, 285, __pyx_L1_error)
  if (__pyx_t_1) {

    /* "gumbocy.pyx":286
 *     cdef void close_hyperlink(self):
 *         if self.current_hyperlink:
 *             href = self.current_hyperlink[0]             # <<<<<<<<<<<<<<
 * 
 *             # TODO: absolute links to same domain
 */
    __pyx_t_2 = __Pyx_GetItemInt(__pyx_v_self->current_hyperlink, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 286, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_v_href = __pyx_t_2;
    __pyx_t_2 = 0;

    /* "gumbocy.pyx":289
 * 
 *             # TODO: absolute links to same domain
 *             if _RE_EXTERNAL_HREF.search(href):             # <<<<<<<<<<<<<<
 *                 if self.analyze_external_hyperlinks:
 *                     if href.startswith("http://") or href.startswith("https://") or href.startswith("//"):
 */
    __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_RE_EXTERNAL_HREF); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 289, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_search); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 289, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = NULL;
    if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_3)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_3);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
      }
    }
    if (!__pyx_t_3) {
      __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_v_href); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 289, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
    } else {
      __pyx_t_5 = PyTuple_New(1+1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 289, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_GIVEREF(__pyx_t_3); PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_3); __pyx_t_3 = NULL;
      __Pyx_INCREF(__pyx_v_href);
      __Pyx_GIVEREF(__pyx_v_href);
      PyTuple_SET_ITEM(__pyx_t_5, 0+1, __pyx_v_href);
      __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_5, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 289, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    }
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(0, 289, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (__pyx_t_1) {

      /* "gumbocy.pyx":290
 *             # TODO: absolute links to same domain
 *             if _RE_EXTERNAL_HREF.search(href):
 *                 if self.analyze_external_hyperlinks:             # <<<<<<<<<<<<<<
 *                     if href.startswith("http://") or href.startswith("https://") or href.startswith("//"):
 *                         self.analysis["external_hyperlinks"].append(tuple(self.current_hyperlink))
 */
      __pyx_t_1 = (__pyx_v_self->analyze_external_hyperlinks != 0);
      if (__pyx_t_1) {

        /* "gumbocy.pyx":291
 *             if _RE_EXTERNAL_HREF.search(href):
 *                 if self.analyze_external_hyperlinks:
 *                     if href.startswith("http://") or href.startswith("https://") or href.startswith("//"):             # <<<<<<<<<<<<<<
 *                         self.analysis["external_hyperlinks"].append(tuple(self.current_hyperlink))
 *             else:
 */
        __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_href, __pyx_n_s_startswith); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 291, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_tuple__7, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 291, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(0, 291, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        if (!__pyx_t_6) {
        } else {
          __pyx_t_1 = __pyx_t_6;
          goto __pyx_L7_bool_binop_done;
        }
        __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_href, __pyx_n_s_startswith); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 291, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_tuple__8, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 291, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(0, 291, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        if (!__pyx_t_6) {
        } else {
          __pyx_t_1 = __pyx_t_6;
          goto __pyx_L7_bool_binop_done;
        }
        __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_href, __pyx_n_s_startswith); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 291, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_tuple__10, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 291, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(0, 291, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        __pyx_t_1 = __pyx_t_6;
        __pyx_L7_bool_binop_done:;
        if (__pyx_t_1) {

          /* "gumbocy.pyx":292
 *                 if self.analyze_external_hyperlinks:
 *                     if href.startswith("http://") or href.startswith("https://") or href.startswith("//"):
 *                         self.analysis["external_hyperlinks"].append(tuple(self.current_hyperlink))             # <<<<<<<<<<<<<<
 *             else:
 *                 if self.analyze_internal_hyperlinks:
 */
          if (unlikely(__pyx_v_self->analysis == Py_None)) {
            PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
            __PYX_ERR(0, 292, __pyx_L1_error)
          }
          __pyx_t_4 = __Pyx_PyDict_GetItem(__pyx_v_self->analysis, __pyx_n_s_external_hyperlinks); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 292, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_4);
          __pyx_t_2 = PySequence_Tuple(__pyx_v_self->current_hyperlink); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 292, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_2);
          __pyx_t_7 = __Pyx_PyObject_Append(__pyx_t_4, __pyx_t_2); if (unlikely(__pyx_t_7 == -1)) __PYX_ERR(0, 292, __pyx_L1_error)
          __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
          __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

          /* "gumbocy.pyx":291
 *             if _RE_EXTERNAL_HREF.search(href):
 *                 if self.analyze_external_hyperlinks:
 *                     if href.startswith("http://") or href.startswith("https://") or href.startswith("//"):             # <<<<<<<<<<<<<<
 *                         self.analysis["external_hyperlinks"].append(tuple(self.current_hyperlink))
 *             else:
 */
        }

        /* "gumbocy.pyx":290
 *             # TODO: absolute links to same domain
 *             if _RE_EXTERNAL_HREF.search(href):
 *                 if self.analyze_external_hyperlinks:             # <<<<<<<<<<<<<<
 *                     if href.startswith("http://") or href.startswith("https://") or href.startswith("//"):
 *                         self.analysis["external_hyperlinks"].append(tuple(self.current_hyperlink))
 */
      }

      /* "gumbocy.pyx":289
 * 
 *             # TODO: absolute links to same domain
 *             if _RE_EXTERNAL_HREF.search(href):             # <<<<<<<<<<<<<<
 *                 if self.analyze_external_hyperlinks:
 *                     if href.startswith("http://") or href.startswith("https://") or href.startswith("//"):
 */
      goto __pyx_L4;
    }

    /* "gumbocy.pyx":294
 *                         self.analysis["external_hyperlinks"].append(tuple(self.current_hyperlink))
 *             else:
 *                 if self.analyze_internal_hyperlinks:             # <<<<<<<<<<<<<<
 *                     self.analysis["internal_hyperlinks"].append(tuple(self.current_hyperlink))
 * 
 */
    /*else*/ {
      __pyx_t_1 = (__pyx_v_self->analyze_internal_hyperlinks != 0);
      if (__pyx_t_1) {

        /* "gumbocy.pyx":295
 *             else:
 *                 if self.analyze_internal_hyperlinks:
 *                     self.analysis["internal_hyperlinks"].append(tuple(self.current_hyperlink))             # <<<<<<<<<<<<<<
 * 
 *             self.current_hyperlink = None
 */
        if (unlikely(__pyx_v_self->analysis == Py_None)) {
          PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
          __PYX_ERR(0, 295, __pyx_L1_error)
        }
        __pyx_t_2 = __Pyx_PyDict_GetItem(__pyx_v_self->analysis, __pyx_n_s_internal_hyperlinks); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 295, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __pyx_t_4 = PySequence_Tuple(__pyx_v_self->current_hyperlink); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 295, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __pyx_t_7 = __Pyx_PyObject_Append(__pyx_t_2, __pyx_t_4); if (unlikely(__pyx_t_7 == -1)) __PYX_ERR(0, 295, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

        /* "gumbocy.pyx":294
 *                         self.analysis["external_hyperlinks"].append(tuple(self.current_hyperlink))
 *             else:
 *                 if self.analyze_internal_hyperlinks:             # <<<<<<<<<<<<<<
 *                     self.analysis["internal_hyperlinks"].append(tuple(self.current_hyperlink))
 * 
 */
      }
    }
    __pyx_L4:;

    /* "gumbocy.pyx":297
 *                     self.analysis["internal_hyperlinks"].append(tuple(self.current_hyperlink))
 * 
 *             self.current_hyperlink = None             # <<<<<<<<<<<<<<
 * 
 *     cdef bint _traverse_node(self, int level, gumbocy.GumboNode* node, bint is_head, bint is_hidden, bint is_boilerplate, bint is_boilerplate_bypassed, bint is_hyperlink):
 */
    __Pyx_INCREF(Py_None);
    __Pyx_GIVEREF(Py_None);
    __Pyx_GOTREF(__pyx_v_self->current_hyperlink);
    __Pyx_DECREF(__pyx_v_self->current_hyperlink);
    __pyx_v_self->current_hyperlink = Py_None;

    /* "gumbocy.pyx":285
 * 
 *     cdef void close_hyperlink(self):
 *         if self.current_hyperlink:             # <<<<<<<<<<<<<<
 *             href = self.current_hyperlink[0]
 * 
 */
  }

  /* "gumbocy.pyx":284
 *         self.current_hyperlink = [href, ""]
 * 
 *     cdef void close_hyperlink(self):             # <<<<<<<<<<<<<<
 *         if self.current_hyperlink:
 *             href = self.current_hyperlink[0]
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_WriteUnraisable("gumbocy.HTMLParser.close_hyperlink", __pyx_clineno, __pyx_lineno, __pyx_filename, 0, 0);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_href);
  __Pyx_RefNannyFinishContext();
}

/* "gumbocy.pyx":299
 *             self.current_hyperlink = None
 * 
 *     cdef bint _traverse_node(self, int level, gumbocy.GumboNode* node, bint is_head, bint is_hidden, bint is_boilerplate, bint is_boilerplate_bypassed, bint is_hyperlink):             # <<<<<<<<<<<<<<
 *         """ Traverses the node tree. Return 1 to stop at this level """
 * 
 */

static int __pyx_f_7gumbocy_10HTMLParser__traverse_node(struct __pyx_obj_7gumbocy_HTMLParser *__pyx_v_self, int __pyx_v_level, GumboNode *__pyx_v_node, int __pyx_v_is_head, int __pyx_v_is_hidden, int __pyx_v_is_boilerplate, int __pyx_v_is_boilerplate_bypassed, int __pyx_v_is_hyperlink) {
  GumboStringPiece __pyx_v_gsp;
  int __pyx_v_tag_n;
  char const *__pyx_v_tag_name;
  PyObject *__pyx_v_py_tag_name = NULL;
  PyObject *__pyx_v_attrs = NULL;
  GumboNode *__pyx_v_first_child;
  PyObject *__pyx_v_meta_name = NULL;
  unsigned int __pyx_v_i;
  GumboNode *__pyx_v_child;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  GumboStringPiece __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  char const *__pyx_t_7;
  int __pyx_t_8;
  int __pyx_t_9;
  PyObject *__pyx_t_10 = NULL;
  unsigned int __pyx_t_11;
  unsigned int __pyx_t_12;
  __Pyx_RefNannySetupContext("_traverse_node", 0);

  /* "gumbocy.pyx":304
 *         cdef GumboStringPiece gsp
 * 
 *         if level > self.nesting_limit:             # <<<<<<<<<<<<<<
 *             return 0
 * 
 */
  __pyx_t_1 = ((__pyx_v_level > __pyx_v_self->nesting_limit) != 0);
  if (__pyx_t_1) {

    /* "gumbocy.pyx":305
 * 
 *         if level > self.nesting_limit:
 *             return 0             # <<<<<<<<<<<<<<
 * 
 *         if node.type == gumbocy.GUMBO_NODE_TEXT:
 */
    __pyx_r = 0;
    goto __pyx_L0;

    /* "gumbocy.pyx":304
 *         cdef GumboStringPiece gsp
 * 
 *         if level > self.nesting_limit:             # <<<<<<<<<<<<<<
 *             return 0
 * 
 */
  }

  /* "gumbocy.pyx":307
 *             return 0
 * 
 *         if node.type == gumbocy.GUMBO_NODE_TEXT:             # <<<<<<<<<<<<<<
 * 
 *             if (self.analyze_internal_hyperlinks or self.analyze_external_hyperlinks) and is_hyperlink:
 */
  switch (__pyx_v_node->type) {
    case GUMBO_NODE_TEXT:

    /* "gumbocy.pyx":309
 *         if node.type == gumbocy.GUMBO_NODE_TEXT:
 * 
 *             if (self.analyze_internal_hyperlinks or self.analyze_external_hyperlinks) and is_hyperlink:             # <<<<<<<<<<<<<<
 *                 self.add_hyperlink_text(node.v.text.text)
 * 
 */
    __pyx_t_2 = (__pyx_v_self->analyze_internal_hyperlinks != 0);
    if (!__pyx_t_2) {
    } else {
      goto __pyx_L6_next_and;
    }
    __pyx_t_2 = (__pyx_v_self->analyze_external_hyperlinks != 0);
    if (__pyx_t_2) {
    } else {
      __pyx_t_1 = __pyx_t_2;
      goto __pyx_L5_bool_binop_done;
    }
    __pyx_L6_next_and:;
    __pyx_t_2 = (__pyx_v_is_hyperlink != 0);
    __pyx_t_1 = __pyx_t_2;
    __pyx_L5_bool_binop_done:;
    if (__pyx_t_1) {

      /* "gumbocy.pyx":310
 * 
 *             if (self.analyze_internal_hyperlinks or self.analyze_external_hyperlinks) and is_hyperlink:
 *                 self.add_hyperlink_text(node.v.text.text)             # <<<<<<<<<<<<<<
 * 
 *             if self.analyze_word_groups and not is_head and not is_hidden and (not is_boilerplate or is_boilerplate_bypassed):
 */
      __pyx_t_3 = __Pyx_PyBytes_FromString(__pyx_v_node->v.text.text); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 310, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      ((struct __pyx_vtabstruct_7gumbocy_HTMLParser *)__pyx_v_self->__pyx_vtab)->add_hyperlink_text(__pyx_v_self, __pyx_t_3);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

      /* "gumbocy.pyx":309
 *         if node.type == gumbocy.GUMBO_NODE_TEXT:
 * 
 *             if (self.analyze_internal_hyperlinks or self.analyze_external_hyperlinks) and is_hyperlink:             # <<<<<<<<<<<<<<
 *                 self.add_hyperlink_text(node.v.text.text)
 * 
 */
    }

    /* "gumbocy.pyx":312
 *                 self.add_hyperlink_text(node.v.text.text)
 * 
 *             if self.analyze_word_groups and not is_head and not is_hidden and (not is_boilerplate or is_boilerplate_bypassed):             # <<<<<<<<<<<<<<
 *                 self.add_text(node.v.text.text)
 * 
 */
    __pyx_t_2 = (__pyx_v_self->analyze_word_groups != 0);
    if (__pyx_t_2) {
    } else {
      __pyx_t_1 = __pyx_t_2;
      goto __pyx_L9_bool_binop_done;
    }
    __pyx_t_2 = ((!(__pyx_v_is_head != 0)) != 0);
    if (__pyx_t_2) {
    } else {
      __pyx_t_1 = __pyx_t_2;
      goto __pyx_L9_bool_binop_done;
    }
    __pyx_t_2 = ((!(__pyx_v_is_hidden != 0)) != 0);
    if (__pyx_t_2) {
    } else {
      __pyx_t_1 = __pyx_t_2;
      goto __pyx_L9_bool_binop_done;
    }
    __pyx_t_2 = ((!(__pyx_v_is_boilerplate != 0)) != 0);
    if (!__pyx_t_2) {
    } else {
      __pyx_t_1 = __pyx_t_2;
      goto __pyx_L9_bool_binop_done;
    }
    __pyx_t_2 = (__pyx_v_is_boilerplate_bypassed != 0);
    __pyx_t_1 = __pyx_t_2;
    __pyx_L9_bool_binop_done:;
    if (__pyx_t_1) {

      /* "gumbocy.pyx":313
 * 
 *             if self.analyze_word_groups and not is_head and not is_hidden and (not is_boilerplate or is_boilerplate_bypassed):
 *                 self.add_text(node.v.text.text)             # <<<<<<<<<<<<<<
 * 
 *         elif node.type == gumbocy.GUMBO_NODE_ELEMENT:
 */
      __pyx_t_3 = __Pyx_PyBytes_FromString(__pyx_v_node->v.text.text); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 313, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      ((struct __pyx_vtabstruct_7gumbocy_HTMLParser *)__pyx_v_self->__pyx_vtab)->add_text(__pyx_v_self, __pyx_t_3);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

      /* "gumbocy.pyx":312
 *                 self.add_hyperlink_text(node.v.text.text)
 * 
 *             if self.analyze_word_groups and not is_head and not is_hidden and (not is_boilerplate or is_boilerplate_bypassed):             # <<<<<<<<<<<<<<
 *                 self.add_text(node.v.text.text)
 * 
 */
    }

    /* "gumbocy.pyx":307
 *             return 0
 * 
 *         if node.type == gumbocy.GUMBO_NODE_TEXT:             # <<<<<<<<<<<<<<
 * 
 *             if (self.analyze_internal_hyperlinks or self.analyze_external_hyperlinks) and is_hyperlink:
 */
    break;

    /* "gumbocy.pyx":315
 *                 self.add_text(node.v.text.text)
 * 
 *         elif node.type == gumbocy.GUMBO_NODE_ELEMENT:             # <<<<<<<<<<<<<<
 * 
 *             tag_n = <int> node.v.element.tag
 */
    case GUMBO_NODE_ELEMENT:

    /* "gumbocy.pyx":317
 *         elif node.type == gumbocy.GUMBO_NODE_ELEMENT:
 * 
 *             tag_n = <int> node.v.element.tag             # <<<<<<<<<<<<<<
 * 
 *             if self.head_only and self.tags_ignore_head_only.count(tag_n):
 */
    __pyx_v_tag_n = ((int)__pyx_v_node->v.element.tag);

    /* "gumbocy.pyx":319
 *             tag_n = <int> node.v.element.tag
 * 
 *             if self.head_only and self.tags_ignore_head_only.count(tag_n):             # <<<<<<<<<<<<<<
 *                 return 1
 * 
 */
    __pyx_t_2 = (__pyx_v_self->head_only != 0);
    if (__pyx_t_2) {
    } else {
      __pyx_t_1 = __pyx_t_2;
      goto __pyx_L15_bool_binop_done;
    }
    __pyx_t_2 = (__pyx_v_self->tags_ignore_head_only.count(__pyx_v_tag_n) != 0);
    __pyx_t_1 = __pyx_t_2;
    __pyx_L15_bool_binop_done:;
    if (__pyx_t_1) {

      /* "gumbocy.pyx":320
 * 
 *             if self.head_only and self.tags_ignore_head_only.count(tag_n):
 *                 return 1             # <<<<<<<<<<<<<<
 * 
 *             if self.tags_ignore.count(tag_n):
 */
      __pyx_r = 1;
      goto __pyx_L0;

      /* "gumbocy.pyx":319
 *             tag_n = <int> node.v.element.tag
 * 
 *             if self.head_only and self.tags_ignore_head_only.count(tag_n):             # <<<<<<<<<<<<<<
 *                 return 1
 * 
 */
    }

    /* "gumbocy.pyx":322
 *                 return 1
 * 
 *             if self.tags_ignore.count(tag_n):             # <<<<<<<<<<<<<<
 *                 return 0
 * 
 */
    __pyx_t_1 = (__pyx_v_self->tags_ignore.count(__pyx_v_tag_n) != 0);
    if (__pyx_t_1) {

      /* "gumbocy.pyx":323
 * 
 *             if self.tags_ignore.count(tag_n):
 *                 return 0             # <<<<<<<<<<<<<<
 * 
 *             tag_name = gumbocy.gumbo_normalized_tagname(node.v.element.tag)
 */
      __pyx_r = 0;
      goto __pyx_L0;

      /* "gumbocy.pyx":322
 *                 return 1
 * 
 *             if self.tags_ignore.count(tag_n):             # <<<<<<<<<<<<<<
 *                 return 0
 * 
 */
    }

    /* "gumbocy.pyx":325
 *                 return 0
 * 
 *             tag_name = gumbocy.gumbo_normalized_tagname(node.v.element.tag)             # <<<<<<<<<<<<<<
 * 
 *             # When we find an unknown tag, find its tag_name in the buffer
 */
    __pyx_v_tag_name = gumbo_normalized_tagname(__pyx_v_node->v.element.tag);

    /* "gumbocy.pyx":328
 * 
 *             # When we find an unknown tag, find its tag_name in the buffer
 *             if tag_name == b"":             # <<<<<<<<<<<<<<
 *                 gsp = node.v.element.original_tag
 *                 gumbo_tag_from_original_text(&gsp)
 */
    __pyx_t_3 = __Pyx_PyBytes_FromString(__pyx_v_tag_name); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 328, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_1 = (__Pyx_PyBytes_Equals(__pyx_t_3, __pyx_kp_b__6, Py_EQ)); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(0, 328, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (__pyx_t_1) {

      /* "gumbocy.pyx":329
 *             # When we find an unknown tag, find its tag_name in the buffer
 *             if tag_name == b"":
 *                 gsp = node.v.element.original_tag             # <<<<<<<<<<<<<<
 *                 gumbo_tag_from_original_text(&gsp)
 *                 py_tag_name = str(gsp.data)[0:gsp.length].lower()  # TODO try to do that only in C!
 */
      __pyx_t_4 = __pyx_v_node->v.element.original_tag;
      __pyx_v_gsp = __pyx_t_4;

      /* "gumbocy.pyx":330
 *             if tag_name == b"":
 *                 gsp = node.v.element.original_tag
 *                 gumbo_tag_from_original_text(&gsp)             # <<<<<<<<<<<<<<
 *                 py_tag_name = str(gsp.data)[0:gsp.length].lower()  # TODO try to do that only in C!
 *                 tag_name = <const char *> py_tag_name
 */
      gumbo_tag_from_original_text((&__pyx_v_gsp));

      /* "gumbocy.pyx":331
 *                 gsp = node.v.element.original_tag
 *                 gumbo_tag_from_original_text(&gsp)
 *                 py_tag_name = str(gsp.data)[0:gsp.length].lower()  # TODO try to do that only in C!             # <<<<<<<<<<<<<<
 *                 tag_name = <const char *> py_tag_name
 * 
 */
      __pyx_t_5 = __Pyx_PyBytes_FromString(__pyx_v_gsp.data); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 331, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_6 = PyTuple_New(1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 331, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_GIVEREF(__pyx_t_5);
      PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_5);
      __pyx_t_5 = 0;
      __pyx_t_5 = __Pyx_PyObject_Call(((PyObject *)(&PyString_Type)), __pyx_t_6, NULL); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 331, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __pyx_t_6 = __Pyx_PyObject_GetSlice(__pyx_t_5, 0, __pyx_v_gsp.length, NULL, NULL, NULL, 1, 1, 1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 331, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_lower); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 331, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __pyx_t_6 = NULL;
      if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_5))) {
        __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_5);
        if (likely(__pyx_t_6)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
          __Pyx_INCREF(__pyx_t_6);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_5, function);
        }
      }
      if (__pyx_t_6) {
        __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_t_6); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 331, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      } else {
        __pyx_t_3 = __Pyx_PyObject_CallNoArg(__pyx_t_5); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 331, __pyx_L1_error)
      }
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __pyx_v_py_tag_name = __pyx_t_3;
      __pyx_t_3 = 0;

      /* "gumbocy.pyx":332
 *                 gumbo_tag_from_original_text(&gsp)
 *                 py_tag_name = str(gsp.data)[0:gsp.length].lower()  # TODO try to do that only in C!
 *                 tag_name = <const char *> py_tag_name             # <<<<<<<<<<<<<<
 * 
 *             attrs = {}
 */
      __pyx_t_7 = __Pyx_PyObject_AsString(__pyx_v_py_tag_name); if (unlikely((!__pyx_t_7) && PyErr_Occurred())) __PYX_ERR(0, 332, __pyx_L1_error)
      __pyx_v_tag_name = ((char const *)__pyx_t_7);

      /* "gumbocy.pyx":328
 * 
 *             # When we find an unknown tag, find its tag_name in the buffer
 *             if tag_name == b"":             # <<<<<<<<<<<<<<
 *                 gsp = node.v.element.original_tag
 *                 gumbo_tag_from_original_text(&gsp)
 */
    }

    /* "gumbocy.pyx":334
 *                 tag_name = <const char *> py_tag_name
 * 
 *             attrs = {}             # <<<<<<<<<<<<<<
 *             if self.has_attributes_whitelist:
 * 
 */
    __pyx_t_3 = PyDict_New(); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 334, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_v_attrs = __pyx_t_3;
    __pyx_t_3 = 0;

    /* "gumbocy.pyx":335
 * 
 *             attrs = {}
 *             if self.has_attributes_whitelist:             # <<<<<<<<<<<<<<
 * 
 *                 attrs = self.get_attributes(node)
 */
    __pyx_t_1 = (__pyx_v_self->has_attributes_whitelist != 0);
    if (__pyx_t_1) {

      /* "gumbocy.pyx":337
 *             if self.has_attributes_whitelist:
 * 
 *                 attrs = self.get_attributes(node)             # <<<<<<<<<<<<<<
 * 
 *                 if attrs == 0:
 */
      __pyx_t_3 = ((struct __pyx_vtabstruct_7gumbocy_HTMLParser *)__pyx_v_self->__pyx_vtab)->get_attributes(__pyx_v_self, __pyx_v_node); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 337, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF_SET(__pyx_v_attrs, __pyx_t_3);
      __pyx_t_3 = 0;

      /* "gumbocy.pyx":339
 *                 attrs = self.get_attributes(node)
 * 
 *                 if attrs == 0:             # <<<<<<<<<<<<<<
 *                     return 0
 * 
 */
      __pyx_t_3 = __Pyx_PyInt_EqObjC(__pyx_v_attrs, __pyx_int_0, 0, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 339, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(0, 339, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (__pyx_t_1) {

        /* "gumbocy.pyx":340
 * 
 *                 if attrs == 0:
 *                     return 0             # <<<<<<<<<<<<<<
 * 
 *                 if attrs:
 */
        __pyx_r = 0;
        goto __pyx_L0;

        /* "gumbocy.pyx":339
 *                 attrs = self.get_attributes(node)
 * 
 *                 if attrs == 0:             # <<<<<<<<<<<<<<
 *                     return 0
 * 
 */
      }

      /* "gumbocy.pyx":342
 *                     return 0
 * 
 *                 if attrs:             # <<<<<<<<<<<<<<
 *                     if self.has_ids_ignore:
 *                         if attrs.get("id") and attrs["id"].lower() in self.ids_ignore:
 */
      __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_attrs); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(0, 342, __pyx_L1_error)
      if (__pyx_t_1) {

        /* "gumbocy.pyx":343
 * 
 *                 if attrs:
 *                     if self.has_ids_ignore:             # <<<<<<<<<<<<<<
 *                         if attrs.get("id") and attrs["id"].lower() in self.ids_ignore:
 *                             return 0
 */
        __pyx_t_1 = (__pyx_v_self->has_ids_ignore != 0);
        if (__pyx_t_1) {

          /* "gumbocy.pyx":344
 *                 if attrs:
 *                     if self.has_ids_ignore:
 *                         if attrs.get("id") and attrs["id"].lower() in self.ids_ignore:             # <<<<<<<<<<<<<<
 *                             return 0
 * 
 */
          __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_attrs, __pyx_n_s_get); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 344, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_3);
          __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_tuple__11, NULL); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 344, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_5);
          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
          __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_5); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 344, __pyx_L1_error)
          __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
          if (__pyx_t_2) {
          } else {
            __pyx_t_1 = __pyx_t_2;
            goto __pyx_L24_bool_binop_done;
          }
          __pyx_t_3 = PyObject_GetItem(__pyx_v_attrs, __pyx_n_s_id); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 344, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_3);
          __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_lower); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 344, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_6);
          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
          __pyx_t_3 = NULL;
          if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_6))) {
            __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_6);
            if (likely(__pyx_t_3)) {
              PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
              __Pyx_INCREF(__pyx_t_3);
              __Pyx_INCREF(function);
              __Pyx_DECREF_SET(__pyx_t_6, function);
            }
          }
          if (__pyx_t_3) {
            __pyx_t_5 = __Pyx_PyObject_CallOneArg(__pyx_t_6, __pyx_t_3); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 344, __pyx_L1_error)
            __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
          } else {
            __pyx_t_5 = __Pyx_PyObject_CallNoArg(__pyx_t_6); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 344, __pyx_L1_error)
          }
          __Pyx_GOTREF(__pyx_t_5);
          __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
          __pyx_t_2 = (__Pyx_PySequence_ContainsTF(__pyx_t_5, __pyx_v_self->ids_ignore, Py_EQ)); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 344, __pyx_L1_error)
          __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
          __pyx_t_8 = (__pyx_t_2 != 0);
          __pyx_t_1 = __pyx_t_8;
          __pyx_L24_bool_binop_done:;
          if (__pyx_t_1) {

            /* "gumbocy.pyx":345
 *                     if self.has_ids_ignore:
 *                         if attrs.get("id") and attrs["id"].lower() in self.ids_ignore:
 *                             return 0             # <<<<<<<<<<<<<<
 * 
 *             if node.v.element.tag == gumbocy.GUMBO_TAG_TITLE:
 */
            __pyx_r = 0;
            goto __pyx_L0;

            /* "gumbocy.pyx":344
 *                 if attrs:
 *                     if self.has_ids_ignore:
 *                         if attrs.get("id") and attrs["id"].lower() in self.ids_ignore:             # <<<<<<<<<<<<<<
 *                             return 0
 * 
 */
          }

          /* "gumbocy.pyx":343
 * 
 *                 if attrs:
 *                     if self.has_ids_ignore:             # <<<<<<<<<<<<<<
 *                         if attrs.get("id") and attrs["id"].lower() in self.ids_ignore:
 *                             return 0
 */
        }

        /* "gumbocy.pyx":342
 *                     return 0
 * 
 *                 if attrs:             # <<<<<<<<<<<<<<
 *                     if self.has_ids_ignore:
 *                         if attrs.get("id") and attrs["id"].lower() in self.ids_ignore:
 */
      }

      /* "gumbocy.pyx":335
 * 
 *             attrs = {}
 *             if self.has_attributes_whitelist:             # <<<<<<<<<<<<<<
 * 
 *                 attrs = self.get_attributes(node)
 */
    }

    /* "gumbocy.pyx":347
 *                             return 0
 * 
 *             if node.v.element.tag == gumbocy.GUMBO_TAG_TITLE:             # <<<<<<<<<<<<<<
 *                 if not self.analysis.get("title"):
 *                     if node.v.element.children.length > 0:
 */
    __pyx_t_1 = ((__pyx_v_node->v.element.tag == GUMBO_TAG_TITLE) != 0);
    if (__pyx_t_1) {

      /* "gumbocy.pyx":348
 * 
 *             if node.v.element.tag == gumbocy.GUMBO_TAG_TITLE:
 *                 if not self.analysis.get("title"):             # <<<<<<<<<<<<<<
 *                     if node.v.element.children.length > 0:
 *                         first_child = <gumbocy.GumboNode *> node.v.element.children.data[0]
 */
      if (unlikely(__pyx_v_self->analysis == Py_None)) {
        PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%s'", "get");
        __PYX_ERR(0, 348, __pyx_L1_error)
      }
      __pyx_t_5 = __Pyx_PyDict_GetItemDefault(__pyx_v_self->analysis, __pyx_n_s_title, Py_None); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 348, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_t_5); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(0, 348, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __pyx_t_8 = ((!__pyx_t_1) != 0);
      if (__pyx_t_8) {

        /* "gumbocy.pyx":349
 *             if node.v.element.tag == gumbocy.GUMBO_TAG_TITLE:
 *                 if not self.analysis.get("title"):
 *                     if node.v.element.children.length > 0:             # <<<<<<<<<<<<<<
 *                         first_child = <gumbocy.GumboNode *> node.v.element.children.data[0]
 *                         if first_child.type == gumbocy.GUMBO_NODE_TEXT:
 */
        __pyx_t_8 = ((__pyx_v_node->v.element.children.length > 0) != 0);
        if (__pyx_t_8) {

          /* "gumbocy.pyx":350
 *                 if not self.analysis.get("title"):
 *                     if node.v.element.children.length > 0:
 *                         first_child = <gumbocy.GumboNode *> node.v.element.children.data[0]             # <<<<<<<<<<<<<<
 *                         if first_child.type == gumbocy.GUMBO_NODE_TEXT:
 *                             self.analysis["title"] = first_child.v.text.text
 */
          __pyx_v_first_child = ((GumboNode *)(__pyx_v_node->v.element.children.data[0]));

          /* "gumbocy.pyx":351
 *                     if node.v.element.children.length > 0:
 *                         first_child = <gumbocy.GumboNode *> node.v.element.children.data[0]
 *                         if first_child.type == gumbocy.GUMBO_NODE_TEXT:             # <<<<<<<<<<<<<<
 *                             self.analysis["title"] = first_child.v.text.text
 *                 return 0
 */
          __pyx_t_8 = ((__pyx_v_first_child->type == GUMBO_NODE_TEXT) != 0);
          if (__pyx_t_8) {

            /* "gumbocy.pyx":352
 *                         first_child = <gumbocy.GumboNode *> node.v.element.children.data[0]
 *                         if first_child.type == gumbocy.GUMBO_NODE_TEXT:
 *                             self.analysis["title"] = first_child.v.text.text             # <<<<<<<<<<<<<<
 *                 return 0
 * 
 */
            __pyx_t_5 = __Pyx_PyBytes_FromString(__pyx_v_first_child->v.text.text); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 352, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_5);
            if (unlikely(__pyx_v_self->analysis == Py_None)) {
              PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
              __PYX_ERR(0, 352, __pyx_L1_error)
            }
            if (unlikely(PyDict_SetItem(__pyx_v_self->analysis, __pyx_n_s_title, __pyx_t_5) < 0)) __PYX_ERR(0, 352, __pyx_L1_error)
            __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

            /* "gumbocy.pyx":351
 *                     if node.v.element.children.length > 0:
 *                         first_child = <gumbocy.GumboNode *> node.v.element.children.data[0]
 *                         if first_child.type == gumbocy.GUMBO_NODE_TEXT:             # <<<<<<<<<<<<<<
 *                             self.analysis["title"] = first_child.v.text.text
 *                 return 0
 */
          }

          /* "gumbocy.pyx":349
 *             if node.v.element.tag == gumbocy.GUMBO_TAG_TITLE:
 *                 if not self.analysis.get("title"):
 *                     if node.v.element.children.length > 0:             # <<<<<<<<<<<<<<
 *                         first_child = <gumbocy.GumboNode *> node.v.element.children.data[0]
 *                         if first_child.type == gumbocy.GUMBO_NODE_TEXT:
 */
        }

        /* "gumbocy.pyx":348
 * 
 *             if node.v.element.tag == gumbocy.GUMBO_TAG_TITLE:
 *                 if not self.analysis.get("title"):             # <<<<<<<<<<<<<<
 *                     if node.v.element.children.length > 0:
 *                         first_child = <gumbocy.GumboNode *> node.v.element.children.data[0]
 */
      }

      /* "gumbocy.pyx":353
 *                         if first_child.type == gumbocy.GUMBO_NODE_TEXT:
 *                             self.analysis["title"] = first_child.v.text.text
 *                 return 0             # <<<<<<<<<<<<<<
 * 
 *             self.current_stack.append(tag_name)
 */
      __pyx_r = 0;
      goto __pyx_L0;

      /* "gumbocy.pyx":347
 *                             return 0
 * 
 *             if node.v.element.tag == gumbocy.GUMBO_TAG_TITLE:             # <<<<<<<<<<<<<<
 *                 if not self.analysis.get("title"):
 *                     if node.v.element.children.length > 0:
 */
    }

    /* "gumbocy.pyx":355
 *                 return 0
 * 
 *             self.current_stack.append(tag_name)             # <<<<<<<<<<<<<<
 * 
 *             if node.v.element.tag == gumbocy.GUMBO_TAG_HEAD:
 */
    if (unlikely(__pyx_v_self->current_stack == Py_None)) {
      PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%s'", "append");
      __PYX_ERR(0, 355, __pyx_L1_error)
    }
    __pyx_t_5 = __Pyx_PyBytes_FromString(__pyx_v_tag_name); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 355, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_9 = __Pyx_PyList_Append(__pyx_v_self->current_stack, __pyx_t_5); if (unlikely(__pyx_t_9 == -1)) __PYX_ERR(0, 355, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

    /* "gumbocy.pyx":357
 *             self.current_stack.append(tag_name)
 * 
 *             if node.v.element.tag == gumbocy.GUMBO_TAG_HEAD:             # <<<<<<<<<<<<<<
 *                 is_head = 1
 * 
 */
    __pyx_t_8 = ((__pyx_v_node->v.element.tag == GUMBO_TAG_HEAD) != 0);
    if (__pyx_t_8) {

      /* "gumbocy.pyx":358
 * 
 *             if node.v.element.tag == gumbocy.GUMBO_TAG_HEAD:
 *                 is_head = 1             # <<<<<<<<<<<<<<
 * 
 *             elif node.v.element.tag == gumbocy.GUMBO_TAG_A:
 */
      __pyx_v_is_head = 1;

      /* "gumbocy.pyx":357
 *             self.current_stack.append(tag_name)
 * 
 *             if node.v.element.tag == gumbocy.GUMBO_TAG_HEAD:             # <<<<<<<<<<<<<<
 *                 is_head = 1
 * 
 */
      goto __pyx_L30;
    }

    /* "gumbocy.pyx":360
 *                 is_head = 1
 * 
 *             elif node.v.element.tag == gumbocy.GUMBO_TAG_A:             # <<<<<<<<<<<<<<
 *                 self.open_hyperlink(attrs)
 *                 is_hyperlink = 1
 */
    __pyx_t_8 = ((__pyx_v_node->v.element.tag == GUMBO_TAG_A) != 0);
    if (__pyx_t_8) {

      /* "gumbocy.pyx":361
 * 
 *             elif node.v.element.tag == gumbocy.GUMBO_TAG_A:
 *                 self.open_hyperlink(attrs)             # <<<<<<<<<<<<<<
 *                 is_hyperlink = 1
 * 
 */
      ((struct __pyx_vtabstruct_7gumbocy_HTMLParser *)__pyx_v_self->__pyx_vtab)->open_hyperlink(__pyx_v_self, __pyx_v_attrs);

      /* "gumbocy.pyx":362
 *             elif node.v.element.tag == gumbocy.GUMBO_TAG_A:
 *                 self.open_hyperlink(attrs)
 *                 is_hyperlink = 1             # <<<<<<<<<<<<<<
 * 
 *             elif node.v.element.tag == gumbocy.GUMBO_TAG_IMG:
 */
      __pyx_v_is_hyperlink = 1;

      /* "gumbocy.pyx":360
 *                 is_head = 1
 * 
 *             elif node.v.element.tag == gumbocy.GUMBO_TAG_A:             # <<<<<<<<<<<<<<
 *                 self.open_hyperlink(attrs)
 *                 is_hyperlink = 1
 */
      goto __pyx_L30;
    }

    /* "gumbocy.pyx":364
 *                 is_hyperlink = 1
 * 
 *             elif node.v.element.tag == gumbocy.GUMBO_TAG_IMG:             # <<<<<<<<<<<<<<
 *                 self.close_word_group()
 *                 if attrs.get("alt"):
 */
    __pyx_t_8 = ((__pyx_v_node->v.element.tag == GUMBO_TAG_IMG) != 0);
    if (__pyx_t_8) {

      /* "gumbocy.pyx":365
 * 
 *             elif node.v.element.tag == gumbocy.GUMBO_TAG_IMG:
 *                 self.close_word_group()             # <<<<<<<<<<<<<<
 *                 if attrs.get("alt"):
 *                     self.add_text(attrs["alt"])
 */
      ((struct __pyx_vtabstruct_7gumbocy_HTMLParser *)__pyx_v_self->__pyx_vtab)->close_word_group(__pyx_v_self);

      /* "gumbocy.pyx":366
 *             elif node.v.element.tag == gumbocy.GUMBO_TAG_IMG:
 *                 self.close_word_group()
 *                 if attrs.get("alt"):             # <<<<<<<<<<<<<<
 *                     self.add_text(attrs["alt"])
 *                     self.close_word_group()
 */
      __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_attrs, __pyx_n_s_get); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 366, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_6 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_tuple__12, NULL); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 366, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __pyx_t_8 = __Pyx_PyObject_IsTrue(__pyx_t_6); if (unlikely(__pyx_t_8 < 0)) __PYX_ERR(0, 366, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      if (__pyx_t_8) {

        /* "gumbocy.pyx":367
 *                 self.close_word_group()
 *                 if attrs.get("alt"):
 *                     self.add_text(attrs["alt"])             # <<<<<<<<<<<<<<
 *                     self.close_word_group()
 * 
 */
        __pyx_t_6 = PyObject_GetItem(__pyx_v_attrs, __pyx_n_s_alt); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 367, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_6);
        ((struct __pyx_vtabstruct_7gumbocy_HTMLParser *)__pyx_v_self->__pyx_vtab)->add_text(__pyx_v_self, __pyx_t_6);
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

        /* "gumbocy.pyx":368
 *                 if attrs.get("alt"):
 *                     self.add_text(attrs["alt"])
 *                     self.close_word_group()             # <<<<<<<<<<<<<<
 * 
 *                 # Text extraction from image filenames disabled for now
 */
        ((struct __pyx_vtabstruct_7gumbocy_HTMLParser *)__pyx_v_self->__pyx_vtab)->close_word_group(__pyx_v_self);

        /* "gumbocy.pyx":366
 *             elif node.v.element.tag == gumbocy.GUMBO_TAG_IMG:
 *                 self.close_word_group()
 *                 if attrs.get("alt"):             # <<<<<<<<<<<<<<
 *                     self.add_text(attrs["alt"])
 *                     self.close_word_group()
 */
      }

      /* "gumbocy.pyx":364
 *                 is_hyperlink = 1
 * 
 *             elif node.v.element.tag == gumbocy.GUMBO_TAG_IMG:             # <<<<<<<<<<<<<<
 *                 self.close_word_group()
 *                 if attrs.get("alt"):
 */
    }
    __pyx_L30:;

    /* "gumbocy.pyx":377
 * 
 * 
 *             if is_head:             # <<<<<<<<<<<<<<
 *                 if node.v.element.tag == gumbocy.GUMBO_TAG_LINK:
 *                     self.analysis.setdefault("head_links", [])
 */
    __pyx_t_8 = (__pyx_v_is_head != 0);
    if (__pyx_t_8) {

      /* "gumbocy.pyx":378
 * 
 *             if is_head:
 *                 if node.v.element.tag == gumbocy.GUMBO_TAG_LINK:             # <<<<<<<<<<<<<<
 *                     self.analysis.setdefault("head_links", [])
 *                     self.analysis["head_links"].append(attrs)
 */
      __pyx_t_8 = ((__pyx_v_node->v.element.tag == GUMBO_TAG_LINK) != 0);
      if (__pyx_t_8) {

        /* "gumbocy.pyx":379
 *             if is_head:
 *                 if node.v.element.tag == gumbocy.GUMBO_TAG_LINK:
 *                     self.analysis.setdefault("head_links", [])             # <<<<<<<<<<<<<<
 *                     self.analysis["head_links"].append(attrs)
 * 
 */
        if (unlikely(__pyx_v_self->analysis == Py_None)) {
          PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%s'", "setdefault");
          __PYX_ERR(0, 379, __pyx_L1_error)
        }
        __pyx_t_6 = PyList_New(0); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 379, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_6);
        __pyx_t_5 = __Pyx_PyDict_SetDefault(__pyx_v_self->analysis, __pyx_n_s_head_links, __pyx_t_6, 1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 379, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

        /* "gumbocy.pyx":380
 *                 if node.v.element.tag == gumbocy.GUMBO_TAG_LINK:
 *                     self.analysis.setdefault("head_links", [])
 *                     self.analysis["head_links"].append(attrs)             # <<<<<<<<<<<<<<
 * 
 *                 elif self.has_metas_whitelist and node.v.element.tag == gumbocy.GUMBO_TAG_META:
 */
        if (unlikely(__pyx_v_self->analysis == Py_None)) {
          PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
          __PYX_ERR(0, 380, __pyx_L1_error)
        }
        __pyx_t_5 = __Pyx_PyDict_GetItem(__pyx_v_self->analysis, __pyx_n_s_head_links); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 380, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        __pyx_t_9 = __Pyx_PyObject_Append(__pyx_t_5, __pyx_v_attrs); if (unlikely(__pyx_t_9 == -1)) __PYX_ERR(0, 380, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

        /* "gumbocy.pyx":378
 * 
 *             if is_head:
 *                 if node.v.element.tag == gumbocy.GUMBO_TAG_LINK:             # <<<<<<<<<<<<<<
 *                     self.analysis.setdefault("head_links", [])
 *                     self.analysis["head_links"].append(attrs)
 */
        goto __pyx_L33;
      }

      /* "gumbocy.pyx":382
 *                     self.analysis["head_links"].append(attrs)
 * 
 *                 elif self.has_metas_whitelist and node.v.element.tag == gumbocy.GUMBO_TAG_META:             # <<<<<<<<<<<<<<
 *                     meta_name = (attrs.get("name") or attrs.get("property") or "").lower()
 *                     if meta_name in self.metas_whitelist:
 */
      __pyx_t_1 = (__pyx_v_self->has_metas_whitelist != 0);
      if (__pyx_t_1) {
      } else {
        __pyx_t_8 = __pyx_t_1;
        goto __pyx_L34_bool_binop_done;
      }
      __pyx_t_1 = ((__pyx_v_node->v.element.tag == GUMBO_TAG_META) != 0);
      __pyx_t_8 = __pyx_t_1;
      __pyx_L34_bool_binop_done:;
      if (__pyx_t_8) {

        /* "gumbocy.pyx":383
 * 
 *                 elif self.has_metas_whitelist and node.v.element.tag == gumbocy.GUMBO_TAG_META:
 *                     meta_name = (attrs.get("name") or attrs.get("property") or "").lower()             # <<<<<<<<<<<<<<
 *                     if meta_name in self.metas_whitelist:
 * 
 */
        __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_attrs, __pyx_n_s_get); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 383, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __pyx_t_10 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_tuple__13, NULL); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 383, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_10);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        __pyx_t_8 = __Pyx_PyObject_IsTrue(__pyx_t_10); if (unlikely(__pyx_t_8 < 0)) __PYX_ERR(0, 383, __pyx_L1_error)
        if (!__pyx_t_8) {
          __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
        } else {
          __Pyx_INCREF(__pyx_t_10);
          __pyx_t_6 = __pyx_t_10;
          __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
          goto __pyx_L36_bool_binop_done;
        }
        __pyx_t_10 = __Pyx_PyObject_GetAttrStr(__pyx_v_attrs, __pyx_n_s_get); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 383, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_10);
        __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_10, __pyx_tuple__14, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 383, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
        __pyx_t_8 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_8 < 0)) __PYX_ERR(0, 383, __pyx_L1_error)
        if (!__pyx_t_8) {
          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        } else {
          __Pyx_INCREF(__pyx_t_3);
          __pyx_t_6 = __pyx_t_3;
          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
          goto __pyx_L36_bool_binop_done;
        }
        __Pyx_INCREF(__pyx_kp_s__6);
        __pyx_t_6 = __pyx_kp_s__6;
        __pyx_L36_bool_binop_done:;
        __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_lower); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 383, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
        __pyx_t_6 = NULL;
        if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_3))) {
          __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_3);
          if (likely(__pyx_t_6)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
            __Pyx_INCREF(__pyx_t_6);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_3, function);
          }
        }
        if (__pyx_t_6) {
          __pyx_t_5 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_6); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 383, __pyx_L1_error)
          __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
        } else {
          __pyx_t_5 = __Pyx_PyObject_CallNoArg(__pyx_t_3); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 383, __pyx_L1_error)
        }
        __Pyx_GOTREF(__pyx_t_5);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        __pyx_v_meta_name = __pyx_t_5;
        __pyx_t_5 = 0;

        /* "gumbocy.pyx":384
 *                 elif self.has_metas_whitelist and node.v.element.tag == gumbocy.GUMBO_TAG_META:
 *                     meta_name = (attrs.get("name") or attrs.get("property") or "").lower()
 *                     if meta_name in self.metas_whitelist:             # <<<<<<<<<<<<<<
 * 
 *                         self.analysis.setdefault("head_metas", {})
 */
        __pyx_t_8 = (__Pyx_PySequence_ContainsTF(__pyx_v_meta_name, __pyx_v_self->metas_whitelist, Py_EQ)); if (unlikely(__pyx_t_8 < 0)) __PYX_ERR(0, 384, __pyx_L1_error)
        __pyx_t_1 = (__pyx_t_8 != 0);
        if (__pyx_t_1) {

          /* "gumbocy.pyx":386
 *                     if meta_name in self.metas_whitelist:
 * 
 *                         self.analysis.setdefault("head_metas", {})             # <<<<<<<<<<<<<<
 *                         self.analysis["head_metas"][meta_name] = (attrs.get("content") or "").strip()
 * 
 */
          if (unlikely(__pyx_v_self->analysis == Py_None)) {
            PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%s'", "setdefault");
            __PYX_ERR(0, 386, __pyx_L1_error)
          }
          __pyx_t_5 = PyDict_New(); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 386, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_5);
          __pyx_t_3 = __Pyx_PyDict_SetDefault(__pyx_v_self->analysis, __pyx_n_s_head_metas, __pyx_t_5, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 386, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_3);
          __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

          /* "gumbocy.pyx":387
 * 
 *                         self.analysis.setdefault("head_metas", {})
 *                         self.analysis["head_metas"][meta_name] = (attrs.get("content") or "").strip()             # <<<<<<<<<<<<<<
 * 
 *                 elif node.v.element.tag == gumbocy.GUMBO_TAG_BASE:
 */
          __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_v_attrs, __pyx_n_s_get); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 387, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_6);
          __pyx_t_10 = __Pyx_PyObject_Call(__pyx_t_6, __pyx_tuple__15, NULL); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 387, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_10);
          __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
          __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_t_10); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(0, 387, __pyx_L1_error)
          if (!__pyx_t_1) {
            __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
          } else {
            __Pyx_INCREF(__pyx_t_10);
            __pyx_t_5 = __pyx_t_10;
            __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
            goto __pyx_L40_bool_binop_done;
          }
          __Pyx_INCREF(__pyx_kp_s__6);
          __pyx_t_5 = __pyx_kp_s__6;
          __pyx_L40_bool_binop_done:;
          __pyx_t_10 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_strip); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 387, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_10);
          __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
          __pyx_t_5 = NULL;
          if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_10))) {
            __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_10);
            if (likely(__pyx_t_5)) {
              PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_10);
              __Pyx_INCREF(__pyx_t_5);
              __Pyx_INCREF(function);
              __Pyx_DECREF_SET(__pyx_t_10, function);
            }
          }
          if (__pyx_t_5) {
            __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_t_10, __pyx_t_5); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 387, __pyx_L1_error)
            __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
          } else {
            __pyx_t_3 = __Pyx_PyObject_CallNoArg(__pyx_t_10); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 387, __pyx_L1_error)
          }
          __Pyx_GOTREF(__pyx_t_3);
          __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
          if (unlikely(__pyx_v_self->analysis == Py_None)) {
            PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
            __PYX_ERR(0, 387, __pyx_L1_error)
          }
          __pyx_t_10 = __Pyx_PyDict_GetItem(__pyx_v_self->analysis, __pyx_n_s_head_metas); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 387, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_10);
          if (unlikely(PyObject_SetItem(__pyx_t_10, __pyx_v_meta_name, __pyx_t_3) < 0)) __PYX_ERR(0, 387, __pyx_L1_error)
          __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

          /* "gumbocy.pyx":384
 *                 elif self.has_metas_whitelist and node.v.element.tag == gumbocy.GUMBO_TAG_META:
 *                     meta_name = (attrs.get("name") or attrs.get("property") or "").lower()
 *                     if meta_name in self.metas_whitelist:             # <<<<<<<<<<<<<<
 * 
 *                         self.analysis.setdefault("head_metas", {})
 */
        }

        /* "gumbocy.pyx":382
 *                     self.analysis["head_links"].append(attrs)
 * 
 *                 elif self.has_metas_whitelist and node.v.element.tag == gumbocy.GUMBO_TAG_META:             # <<<<<<<<<<<<<<
 *                     meta_name = (attrs.get("name") or attrs.get("property") or "").lower()
 *                     if meta_name in self.metas_whitelist:
 */
        goto __pyx_L33;
      }

      /* "gumbocy.pyx":389
 *                         self.analysis["head_metas"][meta_name] = (attrs.get("content") or "").strip()
 * 
 *                 elif node.v.element.tag == gumbocy.GUMBO_TAG_BASE:             # <<<<<<<<<<<<<<
 *                     if attrs.get("href") and "base_url" not in self.analysis:
 *                         self.analysis["base_url"] = attrs["href"]
 */
      __pyx_t_1 = ((__pyx_v_node->v.element.tag == GUMBO_TAG_BASE) != 0);
      if (__pyx_t_1) {

        /* "gumbocy.pyx":390
 * 
 *                 elif node.v.element.tag == gumbocy.GUMBO_TAG_BASE:
 *                     if attrs.get("href") and "base_url" not in self.analysis:             # <<<<<<<<<<<<<<
 *                         self.analysis["base_url"] = attrs["href"]
 * 
 */
        __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_attrs, __pyx_n_s_get); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 390, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __pyx_t_10 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_tuple__16, NULL); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 390, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_10);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        __pyx_t_8 = __Pyx_PyObject_IsTrue(__pyx_t_10); if (unlikely(__pyx_t_8 < 0)) __PYX_ERR(0, 390, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
        if (__pyx_t_8) {
        } else {
          __pyx_t_1 = __pyx_t_8;
          goto __pyx_L43_bool_binop_done;
        }
        if (unlikely(__pyx_v_self->analysis == Py_None)) {
          PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
          __PYX_ERR(0, 390, __pyx_L1_error)
        }
        __pyx_t_8 = (__Pyx_PyDict_ContainsTF(__pyx_n_s_base_url, __pyx_v_self->analysis, Py_NE)); if (unlikely(__pyx_t_8 < 0)) __PYX_ERR(0, 390, __pyx_L1_error)
        __pyx_t_2 = (__pyx_t_8 != 0);
        __pyx_t_1 = __pyx_t_2;
        __pyx_L43_bool_binop_done:;
        if (__pyx_t_1) {

          /* "gumbocy.pyx":391
 *                 elif node.v.element.tag == gumbocy.GUMBO_TAG_BASE:
 *                     if attrs.get("href") and "base_url" not in self.analysis:
 *                         self.analysis["base_url"] = attrs["href"]             # <<<<<<<<<<<<<<
 * 
 *             # TODO is_article
 */
          __pyx_t_10 = PyObject_GetItem(__pyx_v_attrs, __pyx_n_s_href); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 391, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_10);
          if (unlikely(__pyx_v_self->analysis == Py_None)) {
            PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
            __PYX_ERR(0, 391, __pyx_L1_error)
          }
          if (unlikely(PyDict_SetItem(__pyx_v_self->analysis, __pyx_n_s_base_url, __pyx_t_10) < 0)) __PYX_ERR(0, 391, __pyx_L1_error)
          __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;

          /* "gumbocy.pyx":390
 * 
 *                 elif node.v.element.tag == gumbocy.GUMBO_TAG_BASE:
 *                     if attrs.get("href") and "base_url" not in self.analysis:             # <<<<<<<<<<<<<<
 *                         self.analysis["base_url"] = attrs["href"]
 * 
 */
        }

        /* "gumbocy.pyx":389
 *                         self.analysis["head_metas"][meta_name] = (attrs.get("content") or "").strip()
 * 
 *                 elif node.v.element.tag == gumbocy.GUMBO_TAG_BASE:             # <<<<<<<<<<<<<<
 *                     if attrs.get("href") and "base_url" not in self.analysis:
 *                         self.analysis["base_url"] = attrs["href"]
 */
      }
      __pyx_L33:;

      /* "gumbocy.pyx":377
 * 
 * 
 *             if is_head:             # <<<<<<<<<<<<<<
 *                 if node.v.element.tag == gumbocy.GUMBO_TAG_LINK:
 *                     self.analysis.setdefault("head_links", [])
 */
    }

    /* "gumbocy.pyx":395
 *             # TODO is_article
 * 
 *             if not is_hidden:             # <<<<<<<<<<<<<<
 *                 is_hidden = self.guess_node_hidden(node, attrs)
 * 
 */
    __pyx_t_1 = ((!(__pyx_v_is_hidden != 0)) != 0);
    if (__pyx_t_1) {

      /* "gumbocy.pyx":396
 * 
 *             if not is_hidden:
 *                 is_hidden = self.guess_node_hidden(node, attrs)             # <<<<<<<<<<<<<<
 * 
 *             if is_boilerplate and not is_boilerplate_bypassed:
 */
      if (!(likely(PyDict_CheckExact(__pyx_v_attrs))||((__pyx_v_attrs) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "dict", Py_TYPE(__pyx_v_attrs)->tp_name), 0))) __PYX_ERR(0, 396, __pyx_L1_error)
      __pyx_v_is_hidden = ((struct __pyx_vtabstruct_7gumbocy_HTMLParser *)__pyx_v_self->__pyx_vtab)->guess_node_hidden(__pyx_v_self, __pyx_v_node, ((PyObject*)__pyx_v_attrs));

      /* "gumbocy.pyx":395
 *             # TODO is_article
 * 
 *             if not is_hidden:             # <<<<<<<<<<<<<<
 *                 is_hidden = self.guess_node_hidden(node, attrs)
 * 
 */
    }

    /* "gumbocy.pyx":398
 *                 is_hidden = self.guess_node_hidden(node, attrs)
 * 
 *             if is_boilerplate and not is_boilerplate_bypassed:             # <<<<<<<<<<<<<<
 *                 if self.tags_boilerplate_bypass.count(tag_n):
 *                     is_boilerplate_bypassed = True
 */
    __pyx_t_2 = (__pyx_v_is_boilerplate != 0);
    if (__pyx_t_2) {
    } else {
      __pyx_t_1 = __pyx_t_2;
      goto __pyx_L47_bool_binop_done;
    }
    __pyx_t_2 = ((!(__pyx_v_is_boilerplate_bypassed != 0)) != 0);
    __pyx_t_1 = __pyx_t_2;
    __pyx_L47_bool_binop_done:;
    if (__pyx_t_1) {

      /* "gumbocy.pyx":399
 * 
 *             if is_boilerplate and not is_boilerplate_bypassed:
 *                 if self.tags_boilerplate_bypass.count(tag_n):             # <<<<<<<<<<<<<<
 *                     is_boilerplate_bypassed = True
 * 
 */
      __pyx_t_1 = (__pyx_v_self->tags_boilerplate_bypass.count(__pyx_v_tag_n) != 0);
      if (__pyx_t_1) {

        /* "gumbocy.pyx":400
 *             if is_boilerplate and not is_boilerplate_bypassed:
 *                 if self.tags_boilerplate_bypass.count(tag_n):
 *                     is_boilerplate_bypassed = True             # <<<<<<<<<<<<<<
 * 
 *             if not is_boilerplate:
 */
        __pyx_v_is_boilerplate_bypassed = 1;

        /* "gumbocy.pyx":399
 * 
 *             if is_boilerplate and not is_boilerplate_bypassed:
 *                 if self.tags_boilerplate_bypass.count(tag_n):             # <<<<<<<<<<<<<<
 *                     is_boilerplate_bypassed = True
 * 
 */
      }

      /* "gumbocy.pyx":398
 *                 is_hidden = self.guess_node_hidden(node, attrs)
 * 
 *             if is_boilerplate and not is_boilerplate_bypassed:             # <<<<<<<<<<<<<<
 *                 if self.tags_boilerplate_bypass.count(tag_n):
 *                     is_boilerplate_bypassed = True
 */
    }

    /* "gumbocy.pyx":402
 *                     is_boilerplate_bypassed = True
 * 
 *             if not is_boilerplate:             # <<<<<<<<<<<<<<
 *                 is_boilerplate = self.guess_node_boilerplate(node, attrs)
 * 
 */
    __pyx_t_1 = ((!(__pyx_v_is_boilerplate != 0)) != 0);
    if (__pyx_t_1) {

      /* "gumbocy.pyx":403
 * 
 *             if not is_boilerplate:
 *                 is_boilerplate = self.guess_node_boilerplate(node, attrs)             # <<<<<<<<<<<<<<
 * 
 *             # Close the word group
 */
      if (!(likely(PyDict_CheckExact(__pyx_v_attrs))||((__pyx_v_attrs) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "dict", Py_TYPE(__pyx_v_attrs)->tp_name), 0))) __PYX_ERR(0, 403, __pyx_L1_error)
      __pyx_v_is_boilerplate = ((struct __pyx_vtabstruct_7gumbocy_HTMLParser *)__pyx_v_self->__pyx_vtab)->guess_node_boilerplate(__pyx_v_self, __pyx_v_node, ((PyObject*)__pyx_v_attrs));

      /* "gumbocy.pyx":402
 *                     is_boilerplate_bypassed = True
 * 
 *             if not is_boilerplate:             # <<<<<<<<<<<<<<
 *                 is_boilerplate = self.guess_node_boilerplate(node, attrs)
 * 
 */
    }

    /* "gumbocy.pyx":406
 * 
 *             # Close the word group
 *             if self.tags_separators.count(tag_n):             # <<<<<<<<<<<<<<
 *                 self.close_word_group()
 * 
 */
    __pyx_t_1 = (__pyx_v_self->tags_separators.count(__pyx_v_tag_n) != 0);
    if (__pyx_t_1) {

      /* "gumbocy.pyx":407
 *             # Close the word group
 *             if self.tags_separators.count(tag_n):
 *                 self.close_word_group()             # <<<<<<<<<<<<<<
 * 
 *             # Call _traverse_node() recursively for each of the children
 */
      ((struct __pyx_vtabstruct_7gumbocy_HTMLParser *)__pyx_v_self->__pyx_vtab)->close_word_group(__pyx_v_self);

      /* "gumbocy.pyx":406
 * 
 *             # Close the word group
 *             if self.tags_separators.count(tag_n):             # <<<<<<<<<<<<<<
 *                 self.close_word_group()
 * 
 */
    }

    /* "gumbocy.pyx":410
 * 
 *             # Call _traverse_node() recursively for each of the children
 *             for i in range(node.v.element.children.length):             # <<<<<<<<<<<<<<
 *                 child = <gumbocy.GumboNode *>node.v.element.children.data[i]
 *                 if self._traverse_node(level + 1, child, is_head, is_hidden, is_boilerplate, is_boilerplate_bypassed, is_hyperlink) == 1:
 */
    __pyx_t_11 = __pyx_v_node->v.element.children.length;
    for (__pyx_t_12 = 0; __pyx_t_12 < __pyx_t_11; __pyx_t_12+=1) {
      __pyx_v_i = __pyx_t_12;

      /* "gumbocy.pyx":411
 *             # Call _traverse_node() recursively for each of the children
 *             for i in range(node.v.element.children.length):
 *                 child = <gumbocy.GumboNode *>node.v.element.children.data[i]             # <<<<<<<<<<<<<<
 *                 if self._traverse_node(level + 1, child, is_head, is_hidden, is_boilerplate, is_boilerplate_bypassed, is_hyperlink) == 1:
 *                     break
 */
      __pyx_v_child = ((GumboNode *)(__pyx_v_node->v.element.children.data[__pyx_v_i]));

      /* "gumbocy.pyx":412
 *             for i in range(node.v.element.children.length):
 *                 child = <gumbocy.GumboNode *>node.v.element.children.data[i]
 *                 if self._traverse_node(level + 1, child, is_head, is_hidden, is_boilerplate, is_boilerplate_bypassed, is_hyperlink) == 1:             # <<<<<<<<<<<<<<
 *                     break
 * 
 */
      __pyx_t_1 = ((((struct __pyx_vtabstruct_7gumbocy_HTMLParser *)__pyx_v_self->__pyx_vtab)->_traverse_node(__pyx_v_self, (__pyx_v_level + 1), __pyx_v_child, __pyx_v_is_head, __pyx_v_is_hidden, __pyx_v_is_boilerplate, __pyx_v_is_boilerplate_bypassed, __pyx_v_is_hyperlink) == 1) != 0);
      if (__pyx_t_1) {

        /* "gumbocy.pyx":413
 *                 child = <gumbocy.GumboNode *>node.v.element.children.data[i]
 *                 if self._traverse_node(level + 1, child, is_head, is_hidden, is_boilerplate, is_boilerplate_bypassed, is_hyperlink) == 1:
 *                     break             # <<<<<<<<<<<<<<
 * 
 *             # Close the word group
 */
        goto __pyx_L53_break;

        /* "gumbocy.pyx":412
 *             for i in range(node.v.element.children.length):
 *                 child = <gumbocy.GumboNode *>node.v.element.children.data[i]
 *                 if self._traverse_node(level + 1, child, is_head, is_hidden, is_boilerplate, is_boilerplate_bypassed, is_hyperlink) == 1:             # <<<<<<<<<<<<<<
 *                     break
 * 
 */
      }
    }
    __pyx_L53_break:;

    /* "gumbocy.pyx":416
 * 
 *             # Close the word group
 *             if self.tags_separators.count(tag_n):             # <<<<<<<<<<<<<<
 *                 self.close_word_group()
 * 
 */
    __pyx_t_1 = (__pyx_v_self->tags_separators.count(__pyx_v_tag_n) != 0);
    if (__pyx_t_1) {

      /* "gumbocy.pyx":417
 *             # Close the word group
 *             if self.tags_separators.count(tag_n):
 *                 self.close_word_group()             # <<<<<<<<<<<<<<
 * 
 *             self.current_stack.pop()
 */
      ((struct __pyx_vtabstruct_7gumbocy_HTMLParser *)__pyx_v_self->__pyx_vtab)->close_word_group(__pyx_v_self);

      /* "gumbocy.pyx":416
 * 
 *             # Close the word group
 *             if self.tags_separators.count(tag_n):             # <<<<<<<<<<<<<<
 *                 self.close_word_group()
 * 
 */
    }

    /* "gumbocy.pyx":419
 *                 self.close_word_group()
 * 
 *             self.current_stack.pop()             # <<<<<<<<<<<<<<
 * 
 *             if node.v.element.tag == gumbocy.GUMBO_TAG_A:
 */
    if (unlikely(__pyx_v_self->current_stack == Py_None)) {
      PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%s'", "pop");
      __PYX_ERR(0, 419, __pyx_L1_error)
    }
    __pyx_t_10 = __Pyx_PyList_Pop(__pyx_v_self->current_stack); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 419, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_10);
    __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;

    /* "gumbocy.pyx":421
 *             self.current_stack.pop()
 * 
 *             if node.v.element.tag == gumbocy.GUMBO_TAG_A:             # <<<<<<<<<<<<<<
 *                 self.close_hyperlink()
 * 
 */
    __pyx_t_1 = ((__pyx_v_node->v.element.tag == GUMBO_TAG_A) != 0);
    if (__pyx_t_1) {

      /* "gumbocy.pyx":422
 * 
 *             if node.v.element.tag == gumbocy.GUMBO_TAG_A:
 *                 self.close_hyperlink()             # <<<<<<<<<<<<<<
 * 
 *             if node.v.element.tag == gumbocy.GUMBO_TAG_HEAD:
 */
      ((struct __pyx_vtabstruct_7gumbocy_HTMLParser *)__pyx_v_self->__pyx_vtab)->close_hyperlink(__pyx_v_self);

      /* "gumbocy.pyx":421
 *             self.current_stack.pop()
 * 
 *             if node.v.element.tag == gumbocy.GUMBO_TAG_A:             # <<<<<<<<<<<<<<
 *                 self.close_hyperlink()
 * 
 */
    }

    /* "gumbocy.pyx":424
 *                 self.close_hyperlink()
 * 
 *             if node.v.element.tag == gumbocy.GUMBO_TAG_HEAD:             # <<<<<<<<<<<<<<
 *                 if self.head_only:
 *                     return 1
 */
    __pyx_t_1 = ((__pyx_v_node->v.element.tag == GUMBO_TAG_HEAD) != 0);
    if (__pyx_t_1) {

      /* "gumbocy.pyx":425
 * 
 *             if node.v.element.tag == gumbocy.GUMBO_TAG_HEAD:
 *                 if self.head_only:             # <<<<<<<<<<<<<<
 *                     return 1
 * 
 */
      __pyx_t_1 = (__pyx_v_self->head_only != 0);
      if (__pyx_t_1) {

        /* "gumbocy.pyx":426
 *             if node.v.element.tag == gumbocy.GUMBO_TAG_HEAD:
 *                 if self.head_only:
 *                     return 1             # <<<<<<<<<<<<<<
 * 
 *         return 0
 */
        __pyx_r = 1;
        goto __pyx_L0;

        /* "gumbocy.pyx":425
 * 
 *             if node.v.element.tag == gumbocy.GUMBO_TAG_HEAD:
 *                 if self.head_only:             # <<<<<<<<<<<<<<
 *                     return 1
 * 
 */
      }

      /* "gumbocy.pyx":424
 *                 self.close_hyperlink()
 * 
 *             if node.v.element.tag == gumbocy.GUMBO_TAG_HEAD:             # <<<<<<<<<<<<<<
 *                 if self.head_only:
 *                     return 1
 */
    }

    /* "gumbocy.pyx":315
 *                 self.add_text(node.v.text.text)
 * 
 *         elif node.type == gumbocy.GUMBO_NODE_ELEMENT:             # <<<<<<<<<<<<<<
 * 
 *             tag_n = <int> node.v.element.tag
 */
    break;
    default: break;
  }

  /* "gumbocy.pyx":428
 *                     return 1
 * 
 *         return 0             # <<<<<<<<<<<<<<
 * 
 *     def parse(self, char* html):
 */
  __pyx_r = 0;
  goto __pyx_L0;

  /* "gumbocy.pyx":299
 *             self.current_hyperlink = None
 * 
 *     cdef bint _traverse_node(self, int level, gumbocy.GumboNode* node, bint is_head, bint is_hidden, bint is_boilerplate, bint is_boilerplate_bypassed, bint is_hyperlink):             # <<<<<<<<<<<<<<
 *         """ Traverses the node tree. Return 1 to stop at this level """
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_WriteUnraisable("gumbocy.HTMLParser._traverse_node", __pyx_clineno, __pyx_lineno, __pyx_filename, 0, 0);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_py_tag_name);
  __Pyx_XDECREF(__pyx_v_attrs);
  __Pyx_XDECREF(__pyx_v_meta_name);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "gumbocy.pyx":430
 *         return 0
 * 
 *     def parse(self, char* html):             # <<<<<<<<<<<<<<
 *         """ Do the actual parsing of the HTML with gumbo """
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_7gumbocy_10HTMLParser_3parse(PyObject *__pyx_v_self, PyObject *__pyx_arg_html); /*proto*/
static char __pyx_doc_7gumbocy_10HTMLParser_2parse[] = " Do the actual parsing of the HTML with gumbo ";
static PyObject *__pyx_pw_7gumbocy_10HTMLParser_3parse(PyObject *__pyx_v_self, PyObject *__pyx_arg_html) {
  char *__pyx_v_html;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("parse (wrapper)", 0);
  assert(__pyx_arg_html); {
    __pyx_v_html = __Pyx_PyObject_AsString(__pyx_arg_html); if (unlikely((!__pyx_v_html) && PyErr_Occurred())) __PYX_ERR(0, 430, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("gumbocy.HTMLParser.parse", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7gumbocy_10HTMLParser_2parse(((struct __pyx_obj_7gumbocy_HTMLParser *)__pyx_v_self), ((char *)__pyx_v_html));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7gumbocy_10HTMLParser_2parse(struct __pyx_obj_7gumbocy_HTMLParser *__pyx_v_self, char *__pyx_v_html) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("parse", 0);

  /* "gumbocy.pyx":433
 *         """ Do the actual parsing of the HTML with gumbo """
 * 
 *         self.output = gumbocy.gumbo_parse(html)             # <<<<<<<<<<<<<<
 *         self.has_output = 1
 * 
 */
  __pyx_v_self->output = gumbo_parse(__pyx_v_html);

  /* "gumbocy.pyx":434
 * 
 *         self.output = gumbocy.gumbo_parse(html)
 *         self.has_output = 1             # <<<<<<<<<<<<<<
 * 
 *     def analyze(self):
 */
  __pyx_v_self->has_output = 1;

  /* "gumbocy.pyx":430
 *         return 0
 * 
 *     def parse(self, char* html):             # <<<<<<<<<<<<<<
 *         """ Do the actual parsing of the HTML with gumbo """
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "gumbocy.pyx":436
 *         self.has_output = 1
 * 
 *     def analyze(self):             # <<<<<<<<<<<<<<
 *         """ Traverse the parsed tree and return the results """
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_7gumbocy_10HTMLParser_5analyze(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_7gumbocy_10HTMLParser_4analyze[] = " Traverse the parsed tree and return the results ";
static PyObject *__pyx_pw_7gumbocy_10HTMLParser_5analyze(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("analyze (wrapper)", 0);
  __pyx_r = __pyx_pf_7gumbocy_10HTMLParser_4analyze(((struct __pyx_obj_7gumbocy_HTMLParser *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7gumbocy_10HTMLParser_4analyze(struct __pyx_obj_7gumbocy_HTMLParser *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  __Pyx_RefNannySetupContext("analyze", 0);

  /* "gumbocy.pyx":439
 *         """ Traverse the parsed tree and return the results """
 * 
 *         self.analysis = {}             # <<<<<<<<<<<<<<
 * 
 *         if self.analyze_internal_hyperlinks:
 */
  __pyx_t_1 = PyDict_New(); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 439, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->analysis);
  __Pyx_DECREF(__pyx_v_self->analysis);
  __pyx_v_self->analysis = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "gumbocy.pyx":441
 *         self.analysis = {}
 * 
 *         if self.analyze_internal_hyperlinks:             # <<<<<<<<<<<<<<
 *             self.analysis["internal_hyperlinks"] = []
 * 
 */
  __pyx_t_2 = (__pyx_v_self->analyze_internal_hyperlinks != 0);
  if (__pyx_t_2) {

    /* "gumbocy.pyx":442
 * 
 *         if self.analyze_internal_hyperlinks:
 *             self.analysis["internal_hyperlinks"] = []             # <<<<<<<<<<<<<<
 * 
 *         if self.analyze_external_hyperlinks:
 */
    __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 442, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    if (unlikely(__pyx_v_self->analysis == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(0, 442, __pyx_L1_error)
    }
    if (unlikely(PyDict_SetItem(__pyx_v_self->analysis, __pyx_n_s_internal_hyperlinks, __pyx_t_1) < 0)) __PYX_ERR(0, 442, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "gumbocy.pyx":441
 *         self.analysis = {}
 * 
 *         if self.analyze_internal_hyperlinks:             # <<<<<<<<<<<<<<
 *             self.analysis["internal_hyperlinks"] = []
 * 
 */
  }

  /* "gumbocy.pyx":444
 *             self.analysis["internal_hyperlinks"] = []
 * 
 *         if self.analyze_external_hyperlinks:             # <<<<<<<<<<<<<<
 *             self.analysis["external_hyperlinks"] = []
 * 
 */
  __pyx_t_2 = (__pyx_v_self->analyze_external_hyperlinks != 0);
  if (__pyx_t_2) {

    /* "gumbocy.pyx":445
 * 
 *         if self.analyze_external_hyperlinks:
 *             self.analysis["external_hyperlinks"] = []             # <<<<<<<<<<<<<<
 * 
 *         if self.analyze_word_groups:
 */
    __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 445, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    if (unlikely(__pyx_v_self->analysis == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(0, 445, __pyx_L1_error)
    }
    if (unlikely(PyDict_SetItem(__pyx_v_self->analysis, __pyx_n_s_external_hyperlinks, __pyx_t_1) < 0)) __PYX_ERR(0, 445, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "gumbocy.pyx":444
 *             self.analysis["internal_hyperlinks"] = []
 * 
 *         if self.analyze_external_hyperlinks:             # <<<<<<<<<<<<<<
 *             self.analysis["external_hyperlinks"] = []
 * 
 */
  }

  /* "gumbocy.pyx":447
 *             self.analysis["external_hyperlinks"] = []
 * 
 *         if self.analyze_word_groups:             # <<<<<<<<<<<<<<
 *             self.analysis["word_groups"] = []
 * 
 */
  __pyx_t_2 = (__pyx_v_self->analyze_word_groups != 0);
  if (__pyx_t_2) {

    /* "gumbocy.pyx":448
 * 
 *         if self.analyze_word_groups:
 *             self.analysis["word_groups"] = []             # <<<<<<<<<<<<<<
 * 
 *         self.current_stack = []
 */
    __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 448, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    if (unlikely(__pyx_v_self->analysis == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(0, 448, __pyx_L1_error)
    }
    if (unlikely(PyDict_SetItem(__pyx_v_self->analysis, __pyx_n_s_word_groups, __pyx_t_1) < 0)) __PYX_ERR(0, 448, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "gumbocy.pyx":447
 *             self.analysis["external_hyperlinks"] = []
 * 
 *         if self.analyze_word_groups:             # <<<<<<<<<<<<<<
 *             self.analysis["word_groups"] = []
 * 
 */
  }

  /* "gumbocy.pyx":450
 *             self.analysis["word_groups"] = []
 * 
 *         self.current_stack = []             # <<<<<<<<<<<<<<
 *         self.current_word_group = None
 *         self.current_hyperlink = None
 */
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 450, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->current_stack);
  __Pyx_DECREF(__pyx_v_self->current_stack);
  __pyx_v_self->current_stack = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "gumbocy.pyx":451
 * 
 *         self.current_stack = []
 *         self.current_word_group = None             # <<<<<<<<<<<<<<
 *         self.current_hyperlink = None
 * 
 */
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GOTREF(__pyx_v_self->current_word_group);
  __Pyx_DECREF(__pyx_v_self->current_word_group);
  __pyx_v_self->current_word_group = Py_None;

  /* "gumbocy.pyx":452
 *         self.current_stack = []
 *         self.current_word_group = None
 *         self.current_hyperlink = None             # <<<<<<<<<<<<<<
 * 
 *         self._traverse_node(0, self.output.root, 0, 0, 0, 0, 0)
 */
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GOTREF(__pyx_v_self->current_hyperlink);
  __Pyx_DECREF(__pyx_v_self->current_hyperlink);
  __pyx_v_self->current_hyperlink = Py_None;

  /* "gumbocy.pyx":454
 *         self.current_hyperlink = None
 * 
 *         self._traverse_node(0, self.output.root, 0, 0, 0, 0, 0)             # <<<<<<<<<<<<<<
 * 
 *         return self.analysis
 */
  ((struct __pyx_vtabstruct_7gumbocy_HTMLParser *)__pyx_v_self->__pyx_vtab)->_traverse_node(__pyx_v_self, 0, __pyx_v_self->output->root, 0, 0, 0, 0, 0);

  /* "gumbocy.pyx":456
 *         self._traverse_node(0, self.output.root, 0, 0, 0, 0, 0)
 * 
 *         return self.analysis             # <<<<<<<<<<<<<<
 * 
 *     #
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self->analysis);
  __pyx_r = __pyx_v_self->analysis;
  goto __pyx_L0;

  /* "gumbocy.pyx":436
 *         self.has_output = 1
 * 
 *     def analyze(self):             # <<<<<<<<<<<<<<
 *         """ Traverse the parsed tree and return the results """
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("gumbocy.HTMLParser.analyze", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "gumbocy.pyx":462
 *     #
 * 
 *     def listnodes(self):             # <<<<<<<<<<<<<<
 *         """ Return the nodes as a flat list of tuples """
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_7gumbocy_10HTMLParser_7listnodes(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_7gumbocy_10HTMLParser_6listnodes[] = " Return the nodes as a flat list of tuples ";
static PyObject *__pyx_pw_7gumbocy_10HTMLParser_7listnodes(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("listnodes (wrapper)", 0);
  __pyx_r = __pyx_pf_7gumbocy_10HTMLParser_6listnodes(((struct __pyx_obj_7gumbocy_HTMLParser *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7gumbocy_10HTMLParser_6listnodes(struct __pyx_obj_7gumbocy_HTMLParser *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("listnodes", 0);

  /* "gumbocy.pyx":465
 *         """ Return the nodes as a flat list of tuples """
 * 
 *         self.nodes = []             # <<<<<<<<<<<<<<
 * 
 *         self._traverse_node_simple(0, self.output.root)
 */
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 465, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->nodes);
  __Pyx_DECREF(__pyx_v_self->nodes);
  __pyx_v_self->nodes = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "gumbocy.pyx":467
 *         self.nodes = []
 * 
 *         self._traverse_node_simple(0, self.output.root)             # <<<<<<<<<<<<<<
 * 
 *         return self.nodes
 */
  ((struct __pyx_vtabstruct_7gumbocy_HTMLParser *)__pyx_v_self->__pyx_vtab)->_traverse_node_simple(__pyx_v_self, 0, __pyx_v_self->output->root);

  /* "gumbocy.pyx":469
 *         self._traverse_node_simple(0, self.output.root)
 * 
 *         return self.nodes             # <<<<<<<<<<<<<<
 * 
 *     cdef bint _traverse_node_simple(self, int level, gumbocy.GumboNode* node):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self->nodes);
  __pyx_r = __pyx_v_self->nodes;
  goto __pyx_L0;

  /* "gumbocy.pyx":462
 *     #
 * 
 *     def listnodes(self):             # <<<<<<<<<<<<<<
 *         """ Return the nodes as a flat list of tuples """
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("gumbocy.HTMLParser.listnodes", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "gumbocy.pyx":471
 *         return self.nodes
 * 
 *     cdef bint _traverse_node_simple(self, int level, gumbocy.GumboNode* node):             # <<<<<<<<<<<<<<
 *         """ Traverses the node tree. Return 1 to stop at this level """
 * 
 */

static int __pyx_f_7gumbocy_10HTMLParser__traverse_node_simple(struct __pyx_obj_7gumbocy_HTMLParser *__pyx_v_self, int __pyx_v_level, GumboNode *__pyx_v_node) {
  GumboStringPiece __pyx_v_gsp;
  int __pyx_v_tag_n;
  char const *__pyx_v_tag_name;
  PyObject *__pyx_v_py_tag_name = NULL;
  int __pyx_v_has_attrs;
  PyObject *__pyx_v_attrs = NULL;
  unsigned int __pyx_v_i;
  GumboAttribute *__pyx_v_attr;
  PyObject *__pyx_v_attr_name = NULL;
  PyObject *__pyx_v_multiple_value = NULL;
  PyObject *__pyx_v_v = NULL;
  GumboNode *__pyx_v_child;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  int __pyx_t_6;
  GumboStringPiece __pyx_t_7;
  char const *__pyx_t_8;
  unsigned int __pyx_t_9;
  unsigned int __pyx_t_10;
  PyObject *__pyx_t_11 = NULL;
  PyObject *__pyx_t_12 = NULL;
  PyObject *__pyx_t_13 = NULL;
  Py_ssize_t __pyx_t_14;
  PyObject *(*__pyx_t_15)(PyObject *);
  int __pyx_t_16;
  __Pyx_RefNannySetupContext("_traverse_node_simple", 0);

  /* "gumbocy.pyx":476
 *         cdef GumboStringPiece gsp
 * 
 *         if level > self.nesting_limit:             # <<<<<<<<<<<<<<
 *             return 0
 * 
 */
  __pyx_t_1 = ((__pyx_v_level > __pyx_v_self->nesting_limit) != 0);
  if (__pyx_t_1) {

    /* "gumbocy.pyx":477
 * 
 *         if level > self.nesting_limit:
 *             return 0             # <<<<<<<<<<<<<<
 * 
 *         if node.type == gumbocy.GUMBO_NODE_TEXT:
 */
    __pyx_r = 0;
    goto __pyx_L0;

    /* "gumbocy.pyx":476
 *         cdef GumboStringPiece gsp
 * 
 *         if level > self.nesting_limit:             # <<<<<<<<<<<<<<
 *             return 0
 * 
 */
  }

  /* "gumbocy.pyx":479
 *             return 0
 * 
 *         if node.type == gumbocy.GUMBO_NODE_TEXT:             # <<<<<<<<<<<<<<
 *             self.nodes.append((level, None, node.v.text.text))
 * 
 */
  switch (__pyx_v_node->type) {
    case GUMBO_NODE_TEXT:

    /* "gumbocy.pyx":480
 * 
 *         if node.type == gumbocy.GUMBO_NODE_TEXT:
 *             self.nodes.append((level, None, node.v.text.text))             # <<<<<<<<<<<<<<
 * 
 *         elif node.type == gumbocy.GUMBO_NODE_ELEMENT:
 */
    if (unlikely(__pyx_v_self->nodes == Py_None)) {
      PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%s'", "append");
      __PYX_ERR(0, 480, __pyx_L1_error)
    }
    __pyx_t_2 = __Pyx_PyInt_From_int(__pyx_v_level); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 480, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = __Pyx_PyBytes_FromString(__pyx_v_node->v.text.text); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 480, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = PyTuple_New(3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 480, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_2);
    PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_2);
    __Pyx_INCREF(Py_None);
    __Pyx_GIVEREF(Py_None);
    PyTuple_SET_ITEM(__pyx_t_4, 1, Py_None);
    __Pyx_GIVEREF(__pyx_t_3);
    PyTuple_SET_ITEM(__pyx_t_4, 2, __pyx_t_3);
    __pyx_t_2 = 0;
    __pyx_t_3 = 0;
    __pyx_t_5 = __Pyx_PyList_Append(__pyx_v_self->nodes, __pyx_t_4); if (unlikely(__pyx_t_5 == -1)) __PYX_ERR(0, 480, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

    /* "gumbocy.pyx":479
 *             return 0
 * 
 *         if node.type == gumbocy.GUMBO_NODE_TEXT:             # <<<<<<<<<<<<<<
 *             self.nodes.append((level, None, node.v.text.text))
 * 
 */
    break;

    /* "gumbocy.pyx":482
 *             self.nodes.append((level, None, node.v.text.text))
 * 
 *         elif node.type == gumbocy.GUMBO_NODE_ELEMENT:             # <<<<<<<<<<<<<<
 * 
 *             tag_n = <int> node.v.element.tag
 */
    case GUMBO_NODE_ELEMENT:

    /* "gumbocy.pyx":484
 *         elif node.type == gumbocy.GUMBO_NODE_ELEMENT:
 * 
 *             tag_n = <int> node.v.element.tag             # <<<<<<<<<<<<<<
 * 
 *             if self.head_only and self.tags_ignore_head_only.count(tag_n):
 */
    __pyx_v_tag_n = ((int)__pyx_v_node->v.element.tag);

    /* "gumbocy.pyx":486
 *             tag_n = <int> node.v.element.tag
 * 
 *             if self.head_only and self.tags_ignore_head_only.count(tag_n):             # <<<<<<<<<<<<<<
 *                 return 1
 * 
 */
    __pyx_t_6 = (__pyx_v_self->head_only != 0);
    if (__pyx_t_6) {
    } else {
      __pyx_t_1 = __pyx_t_6;
      goto __pyx_L5_bool_binop_done;
    }
    __pyx_t_6 = (__pyx_v_self->tags_ignore_head_only.count(__pyx_v_tag_n) != 0);
    __pyx_t_1 = __pyx_t_6;
    __pyx_L5_bool_binop_done:;
    if (__pyx_t_1) {

      /* "gumbocy.pyx":487
 * 
 *             if self.head_only and self.tags_ignore_head_only.count(tag_n):
 *                 return 1             # <<<<<<<<<<<<<<
 * 
 *             if self.tags_ignore.count(tag_n):
 */
      __pyx_r = 1;
      goto __pyx_L0;

      /* "gumbocy.pyx":486
 *             tag_n = <int> node.v.element.tag
 * 
 *             if self.head_only and self.tags_ignore_head_only.count(tag_n):             # <<<<<<<<<<<<<<
 *                 return 1
 * 
 */
    }

    /* "gumbocy.pyx":489
 *                 return 1
 * 
 *             if self.tags_ignore.count(tag_n):             # <<<<<<<<<<<<<<
 *                 return 0
 * 
 */
    __pyx_t_1 = (__pyx_v_self->tags_ignore.count(__pyx_v_tag_n) != 0);
    if (__pyx_t_1) {

      /* "gumbocy.pyx":490
 * 
 *             if self.tags_ignore.count(tag_n):
 *                 return 0             # <<<<<<<<<<<<<<
 * 
 *             tag_name = gumbocy.gumbo_normalized_tagname(node.v.element.tag)
 */
      __pyx_r = 0;
      goto __pyx_L0;

      /* "gumbocy.pyx":489
 *                 return 1
 * 
 *             if self.tags_ignore.count(tag_n):             # <<<<<<<<<<<<<<
 *                 return 0
 * 
 */
    }

    /* "gumbocy.pyx":492
 *                 return 0
 * 
 *             tag_name = gumbocy.gumbo_normalized_tagname(node.v.element.tag)             # <<<<<<<<<<<<<<
 * 
 *             # When we find an unknown tag, find its tag_name in the buffer
 */
    __pyx_v_tag_name = gumbo_normalized_tagname(__pyx_v_node->v.element.tag);

    /* "gumbocy.pyx":495
 * 
 *             # When we find an unknown tag, find its tag_name in the buffer
 *             if tag_name == b"":             # <<<<<<<<<<<<<<
 *                 gsp = node.v.element.original_tag
 *                 gumbo_tag_from_original_text(&gsp)
 */
    __pyx_t_4 = __Pyx_PyBytes_FromString(__pyx_v_tag_name); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 495, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_1 = (__Pyx_PyBytes_Equals(__pyx_t_4, __pyx_kp_b__6, Py_EQ)); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(0, 495, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (__pyx_t_1) {

      /* "gumbocy.pyx":496
 *             # When we find an unknown tag, find its tag_name in the buffer
 *             if tag_name == b"":
 *                 gsp = node.v.element.original_tag             # <<<<<<<<<<<<<<
 *                 gumbo_tag_from_original_text(&gsp)
 *                 py_tag_name = str(gsp.data)[0:gsp.length].lower()  # TODO try to do that only in C!
 */
      __pyx_t_7 = __pyx_v_node->v.element.original_tag;
      __pyx_v_gsp = __pyx_t_7;

      /* "gumbocy.pyx":497
 *             if tag_name == b"":
 *                 gsp = node.v.element.original_tag
 *                 gumbo_tag_from_original_text(&gsp)             # <<<<<<<<<<<<<<
 *                 py_tag_name = str(gsp.data)[0:gsp.length].lower()  # TODO try to do that only in C!
 *                 tag_name = <const char *> py_tag_name
 */
      gumbo_tag_from_original_text((&__pyx_v_gsp));

      /* "gumbocy.pyx":498
 *                 gsp = node.v.element.original_tag
 *                 gumbo_tag_from_original_text(&gsp)
 *                 py_tag_name = str(gsp.data)[0:gsp.length].lower()  # TODO try to do that only in C!             # <<<<<<<<<<<<<<
 *                 tag_name = <const char *> py_tag_name
 * 
 */
      __pyx_t_3 = __Pyx_PyBytes_FromString(__pyx_v_gsp.data); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 498, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 498, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_GIVEREF(__pyx_t_3);
      PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_3);
      __pyx_t_3 = 0;
      __pyx_t_3 = __Pyx_PyObject_Call(((PyObject *)(&PyString_Type)), __pyx_t_2, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 498, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_t_2 = __Pyx_PyObject_GetSlice(__pyx_t_3, 0, __pyx_v_gsp.length, NULL, NULL, NULL, 1, 1, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 498, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_lower); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 498, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_t_2 = NULL;
      if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_3))) {
        __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_3);
        if (likely(__pyx_t_2)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
          __Pyx_INCREF(__pyx_t_2);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_3, function);
        }
      }
      if (__pyx_t_2) {
        __pyx_t_4 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 498, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      } else {
        __pyx_t_4 = __Pyx_PyObject_CallNoArg(__pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 498, __pyx_L1_error)
      }
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_v_py_tag_name = __pyx_t_4;
      __pyx_t_4 = 0;

      /* "gumbocy.pyx":499
 *                 gumbo_tag_from_original_text(&gsp)
 *                 py_tag_name = str(gsp.data)[0:gsp.length].lower()  # TODO try to do that only in C!
 *                 tag_name = <const char *> py_tag_name             # <<<<<<<<<<<<<<
 * 
 *             if self.has_attributes_whitelist:
 */
      __pyx_t_8 = __Pyx_PyObject_AsString(__pyx_v_py_tag_name); if (unlikely((!__pyx_t_8) && PyErr_Occurred())) __PYX_ERR(0, 499, __pyx_L1_error)
      __pyx_v_tag_name = ((char const *)__pyx_t_8);

      /* "gumbocy.pyx":495
 * 
 *             # When we find an unknown tag, find its tag_name in the buffer
 *             if tag_name == b"":             # <<<<<<<<<<<<<<
 *                 gsp = node.v.element.original_tag
 *                 gumbo_tag_from_original_text(&gsp)
 */
    }

    /* "gumbocy.pyx":501
 *                 tag_name = <const char *> py_tag_name
 * 
 *             if self.has_attributes_whitelist:             # <<<<<<<<<<<<<<
 * 
 *                 # Build a dict with all the whitelisted attributes
 */
    __pyx_t_1 = (__pyx_v_self->has_attributes_whitelist != 0);
    if (__pyx_t_1) {

      /* "gumbocy.pyx":504
 * 
 *                 # Build a dict with all the whitelisted attributes
 *                 has_attrs = False             # <<<<<<<<<<<<<<
 *                 attrs = False
 *                 for i in range(node.v.element.attributes.length):
 */
      __pyx_v_has_attrs = 0;

      /* "gumbocy.pyx":505
 *                 # Build a dict with all the whitelisted attributes
 *                 has_attrs = False
 *                 attrs = False             # <<<<<<<<<<<<<<
 *                 for i in range(node.v.element.attributes.length):
 *                     attr = <gumbocy.GumboAttribute *> node.v.element.attributes.data[i]
 */
      __Pyx_INCREF(Py_False);
      __pyx_v_attrs = Py_False;

      /* "gumbocy.pyx":506
 *                 has_attrs = False
 *                 attrs = False
 *                 for i in range(node.v.element.attributes.length):             # <<<<<<<<<<<<<<
 *                     attr = <gumbocy.GumboAttribute *> node.v.element.attributes.data[i]
 *                     attr_name = str(attr.name)
 */
      __pyx_t_9 = __pyx_v_node->v.element.attributes.length;
      for (__pyx_t_10 = 0; __pyx_t_10 < __pyx_t_9; __pyx_t_10+=1) {
        __pyx_v_i = __pyx_t_10;

        /* "gumbocy.pyx":507
 *                 attrs = False
 *                 for i in range(node.v.element.attributes.length):
 *                     attr = <gumbocy.GumboAttribute *> node.v.element.attributes.data[i]             # <<<<<<<<<<<<<<
 *                     attr_name = str(attr.name)
 *                     if attr_name in self.attributes_whitelist:
 */
        __pyx_v_attr = ((GumboAttribute *)(__pyx_v_node->v.element.attributes.data[__pyx_v_i]));

        /* "gumbocy.pyx":508
 *                 for i in range(node.v.element.attributes.length):
 *                     attr = <gumbocy.GumboAttribute *> node.v.element.attributes.data[i]
 *                     attr_name = str(attr.name)             # <<<<<<<<<<<<<<
 *                     if attr_name in self.attributes_whitelist:
 *                         if attr_name == b"class":
 */
        __pyx_t_4 = __Pyx_PyBytes_FromString(__pyx_v_attr->name); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 508, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 508, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_GIVEREF(__pyx_t_4);
        PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_4);
        __pyx_t_4 = 0;
        __pyx_t_4 = __Pyx_PyObject_Call(((PyObject *)(&PyString_Type)), __pyx_t_3, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 508, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        __Pyx_XDECREF_SET(__pyx_v_attr_name, __pyx_t_4);
        __pyx_t_4 = 0;

        /* "gumbocy.pyx":509
 *                     attr = <gumbocy.GumboAttribute *> node.v.element.attributes.data[i]
 *                     attr_name = str(attr.name)
 *                     if attr_name in self.attributes_whitelist:             # <<<<<<<<<<<<<<
 *                         if attr_name == b"class":
 *                             multiple_value = frozenset(_RE_SPLIT_WHITESPACE.split(attr.value.strip().lower()))
 */
        __pyx_t_1 = (__Pyx_PySequence_ContainsTF(__pyx_v_attr_name, __pyx_v_self->attributes_whitelist, Py_EQ)); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(0, 509, __pyx_L1_error)
        __pyx_t_6 = (__pyx_t_1 != 0);
        if (__pyx_t_6) {

          /* "gumbocy.pyx":510
 *                     attr_name = str(attr.name)
 *                     if attr_name in self.attributes_whitelist:
 *                         if attr_name == b"class":             # <<<<<<<<<<<<<<
 *                             multiple_value = frozenset(_RE_SPLIT_WHITESPACE.split(attr.value.strip().lower()))
 *                             if len(multiple_value):
 */
          __pyx_t_6 = (__Pyx_PyBytes_Equals(__pyx_v_attr_name, __pyx_n_b_class, Py_EQ)); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(0, 510, __pyx_L1_error)
          if (__pyx_t_6) {

            /* "gumbocy.pyx":511
 *                     if attr_name in self.attributes_whitelist:
 *                         if attr_name == b"class":
 *                             multiple_value = frozenset(_RE_SPLIT_WHITESPACE.split(attr.value.strip().lower()))             # <<<<<<<<<<<<<<
 *                             if len(multiple_value):
 *                                 if self.has_classes_ignore:
 */
            __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_RE_SPLIT_WHITESPACE); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 511, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_3);
            __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_split); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 511, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_2);
            __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
            __pyx_t_12 = __Pyx_PyBytes_FromString(__pyx_v_attr->value); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 511, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_12);
            __pyx_t_13 = __Pyx_PyObject_GetAttrStr(__pyx_t_12, __pyx_n_s_strip); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 511, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_13);
            __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
            __pyx_t_12 = NULL;
            if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_13))) {
              __pyx_t_12 = PyMethod_GET_SELF(__pyx_t_13);
              if (likely(__pyx_t_12)) {
                PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_13);
                __Pyx_INCREF(__pyx_t_12);
                __Pyx_INCREF(function);
                __Pyx_DECREF_SET(__pyx_t_13, function);
              }
            }
            if (__pyx_t_12) {
              __pyx_t_11 = __Pyx_PyObject_CallOneArg(__pyx_t_13, __pyx_t_12); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 511, __pyx_L1_error)
              __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
            } else {
              __pyx_t_11 = __Pyx_PyObject_CallNoArg(__pyx_t_13); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 511, __pyx_L1_error)
            }
            __Pyx_GOTREF(__pyx_t_11);
            __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
            __pyx_t_13 = __Pyx_PyObject_GetAttrStr(__pyx_t_11, __pyx_n_s_lower); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 511, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_13);
            __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
            __pyx_t_11 = NULL;
            if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_13))) {
              __pyx_t_11 = PyMethod_GET_SELF(__pyx_t_13);
              if (likely(__pyx_t_11)) {
                PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_13);
                __Pyx_INCREF(__pyx_t_11);
                __Pyx_INCREF(function);
                __Pyx_DECREF_SET(__pyx_t_13, function);
              }
            }
            if (__pyx_t_11) {
              __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_t_13, __pyx_t_11); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 511, __pyx_L1_error)
              __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
            } else {
              __pyx_t_3 = __Pyx_PyObject_CallNoArg(__pyx_t_13); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 511, __pyx_L1_error)
            }
            __Pyx_GOTREF(__pyx_t_3);
            __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
            __pyx_t_13 = NULL;
            if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_2))) {
              __pyx_t_13 = PyMethod_GET_SELF(__pyx_t_2);
              if (likely(__pyx_t_13)) {
                PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
                __Pyx_INCREF(__pyx_t_13);
                __Pyx_INCREF(function);
                __Pyx_DECREF_SET(__pyx_t_2, function);
              }
            }
            if (!__pyx_t_13) {
              __pyx_t_4 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 511, __pyx_L1_error)
              __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
              __Pyx_GOTREF(__pyx_t_4);
            } else {
              __pyx_t_11 = PyTuple_New(1+1); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 511, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_11);
              __Pyx_GIVEREF(__pyx_t_13); PyTuple_SET_ITEM(__pyx_t_11, 0, __pyx_t_13); __pyx_t_13 = NULL;
              __Pyx_GIVEREF(__pyx_t_3);
              PyTuple_SET_ITEM(__pyx_t_11, 0+1, __pyx_t_3);
              __pyx_t_3 = 0;
              __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_11, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 511, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_4);
              __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
            }
            __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
            __pyx_t_2 = __Pyx_PyFrozenSet_New(__pyx_t_4); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 511, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_2);
            __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
            __Pyx_XDECREF_SET(__pyx_v_multiple_value, ((PyObject*)__pyx_t_2));
            __pyx_t_2 = 0;

            /* "gumbocy.pyx":512
 *                         if attr_name == b"class":
 *                             multiple_value = frozenset(_RE_SPLIT_WHITESPACE.split(attr.value.strip().lower()))
 *                             if len(multiple_value):             # <<<<<<<<<<<<<<
 *                                 if self.has_classes_ignore:
 *                                     for v in multiple_value:
 */
            __pyx_t_14 = PySet_GET_SIZE(__pyx_v_multiple_value); if (unlikely(__pyx_t_14 == -1)) __PYX_ERR(0, 512, __pyx_L1_error)
            __pyx_t_6 = (__pyx_t_14 != 0);
            if (__pyx_t_6) {

              /* "gumbocy.pyx":513
 *                             multiple_value = frozenset(_RE_SPLIT_WHITESPACE.split(attr.value.strip().lower()))
 *                             if len(multiple_value):
 *                                 if self.has_classes_ignore:             # <<<<<<<<<<<<<<
 *                                     for v in multiple_value:
 *                                         if v in self.classes_ignore:
 */
              __pyx_t_6 = (__pyx_v_self->has_classes_ignore != 0);
              if (__pyx_t_6) {

                /* "gumbocy.pyx":514
 *                             if len(multiple_value):
 *                                 if self.has_classes_ignore:
 *                                     for v in multiple_value:             # <<<<<<<<<<<<<<
 *                                         if v in self.classes_ignore:
 *                                             return 0
 */
                __pyx_t_2 = PyObject_GetIter(__pyx_v_multiple_value); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 514, __pyx_L1_error)
                __Pyx_GOTREF(__pyx_t_2);
                __pyx_t_15 = Py_TYPE(__pyx_t_2)->tp_iternext; if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 514, __pyx_L1_error)
                for (;;) {
                  {
                    __pyx_t_4 = __pyx_t_15(__pyx_t_2);
                    if (unlikely(!__pyx_t_4)) {
                      PyObject* exc_type = PyErr_Occurred();
                      if (exc_type) {
                        if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
                        else __PYX_ERR(0, 514, __pyx_L1_error)
                      }
                      break;
                    }
                    __Pyx_GOTREF(__pyx_t_4);
                  }
                  __Pyx_XDECREF_SET(__pyx_v_v, __pyx_t_4);
                  __pyx_t_4 = 0;

                  /* "gumbocy.pyx":515
 *                                 if self.has_classes_ignore:
 *                                     for v in multiple_value:
 *                                         if v in self.classes_ignore:             # <<<<<<<<<<<<<<
 *                                             return 0
 * 
 */
                  __pyx_t_6 = (__Pyx_PySequence_ContainsTF(__pyx_v_v, __pyx_v_self->classes_ignore, Py_EQ)); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(0, 515, __pyx_L1_error)
                  __pyx_t_1 = (__pyx_t_6 != 0);
                  if (__pyx_t_1) {

                    /* "gumbocy.pyx":516
 *                                     for v in multiple_value:
 *                                         if v in self.classes_ignore:
 *                                             return 0             # <<<<<<<<<<<<<<
 * 
 *                                 if not has_attrs:
 */
                    __pyx_r = 0;
                    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
                    goto __pyx_L0;

                    /* "gumbocy.pyx":515
 *                                 if self.has_classes_ignore:
 *                                     for v in multiple_value:
 *                                         if v in self.classes_ignore:             # <<<<<<<<<<<<<<
 *                                             return 0
 * 
 */
                  }

                  /* "gumbocy.pyx":514
 *                             if len(multiple_value):
 *                                 if self.has_classes_ignore:
 *                                     for v in multiple_value:             # <<<<<<<<<<<<<<
 *                                         if v in self.classes_ignore:
 *                                             return 0
 */
                }
                __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

                /* "gumbocy.pyx":513
 *                             multiple_value = frozenset(_RE_SPLIT_WHITESPACE.split(attr.value.strip().lower()))
 *                             if len(multiple_value):
 *                                 if self.has_classes_ignore:             # <<<<<<<<<<<<<<
 *                                     for v in multiple_value:
 *                                         if v in self.classes_ignore:
 */
              }

              /* "gumbocy.pyx":518
 *                                             return 0
 * 
 *                                 if not has_attrs:             # <<<<<<<<<<<<<<
 *                                     attrs = {}
 *                                     has_attrs = True
 */
              __pyx_t_1 = ((!(__pyx_v_has_attrs != 0)) != 0);
              if (__pyx_t_1) {

                /* "gumbocy.pyx":519
 * 
 *                                 if not has_attrs:
 *                                     attrs = {}             # <<<<<<<<<<<<<<
 *                                     has_attrs = True
 *                                 attrs[attr_name] = multiple_value
 */
                __pyx_t_2 = PyDict_New(); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 519, __pyx_L1_error)
                __Pyx_GOTREF(__pyx_t_2);
                __Pyx_DECREF_SET(__pyx_v_attrs, __pyx_t_2);
                __pyx_t_2 = 0;

                /* "gumbocy.pyx":520
 *                                 if not has_attrs:
 *                                     attrs = {}
 *                                     has_attrs = True             # <<<<<<<<<<<<<<
 *                                 attrs[attr_name] = multiple_value
 * 
 */
                __pyx_v_has_attrs = 1;

                /* "gumbocy.pyx":518
 *                                             return 0
 * 
 *                                 if not has_attrs:             # <<<<<<<<<<<<<<
 *                                     attrs = {}
 *                                     has_attrs = True
 */
              }

              /* "gumbocy.pyx":521
 *                                     attrs = {}
 *                                     has_attrs = True
 *                                 attrs[attr_name] = multiple_value             # <<<<<<<<<<<<<<
 * 
 *                         else:
 */
              if (unlikely(PyObject_SetItem(__pyx_v_attrs, __pyx_v_attr_name, __pyx_v_multiple_value) < 0)) __PYX_ERR(0, 521, __pyx_L1_error)

              /* "gumbocy.pyx":512
 *                         if attr_name == b"class":
 *                             multiple_value = frozenset(_RE_SPLIT_WHITESPACE.split(attr.value.strip().lower()))
 *                             if len(multiple_value):             # <<<<<<<<<<<<<<
 *                                 if self.has_classes_ignore:
 *                                     for v in multiple_value:
 */
            }

            /* "gumbocy.pyx":510
 *                     attr_name = str(attr.name)
 *                     if attr_name in self.attributes_whitelist:
 *                         if attr_name == b"class":             # <<<<<<<<<<<<<<
 *                             multiple_value = frozenset(_RE_SPLIT_WHITESPACE.split(attr.value.strip().lower()))
 *                             if len(multiple_value):
 */
            goto __pyx_L13;
          }

          /* "gumbocy.pyx":525
 *                         else:
 * 
 *                             if not has_attrs:             # <<<<<<<<<<<<<<
 *                                 attrs = {}
 *                                 has_attrs = True
 */
          /*else*/ {
            __pyx_t_1 = ((!(__pyx_v_has_attrs != 0)) != 0);
            if (__pyx_t_1) {

              /* "gumbocy.pyx":526
 * 
 *                             if not has_attrs:
 *                                 attrs = {}             # <<<<<<<<<<<<<<
 *                                 has_attrs = True
 *                             attrs[attr_name] = attr.value
 */
              __pyx_t_2 = PyDict_New(); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 526, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_2);
              __Pyx_DECREF_SET(__pyx_v_attrs, __pyx_t_2);
              __pyx_t_2 = 0;

              /* "gumbocy.pyx":527
 *                             if not has_attrs:
 *                                 attrs = {}
 *                                 has_attrs = True             # <<<<<<<<<<<<<<
 *                             attrs[attr_name] = attr.value
 * 
 */
              __pyx_v_has_attrs = 1;

              /* "gumbocy.pyx":525
 *                         else:
 * 
 *                             if not has_attrs:             # <<<<<<<<<<<<<<
 *                                 attrs = {}
 *                                 has_attrs = True
 */
            }

            /* "gumbocy.pyx":528
 *                                 attrs = {}
 *                                 has_attrs = True
 *                             attrs[attr_name] = attr.value             # <<<<<<<<<<<<<<
 * 
 *                 if not has_attrs:
 */
            __pyx_t_2 = __Pyx_PyBytes_FromString(__pyx_v_attr->value); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 528, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_2);
            if (unlikely(PyObject_SetItem(__pyx_v_attrs, __pyx_v_attr_name, __pyx_t_2) < 0)) __PYX_ERR(0, 528, __pyx_L1_error)
            __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
          }
          __pyx_L13:;

          /* "gumbocy.pyx":509
 *                     attr = <gumbocy.GumboAttribute *> node.v.element.attributes.data[i]
 *                     attr_name = str(attr.name)
 *                     if attr_name in self.attributes_whitelist:             # <<<<<<<<<<<<<<
 *                         if attr_name == b"class":
 *                             multiple_value = frozenset(_RE_SPLIT_WHITESPACE.split(attr.value.strip().lower()))
 */
        }
      }

      /* "gumbocy.pyx":530
 *                             attrs[attr_name] = attr.value
 * 
 *                 if not has_attrs:             # <<<<<<<<<<<<<<
 *                     self.nodes.append((level, tag_name))
 * 
 */
      __pyx_t_1 = ((!(__pyx_v_has_attrs != 0)) != 0);
      if (__pyx_t_1) {

        /* "gumbocy.pyx":531
 * 
 *                 if not has_attrs:
 *                     self.nodes.append((level, tag_name))             # <<<<<<<<<<<<<<
 * 
 *                 else:
 */
        if (unlikely(__pyx_v_self->nodes == Py_None)) {
          PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%s'", "append");
          __PYX_ERR(0, 531, __pyx_L1_error)
        }
        __pyx_t_2 = __Pyx_PyInt_From_int(__pyx_v_level); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 531, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __pyx_t_4 = __Pyx_PyBytes_FromString(__pyx_v_tag_name); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 531, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __pyx_t_11 = PyTuple_New(2); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 531, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_11);
        __Pyx_GIVEREF(__pyx_t_2);
        PyTuple_SET_ITEM(__pyx_t_11, 0, __pyx_t_2);
        __Pyx_GIVEREF(__pyx_t_4);
        PyTuple_SET_ITEM(__pyx_t_11, 1, __pyx_t_4);
        __pyx_t_2 = 0;
        __pyx_t_4 = 0;
        __pyx_t_5 = __Pyx_PyList_Append(__pyx_v_self->nodes, __pyx_t_11); if (unlikely(__pyx_t_5 == -1)) __PYX_ERR(0, 531, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;

        /* "gumbocy.pyx":530
 *                             attrs[attr_name] = attr.value
 * 
 *                 if not has_attrs:             # <<<<<<<<<<<<<<
 *                     self.nodes.append((level, tag_name))
 * 
 */
        goto __pyx_L21;
      }

      /* "gumbocy.pyx":535
 *                 else:
 * 
 *                     if self.has_ids_ignore:             # <<<<<<<<<<<<<<
 *                         if attrs.get("id") and attrs["id"].lower() in self.ids_ignore:
 *                             return 0
 */
      /*else*/ {
        __pyx_t_1 = (__pyx_v_self->has_ids_ignore != 0);
        if (__pyx_t_1) {

          /* "gumbocy.pyx":536
 * 
 *                     if self.has_ids_ignore:
 *                         if attrs.get("id") and attrs["id"].lower() in self.ids_ignore:             # <<<<<<<<<<<<<<
 *                             return 0
 * 
 */
          __pyx_t_11 = __Pyx_PyObject_GetAttrStr(__pyx_v_attrs, __pyx_n_s_get); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 536, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_11);
          __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_11, __pyx_tuple__17, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 536, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_4);
          __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
          __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(0, 536, __pyx_L1_error)
          __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
          if (__pyx_t_6) {
          } else {
            __pyx_t_1 = __pyx_t_6;
            goto __pyx_L24_bool_binop_done;
          }
          __pyx_t_11 = PyObject_GetItem(__pyx_v_attrs, __pyx_n_s_id); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 536, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_11);
          __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_11, __pyx_n_s_lower); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 536, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_2);
          __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
          __pyx_t_11 = NULL;
          if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_2))) {
            __pyx_t_11 = PyMethod_GET_SELF(__pyx_t_2);
            if (likely(__pyx_t_11)) {
              PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
              __Pyx_INCREF(__pyx_t_11);
              __Pyx_INCREF(function);
              __Pyx_DECREF_SET(__pyx_t_2, function);
            }
          }
          if (__pyx_t_11) {
            __pyx_t_4 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_11); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 536, __pyx_L1_error)
            __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
          } else {
            __pyx_t_4 = __Pyx_PyObject_CallNoArg(__pyx_t_2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 536, __pyx_L1_error)
          }
          __Pyx_GOTREF(__pyx_t_4);
          __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
          __pyx_t_6 = (__Pyx_PySequence_ContainsTF(__pyx_t_4, __pyx_v_self->ids_ignore, Py_EQ)); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(0, 536, __pyx_L1_error)
          __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
          __pyx_t_16 = (__pyx_t_6 != 0);
          __pyx_t_1 = __pyx_t_16;
          __pyx_L24_bool_binop_done:;
          if (__pyx_t_1) {

            /* "gumbocy.pyx":537
 *                     if self.has_ids_ignore:
 *                         if attrs.get("id") and attrs["id"].lower() in self.ids_ignore:
 *                             return 0             # <<<<<<<<<<<<<<
 * 
 *                     self.nodes.append((level, tag_name, attrs))
 */
            __pyx_r = 0;
            goto __pyx_L0;

            /* "gumbocy.pyx":536
 * 
 *                     if self.has_ids_ignore:
 *                         if attrs.get("id") and attrs["id"].lower() in self.ids_ignore:             # <<<<<<<<<<<<<<
 *                             return 0
 * 
 */
          }

          /* "gumbocy.pyx":535
 *                 else:
 * 
 *                     if self.has_ids_ignore:             # <<<<<<<<<<<<<<
 *                         if attrs.get("id") and attrs["id"].lower() in self.ids_ignore:
 *                             return 0
 */
        }

        /* "gumbocy.pyx":539
 *                             return 0
 * 
 *                     self.nodes.append((level, tag_name, attrs))             # <<<<<<<<<<<<<<
 * 
 *             else:
 */
        if (unlikely(__pyx_v_self->nodes == Py_None)) {
          PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%s'", "append");
          __PYX_ERR(0, 539, __pyx_L1_error)
        }
        __pyx_t_4 = __Pyx_PyInt_From_int(__pyx_v_level); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 539, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __pyx_t_2 = __Pyx_PyBytes_FromString(__pyx_v_tag_name); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 539, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __pyx_t_11 = PyTuple_New(3); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 539, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_11);
        __Pyx_GIVEREF(__pyx_t_4);
        PyTuple_SET_ITEM(__pyx_t_11, 0, __pyx_t_4);
        __Pyx_GIVEREF(__pyx_t_2);
        PyTuple_SET_ITEM(__pyx_t_11, 1, __pyx_t_2);
        __Pyx_INCREF(__pyx_v_attrs);
        __Pyx_GIVEREF(__pyx_v_attrs);
        PyTuple_SET_ITEM(__pyx_t_11, 2, __pyx_v_attrs);
        __pyx_t_4 = 0;
        __pyx_t_2 = 0;
        __pyx_t_5 = __Pyx_PyList_Append(__pyx_v_self->nodes, __pyx_t_11); if (unlikely(__pyx_t_5 == -1)) __PYX_ERR(0, 539, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
      }
      __pyx_L21:;

      /* "gumbocy.pyx":501
 *                 tag_name = <const char *> py_tag_name
 * 
 *             if self.has_attributes_whitelist:             # <<<<<<<<<<<<<<
 * 
 *                 # Build a dict with all the whitelisted attributes
 */
      goto __pyx_L9;
    }

    /* "gumbocy.pyx":542
 * 
 *             else:
 *                 self.nodes.append((level, tag_name))             # <<<<<<<<<<<<<<
 * 
 *             # Call _iternode() recursively for each of the children
 */
    /*else*/ {
      if (unlikely(__pyx_v_self->nodes == Py_None)) {
        PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%s'", "append");
        __PYX_ERR(0, 542, __pyx_L1_error)
      }
      __pyx_t_11 = __Pyx_PyInt_From_int(__pyx_v_level); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 542, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_11);
      __pyx_t_2 = __Pyx_PyBytes_FromString(__pyx_v_tag_name); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 542, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_4 = PyTuple_New(2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 542, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_GIVEREF(__pyx_t_11);
      PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_11);
      __Pyx_GIVEREF(__pyx_t_2);
      PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_2);
      __pyx_t_11 = 0;
      __pyx_t_2 = 0;
      __pyx_t_5 = __Pyx_PyList_Append(__pyx_v_self->nodes, __pyx_t_4); if (unlikely(__pyx_t_5 == -1)) __PYX_ERR(0, 542, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    }
    __pyx_L9:;

    /* "gumbocy.pyx":545
 * 
 *             # Call _iternode() recursively for each of the children
 *             for i in range(node.v.element.children.length):             # <<<<<<<<<<<<<<
 *                 child = <gumbocy.GumboNode *>node.v.element.children.data[i]
 *                 if self._traverse_node_simple(level + 1, child) == 1:
 */
    __pyx_t_9 = __pyx_v_node->v.element.children.length;
    for (__pyx_t_10 = 0; __pyx_t_10 < __pyx_t_9; __pyx_t_10+=1) {
      __pyx_v_i = __pyx_t_10;

      /* "gumbocy.pyx":546
 *             # Call _iternode() recursively for each of the children
 *             for i in range(node.v.element.children.length):
 *                 child = <gumbocy.GumboNode *>node.v.element.children.data[i]             # <<<<<<<<<<<<<<
 *                 if self._traverse_node_simple(level + 1, child) == 1:
 *                     break
 */
      __pyx_v_child = ((GumboNode *)(__pyx_v_node->v.element.children.data[__pyx_v_i]));

      /* "gumbocy.pyx":547
 *             for i in range(node.v.element.children.length):
 *                 child = <gumbocy.GumboNode *>node.v.element.children.data[i]
 *                 if self._traverse_node_simple(level + 1, child) == 1:             # <<<<<<<<<<<<<<
 *                     break
 * 
 */
      __pyx_t_1 = ((((struct __pyx_vtabstruct_7gumbocy_HTMLParser *)__pyx_v_self->__pyx_vtab)->_traverse_node_simple(__pyx_v_self, (__pyx_v_level + 1), __pyx_v_child) == 1) != 0);
      if (__pyx_t_1) {

        /* "gumbocy.pyx":548
 *                 child = <gumbocy.GumboNode *>node.v.element.children.data[i]
 *                 if self._traverse_node_simple(level + 1, child) == 1:
 *                     break             # <<<<<<<<<<<<<<
 * 
 *             if node.v.element.tag == gumbocy.GUMBO_TAG_HEAD and self.head_only:
 */
        goto __pyx_L27_break;

        /* "gumbocy.pyx":547
 *             for i in range(node.v.element.children.length):
 *                 child = <gumbocy.GumboNode *>node.v.element.children.data[i]
 *                 if self._traverse_node_simple(level + 1, child) == 1:             # <<<<<<<<<<<<<<
 *                     break
 * 
 */
      }
    }
    __pyx_L27_break:;

    /* "gumbocy.pyx":550
 *                     break
 * 
 *             if node.v.element.tag == gumbocy.GUMBO_TAG_HEAD and self.head_only:             # <<<<<<<<<<<<<<
 *                 return 1
 * 
 */
    __pyx_t_16 = ((__pyx_v_node->v.element.tag == GUMBO_TAG_HEAD) != 0);
    if (__pyx_t_16) {
    } else {
      __pyx_t_1 = __pyx_t_16;
      goto __pyx_L30_bool_binop_done;
    }
    __pyx_t_16 = (__pyx_v_self->head_only != 0);
    __pyx_t_1 = __pyx_t_16;
    __pyx_L30_bool_binop_done:;
    if (__pyx_t_1) {

      /* "gumbocy.pyx":551
 * 
 *             if node.v.element.tag == gumbocy.GUMBO_TAG_HEAD and self.head_only:
 *                 return 1             # <<<<<<<<<<<<<<
 * 
 *         return 0
 */
      __pyx_r = 1;
      goto __pyx_L0;

      /* "gumbocy.pyx":550
 *                     break
 * 
 *             if node.v.element.tag == gumbocy.GUMBO_TAG_HEAD and self.head_only:             # <<<<<<<<<<<<<<
 *                 return 1
 * 
 */
    }

    /* "gumbocy.pyx":482
 *             self.nodes.append((level, None, node.v.text.text))
 * 
 *         elif node.type == gumbocy.GUMBO_NODE_ELEMENT:             # <<<<<<<<<<<<<<
 * 
 *             tag_n = <int> node.v.element.tag
 */
    break;
    default: break;
  }

  /* "gumbocy.pyx":553
 *                 return 1
 * 
 *         return 0             # <<<<<<<<<<<<<<
 * 
 *     def __dealloc__(self):
 */
  __pyx_r = 0;
  goto __pyx_L0;

  /* "gumbocy.pyx":471
 *         return self.nodes
 * 
 *     cdef bint _traverse_node_simple(self, int level, gumbocy.GumboNode* node):             # <<<<<<<<<<<<<<
 *         """ Traverses the node tree. Return 1 to stop at this level """
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_11);
  __Pyx_XDECREF(__pyx_t_12);
  __Pyx_XDECREF(__pyx_t_13);
  __Pyx_WriteUnraisable("gumbocy.HTMLParser._traverse_node_simple", __pyx_clineno, __pyx_lineno, __pyx_filename, 0, 0);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_py_tag_name);
  __Pyx_XDECREF(__pyx_v_attrs);
  __Pyx_XDECREF(__pyx_v_attr_name);
  __Pyx_XDECREF(__pyx_v_multiple_value);
  __Pyx_XDECREF(__pyx_v_v);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "gumbocy.pyx":555
 *         return 0
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         """ Cleanup gumbo memory when the parser is deallocated by Python """
 * 
 */

/* Python wrapper */
static void __pyx_pw_7gumbocy_10HTMLParser_9__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pw_7gumbocy_10HTMLParser_9__dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_pf_7gumbocy_10HTMLParser_8__dealloc__(((struct __pyx_obj_7gumbocy_HTMLParser *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_pf_7gumbocy_10HTMLParser_8__dealloc__(struct __pyx_obj_7gumbocy_HTMLParser *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("__dealloc__", 0);

  /* "gumbocy.pyx":558
 *         """ Cleanup gumbo memory when the parser is deallocated by Python """
 * 
 *         if self.has_output:             # <<<<<<<<<<<<<<
 *             gumbocy.gumbo_destroy_output(&gumbocy.kGumboDefaultOptions, self.output)
 *             self.has_output = 0
 */
  __pyx_t_1 = (__pyx_v_self->has_output != 0);
  if (__pyx_t_1) {

    /* "gumbocy.pyx":559
 * 
 *         if self.has_output:
 *             gumbocy.gumbo_destroy_output(&gumbocy.kGumboDefaultOptions, self.output)             # <<<<<<<<<<<<<<
 *             self.has_output = 0
 */
    gumbo_destroy_output((&kGumboDefaultOptions), __pyx_v_self->output);

    /* "gumbocy.pyx":560
 *         if self.has_output:
 *             gumbocy.gumbo_destroy_output(&gumbocy.kGumboDefaultOptions, self.output)
 *             self.has_output = 0             # <<<<<<<<<<<<<<
 */
    __pyx_v_self->has_output = 0;

    /* "gumbocy.pyx":558
 *         """ Cleanup gumbo memory when the parser is deallocated by Python """
 * 
 *         if self.has_output:             # <<<<<<<<<<<<<<
 *             gumbocy.gumbo_destroy_output(&gumbocy.kGumboDefaultOptions, self.output)
 *             self.has_output = 0
 */
  }

  /* "gumbocy.pyx":555
 *         return 0
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         """ Cleanup gumbo memory when the parser is deallocated by Python """
 * 
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}
static struct __pyx_vtabstruct_7gumbocy_HTMLParser __pyx_vtable_7gumbocy_HTMLParser;

static PyObject *__pyx_tp_new_7gumbocy_HTMLParser(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_7gumbocy_HTMLParser *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_7gumbocy_HTMLParser *)o);
  p->__pyx_vtab = __pyx_vtabptr_7gumbocy_HTMLParser;
  new((void*)&(p->tags_ignore)) std::unordered_set<int> ();
  new((void*)&(p->tags_ignore_head_only)) std::unordered_set<int> ();
  new((void*)&(p->tags_boilerplate)) std::unordered_set<int> ();
  new((void*)&(p->tags_boilerplate_bypass)) std::unordered_set<int> ();
  new((void*)&(p->tags_separators)) std::unordered_set<int> ();
  p->attributes_whitelist = ((PyObject*)Py_None); Py_INCREF(Py_None);
  p->metas_whitelist = ((PyObject*)Py_None); Py_INCREF(Py_None);
  p->classes_ignore = ((PyObject*)Py_None); Py_INCREF(Py_None);
  p->ids_ignore = ((PyObject*)Py_None); Py_INCREF(Py_None);
  p->classes_hidden = ((PyObject*)Py_None); Py_INCREF(Py_None);
  p->ids_hidden = ((PyObject*)Py_None); Py_INCREF(Py_None);
  p->classes_boilerplate = ((PyObject*)Py_None); Py_INCREF(Py_None);
  p->ids_boilerplate = ((PyObject*)Py_None); Py_INCREF(Py_None);
  p->roles_boilerplate = ((PyObject*)Py_None); Py_INCREF(Py_None);
  p->current_stack = ((PyObject*)Py_None); Py_INCREF(Py_None);
  p->analysis = ((PyObject*)Py_None); Py_INCREF(Py_None);
  p->current_word_group = Py_None; Py_INCREF(Py_None);
  p->current_hyperlink = Py_None; Py_INCREF(Py_None);
  p->nodes = ((PyObject*)Py_None); Py_INCREF(Py_None);
  if (unlikely(__pyx_pw_7gumbocy_10HTMLParser_1__cinit__(o, a, k) < 0)) {
    Py_DECREF(o); o = 0;
  }
  return o;
}

static void __pyx_tp_dealloc_7gumbocy_HTMLParser(PyObject *o) {
  struct __pyx_obj_7gumbocy_HTMLParser *p = (struct __pyx_obj_7gumbocy_HTMLParser *)o;
  #if PY_VERSION_HEX >= 0x030400a1
  if (unlikely(Py_TYPE(o)->tp_finalize) && !_PyGC_FINALIZED(o)) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  PyObject_GC_UnTrack(o);
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    ++Py_REFCNT(o);
    __pyx_pw_7gumbocy_10HTMLParser_9__dealloc__(o);
    --Py_REFCNT(o);
    PyErr_Restore(etype, eval, etb);
  }
  __Pyx_call_destructor(p->tags_ignore);
  __Pyx_call_destructor(p->tags_ignore_head_only);
  __Pyx_call_destructor(p->tags_boilerplate);
  __Pyx_call_destructor(p->tags_boilerplate_bypass);
  __Pyx_call_destructor(p->tags_separators);
  Py_CLEAR(p->attributes_whitelist);
  Py_CLEAR(p->metas_whitelist);
  Py_CLEAR(p->classes_ignore);
  Py_CLEAR(p->ids_ignore);
  Py_CLEAR(p->classes_hidden);
  Py_CLEAR(p->ids_hidden);
  Py_CLEAR(p->classes_boilerplate);
  Py_CLEAR(p->ids_boilerplate);
  Py_CLEAR(p->roles_boilerplate);
  Py_CLEAR(p->current_stack);
  Py_CLEAR(p->analysis);
  Py_CLEAR(p->current_word_group);
  Py_CLEAR(p->current_hyperlink);
  Py_CLEAR(p->nodes);
  (*Py_TYPE(o)->tp_free)(o);
}

static int __pyx_tp_traverse_7gumbocy_HTMLParser(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_7gumbocy_HTMLParser *p = (struct __pyx_obj_7gumbocy_HTMLParser *)o;
  if (p->attributes_whitelist) {
    e = (*v)(p->attributes_whitelist, a); if (e) return e;
  }
  if (p->metas_whitelist) {
    e = (*v)(p->metas_whitelist, a); if (e) return e;
  }
  if (p->classes_ignore) {
    e = (*v)(p->classes_ignore, a); if (e) return e;
  }
  if (p->ids_ignore) {
    e = (*v)(p->ids_ignore, a); if (e) return e;
  }
  if (p->classes_hidden) {
    e = (*v)(p->classes_hidden, a); if (e) return e;
  }
  if (p->ids_hidden) {
    e = (*v)(p->ids_hidden, a); if (e) return e;
  }
  if (p->classes_boilerplate) {
    e = (*v)(p->classes_boilerplate, a); if (e) return e;
  }
  if (p->ids_boilerplate) {
    e = (*v)(p->ids_boilerplate, a); if (e) return e;
  }
  if (p->roles_boilerplate) {
    e = (*v)(p->roles_boilerplate, a); if (e) return e;
  }
  if (p->current_stack) {
    e = (*v)(p->current_stack, a); if (e) return e;
  }
  if (p->analysis) {
    e = (*v)(p->analysis, a); if (e) return e;
  }
  if (p->current_word_group) {
    e = (*v)(p->current_word_group, a); if (e) return e;
  }
  if (p->current_hyperlink) {
    e = (*v)(p->current_hyperlink, a); if (e) return e;
  }
  if (p->nodes) {
    e = (*v)(p->nodes, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_7gumbocy_HTMLParser(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_7gumbocy_HTMLParser *p = (struct __pyx_obj_7gumbocy_HTMLParser *)o;
  tmp = ((PyObject*)p->attributes_whitelist);
  p->attributes_whitelist = ((PyObject*)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->metas_whitelist);
  p->metas_whitelist = ((PyObject*)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->classes_ignore);
  p->classes_ignore = ((PyObject*)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->ids_ignore);
  p->ids_ignore = ((PyObject*)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->classes_hidden);
  p->classes_hidden = ((PyObject*)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->ids_hidden);
  p->ids_hidden = ((PyObject*)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->classes_boilerplate);
  p->classes_boilerplate = ((PyObject*)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->ids_boilerplate);
  p->ids_boilerplate = ((PyObject*)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->roles_boilerplate);
  p->roles_boilerplate = ((PyObject*)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->current_stack);
  p->current_stack = ((PyObject*)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->analysis);
  p->analysis = ((PyObject*)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->current_word_group);
  p->current_word_group = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->current_hyperlink);
  p->current_hyperlink = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->nodes);
  p->nodes = ((PyObject*)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyMethodDef __pyx_methods_7gumbocy_HTMLParser[] = {
  {"parse", (PyCFunction)__pyx_pw_7gumbocy_10HTMLParser_3parse, METH_O, __pyx_doc_7gumbocy_10HTMLParser_2parse},
  {"analyze", (PyCFunction)__pyx_pw_7gumbocy_10HTMLParser_5analyze, METH_NOARGS, __pyx_doc_7gumbocy_10HTMLParser_4analyze},
  {"listnodes", (PyCFunction)__pyx_pw_7gumbocy_10HTMLParser_7listnodes, METH_NOARGS, __pyx_doc_7gumbocy_10HTMLParser_6listnodes},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_7gumbocy_HTMLParser = {
  PyVarObject_HEAD_INIT(0, 0)
  "gumbocy.HTMLParser", /*tp_name*/
  sizeof(struct __pyx_obj_7gumbocy_HTMLParser), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_7gumbocy_HTMLParser, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_7gumbocy_HTMLParser, /*tp_traverse*/
  __pyx_tp_clear_7gumbocy_HTMLParser, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_7gumbocy_HTMLParser, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_7gumbocy_HTMLParser, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static PyMethodDef __pyx_methods[] = {
  {0, 0, 0, 0}
};

#if PY_MAJOR_VERSION >= 3
static struct PyModuleDef __pyx_moduledef = {
  #if PY_VERSION_HEX < 0x03020000
    { PyObject_HEAD_INIT(NULL) NULL, 0, NULL },
  #else
    PyModuleDef_HEAD_INIT,
  #endif
    "gumbocy",
    0, /* m_doc */
    -1, /* m_size */
    __pyx_methods /* m_methods */,
    NULL, /* m_reload */
    NULL, /* m_traverse */
    NULL, /* m_clear */
    NULL /* m_free */
};
#endif

static __Pyx_StringTabEntry __pyx_string_tab[] = {
  {&__pyx_kp_s_, __pyx_k_, sizeof(__pyx_k_), 0, 0, 1, 0},
  {&__pyx_kp_s_A_Za_z0_9, __pyx_k_A_Za_z0_9, sizeof(__pyx_k_A_Za_z0_9), 0, 0, 1, 0},
  {&__pyx_n_s_RE_EXTERNAL_HREF, __pyx_k_RE_EXTERNAL_HREF, sizeof(__pyx_k_RE_EXTERNAL_HREF), 0, 0, 1, 1},
  {&__pyx_n_s_RE_SPLIT_WHITESPACE, __pyx_k_RE_SPLIT_WHITESPACE, sizeof(__pyx_k_RE_SPLIT_WHITESPACE), 0, 0, 1, 1},
  {&__pyx_kp_b__6, __pyx_k__6, sizeof(__pyx_k__6), 0, 0, 0, 0},
  {&__pyx_kp_s__6, __pyx_k__6, sizeof(__pyx_k__6), 0, 0, 1, 0},
  {&__pyx_kp_s__9, __pyx_k__9, sizeof(__pyx_k__9), 0, 0, 1, 0},
  {&__pyx_kp_s_about, __pyx_k_about, sizeof(__pyx_k_about), 0, 0, 1, 0},
  {&__pyx_n_s_alt, __pyx_k_alt, sizeof(__pyx_k_alt), 0, 0, 1, 1},
  {&__pyx_n_s_analyze_external_hyperlinks, __pyx_k_analyze_external_hyperlinks, sizeof(__pyx_k_analyze_external_hyperlinks), 0, 0, 1, 1},
  {&__pyx_n_s_analyze_internal_hyperlinks, __pyx_k_analyze_internal_hyperlinks, sizeof(__pyx_k_analyze_internal_hyperlinks), 0, 0, 1, 1},
  {&__pyx_n_s_analyze_word_groups, __pyx_k_analyze_word_groups, sizeof(__pyx_k_analyze_word_groups), 0, 0, 1, 1},
  {&__pyx_n_s_append, __pyx_k_append, sizeof(__pyx_k_append), 0, 0, 1, 1},
  {&__pyx_kp_s_aria_hidden, __pyx_k_aria_hidden, sizeof(__pyx_k_aria_hidden), 0, 0, 1, 0},
  {&__pyx_n_s_article, __pyx_k_article, sizeof(__pyx_k_article), 0, 0, 1, 1},
  {&__pyx_n_s_attributes_whitelist, __pyx_k_attributes_whitelist, sizeof(__pyx_k_attributes_whitelist), 0, 0, 1, 1},
  {&__pyx_n_s_base_url, __pyx_k_base_url, sizeof(__pyx_k_base_url), 0, 0, 1, 1},
  {&__pyx_n_b_class, __pyx_k_class, sizeof(__pyx_k_class), 0, 0, 0, 1},
  {&__pyx_n_s_class, __pyx_k_class, sizeof(__pyx_k_class), 0, 0, 1, 1},
  {&__pyx_n_s_classes_boilerplate, __pyx_k_classes_boilerplate, sizeof(__pyx_k_classes_boilerplate), 0, 0, 1, 1},
  {&__pyx_n_s_classes_hidden, __pyx_k_classes_hidden, sizeof(__pyx_k_classes_hidden), 0, 0, 1, 1},
  {&__pyx_n_s_classes_ignore, __pyx_k_classes_ignore, sizeof(__pyx_k_classes_ignore), 0, 0, 1, 1},
  {&__pyx_n_s_compile, __pyx_k_compile, sizeof(__pyx_k_compile), 0, 0, 1, 1},
  {&__pyx_n_s_content, __pyx_k_content, sizeof(__pyx_k_content), 0, 0, 1, 1},
  {&__pyx_n_s_external_hyperlinks, __pyx_k_external_hyperlinks, sizeof(__pyx_k_external_hyperlinks), 0, 0, 1, 1},
  {&__pyx_n_s_get, __pyx_k_get, sizeof(__pyx_k_get), 0, 0, 1, 1},
  {&__pyx_n_s_head_links, __pyx_k_head_links, sizeof(__pyx_k_head_links), 0, 0, 1, 1},
  {&__pyx_n_s_head_metas, __pyx_k_head_metas, sizeof(__pyx_k_head_metas), 0, 0, 1, 1},
  {&__pyx_n_s_head_only, __pyx_k_head_only, sizeof(__pyx_k_head_only), 0, 0, 1, 1},
  {&__pyx_n_s_hidden, __pyx_k_hidden, sizeof(__pyx_k_hidden), 0, 0, 1, 1},
  {&__pyx_n_s_href, __pyx_k_href, sizeof(__pyx_k_href), 0, 0, 1, 1},
  {&__pyx_kp_s_http, __pyx_k_http, sizeof(__pyx_k_http), 0, 0, 1, 0},
  {&__pyx_kp_s_https, __pyx_k_https, sizeof(__pyx_k_https), 0, 0, 1, 0},
  {&__pyx_n_s_id, __pyx_k_id, sizeof(__pyx_k_id), 0, 0, 1, 1},
  {&__pyx_n_s_ids_boilerplate, __pyx_k_ids_boilerplate, sizeof(__pyx_k_ids_boilerplate), 0, 0, 1, 1},
  {&__pyx_n_s_ids_hidden, __pyx_k_ids_hidden, sizeof(__pyx_k_ids_hidden), 0, 0, 1, 1},
  {&__pyx_n_s_ids_ignore, __pyx_k_ids_ignore, sizeof(__pyx_k_ids_ignore), 0, 0, 1, 1},
  {&__pyx_n_s_import, __pyx_k_import, sizeof(__pyx_k_import), 0, 0, 1, 1},
  {&__pyx_n_s_internal_hyperlinks, __pyx_k_internal_hyperlinks, sizeof(__pyx_k_internal_hyperlinks), 0, 0, 1, 1},
  {&__pyx_kp_s_javascript, __pyx_k_javascript, sizeof(__pyx_k_javascript), 0, 0, 1, 0},
  {&__pyx_n_s_lower, __pyx_k_lower, sizeof(__pyx_k_lower), 0, 0, 1, 1},
  {&__pyx_kp_s_mailto, __pyx_k_mailto, sizeof(__pyx_k_mailto), 0, 0, 1, 0},
  {&__pyx_n_s_main, __pyx_k_main, sizeof(__pyx_k_main), 0, 0, 1, 1},
  {&__pyx_n_s_metas_whitelist, __pyx_k_metas_whitelist, sizeof(__pyx_k_metas_whitelist), 0, 0, 1, 1},
  {&__pyx_n_s_name, __pyx_k_name, sizeof(__pyx_k_name), 0, 0, 1, 1},
  {&__pyx_n_s_nesting_limit, __pyx_k_nesting_limit, sizeof(__pyx_k_nesting_limit), 0, 0, 1, 1},
  {&__pyx_n_s_options, __pyx_k_options, sizeof(__pyx_k_options), 0, 0, 1, 1},
  {&__pyx_n_s_pop, __pyx_k_pop, sizeof(__pyx_k_pop), 0, 0, 1, 1},
  {&__pyx_n_s_property, __pyx_k_property, sizeof(__pyx_k_property), 0, 0, 1, 1},
  {&__pyx_n_s_pyx_vtable, __pyx_k_pyx_vtable, sizeof(__pyx_k_pyx_vtable), 0, 0, 1, 1},
  {&__pyx_n_s_range, __pyx_k_range, sizeof(__pyx_k_range), 0, 0, 1, 1},
  {&__pyx_n_s_re, __pyx_k_re, sizeof(__pyx_k_re), 0, 0, 1, 1},
  {&__pyx_n_s_rel, __pyx_k_rel, sizeof(__pyx_k_rel), 0, 0, 1, 1},
  {&__pyx_n_s_role, __pyx_k_role, sizeof(__pyx_k_role), 0, 0, 1, 1},
  {&__pyx_n_s_roles, __pyx_k_roles, sizeof(__pyx_k_roles), 0, 0, 1, 1},
  {&__pyx_n_s_roles_boilerplate, __pyx_k_roles_boilerplate, sizeof(__pyx_k_roles_boilerplate), 0, 0, 1, 1},
  {&__pyx_kp_s_s, __pyx_k_s, sizeof(__pyx_k_s), 0, 0, 1, 0},
  {&__pyx_n_s_search, __pyx_k_search, sizeof(__pyx_k_search), 0, 0, 1, 1},
  {&__pyx_n_s_setdefault, __pyx_k_setdefault, sizeof(__pyx_k_setdefault), 0, 0, 1, 1},
  {&__pyx_n_s_split, __pyx_k_split, sizeof(__pyx_k_split), 0, 0, 1, 1},
  {&__pyx_n_s_startswith, __pyx_k_startswith, sizeof(__pyx_k_startswith), 0, 0, 1, 1},
  {&__pyx_n_s_strip, __pyx_k_strip, sizeof(__pyx_k_strip), 0, 0, 1, 1},
  {&__pyx_n_s_style, __pyx_k_style, sizeof(__pyx_k_style), 0, 0, 1, 1},
  {&__pyx_n_s_tags_boilerplate, __pyx_k_tags_boilerplate, sizeof(__pyx_k_tags_boilerplate), 0, 0, 1, 1},
  {&__pyx_n_s_tags_boilerplate_bypass, __pyx_k_tags_boilerplate_bypass, sizeof(__pyx_k_tags_boilerplate_bypass), 0, 0, 1, 1},
  {&__pyx_n_s_tags_ignore, __pyx_k_tags_ignore, sizeof(__pyx_k_tags_ignore), 0, 0, 1, 1},
  {&__pyx_n_s_tags_separators, __pyx_k_tags_separators, sizeof(__pyx_k_tags_separators), 0, 0, 1, 1},
  {&__pyx_n_s_test, __pyx_k_test, sizeof(__pyx_k_test), 0, 0, 1, 1},
  {&__pyx_n_s_title, __pyx_k_title, sizeof(__pyx_k_title), 0, 0, 1, 1},
  {&__pyx_n_s_true, __pyx_k_true, sizeof(__pyx_k_true), 0, 0, 1, 1},
  {&__pyx_n_s_word_groups, __pyx_k_word_groups, sizeof(__pyx_k_word_groups), 0, 0, 1, 1},
  {0, 0, 0, 0, 0, 0, 0}
};
static int __Pyx_InitCachedBuiltins(void) {
  __pyx_builtin_range = __Pyx_GetBuiltinName(__pyx_n_s_range); if (!__pyx_builtin_range) __PYX_ERR(0, 224, __pyx_L1_error)
  return 0;
  __pyx_L1_error:;
  return -1;
}

static int __Pyx_InitCachedConstants(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_InitCachedConstants", 0);

  /* "gumbocy.pyx":274
 * 
 *     cdef void open_hyperlink(self, attrs):
 *         href = attrs.get("href")             # <<<<<<<<<<<<<<
 *         if not href:
 *             return
 */
  __pyx_tuple__2 = PyTuple_Pack(1, __pyx_n_s_href); if (unlikely(!__pyx_tuple__2)) __PYX_ERR(0, 274, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__2);
  __Pyx_GIVEREF(__pyx_tuple__2);

  /* "gumbocy.pyx":278
 *             return
 * 
 *         if href.startswith("javascript:") or href.startswith("mailto:") or href.startswith("about:"):             # <<<<<<<<<<<<<<
 *             return
 * 
 */
  __pyx_tuple__3 = PyTuple_Pack(1, __pyx_kp_s_javascript); if (unlikely(!__pyx_tuple__3)) __PYX_ERR(0, 278, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__3);
  __Pyx_GIVEREF(__pyx_tuple__3);
  __pyx_tuple__4 = PyTuple_Pack(1, __pyx_kp_s_mailto); if (unlikely(!__pyx_tuple__4)) __PYX_ERR(0, 278, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__4);
  __Pyx_GIVEREF(__pyx_tuple__4);
  __pyx_tuple__5 = PyTuple_Pack(1, __pyx_kp_s_about); if (unlikely(!__pyx_tuple__5)) __PYX_ERR(0, 278, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__5);
  __Pyx_GIVEREF(__pyx_tuple__5);

  /* "gumbocy.pyx":291
 *             if _RE_EXTERNAL_HREF.search(href):
 *                 if self.analyze_external_hyperlinks:
 *                     if href.startswith("http://") or href.startswith("https://") or href.startswith("//"):             # <<<<<<<<<<<<<<
 *                         self.analysis["external_hyperlinks"].append(tuple(self.current_hyperlink))
 *             else:
 */
  __pyx_tuple__7 = PyTuple_Pack(1, __pyx_kp_s_http); if (unlikely(!__pyx_tuple__7)) __PYX_ERR(0, 291, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__7);
  __Pyx_GIVEREF(__pyx_tuple__7);
  __pyx_tuple__8 = PyTuple_Pack(1, __pyx_kp_s_https); if (unlikely(!__pyx_tuple__8)) __PYX_ERR(0, 291, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__8);
  __Pyx_GIVEREF(__pyx_tuple__8);
  __pyx_tuple__10 = PyTuple_Pack(1, __pyx_kp_s__9); if (unlikely(!__pyx_tuple__10)) __PYX_ERR(0, 291, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__10);
  __Pyx_GIVEREF(__pyx_tuple__10);

  /* "gumbocy.pyx":344
 *                 if attrs:
 *                     if self.has_ids_ignore:
 *                         if attrs.get("id") and attrs["id"].lower() in self.ids_ignore:             # <<<<<<<<<<<<<<
 *                             return 0
 * 
 */
  __pyx_tuple__11 = PyTuple_Pack(1, __pyx_n_s_id); if (unlikely(!__pyx_tuple__11)) __PYX_ERR(0, 344, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__11);
  __Pyx_GIVEREF(__pyx_tuple__11);

  /* "gumbocy.pyx":366
 *             elif node.v.element.tag == gumbocy.GUMBO_TAG_IMG:
 *                 self.close_word_group()
 *                 if attrs.get("alt"):             # <<<<<<<<<<<<<<
 *                     self.add_text(attrs["alt"])
 *                     self.close_word_group()
 */
  __pyx_tuple__12 = PyTuple_Pack(1, __pyx_n_s_alt); if (unlikely(!__pyx_tuple__12)) __PYX_ERR(0, 366, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__12);
  __Pyx_GIVEREF(__pyx_tuple__12);

  /* "gumbocy.pyx":383
 * 
 *                 elif self.has_metas_whitelist and node.v.element.tag == gumbocy.GUMBO_TAG_META:
 *                     meta_name = (attrs.get("name") or attrs.get("property") or "").lower()             # <<<<<<<<<<<<<<
 *                     if meta_name in self.metas_whitelist:
 * 
 */
  __pyx_tuple__13 = PyTuple_Pack(1, __pyx_n_s_name); if (unlikely(!__pyx_tuple__13)) __PYX_ERR(0, 383, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__13);
  __Pyx_GIVEREF(__pyx_tuple__13);
  __pyx_tuple__14 = PyTuple_Pack(1, __pyx_n_s_property); if (unlikely(!__pyx_tuple__14)) __PYX_ERR(0, 383, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__14);
  __Pyx_GIVEREF(__pyx_tuple__14);

  /* "gumbocy.pyx":387
 * 
 *                         self.analysis.setdefault("head_metas", {})
 *                         self.analysis["head_metas"][meta_name] = (attrs.get("content") or "").strip()             # <<<<<<<<<<<<<<
 * 
 *                 elif node.v.element.tag == gumbocy.GUMBO_TAG_BASE:
 */
  __pyx_tuple__15 = PyTuple_Pack(1, __pyx_n_s_content); if (unlikely(!__pyx_tuple__15)) __PYX_ERR(0, 387, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__15);
  __Pyx_GIVEREF(__pyx_tuple__15);

  /* "gumbocy.pyx":390
 * 
 *                 elif node.v.element.tag == gumbocy.GUMBO_TAG_BASE:
 *                     if attrs.get("href") and "base_url" not in self.analysis:             # <<<<<<<<<<<<<<
 *                         self.analysis["base_url"] = attrs["href"]
 * 
 */
  __pyx_tuple__16 = PyTuple_Pack(1, __pyx_n_s_href); if (unlikely(!__pyx_tuple__16)) __PYX_ERR(0, 390, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__16);
  __Pyx_GIVEREF(__pyx_tuple__16);

  /* "gumbocy.pyx":536
 * 
 *                     if self.has_ids_ignore:
 *                         if attrs.get("id") and attrs["id"].lower() in self.ids_ignore:             # <<<<<<<<<<<<<<
 *                             return 0
 * 
 */
  __pyx_tuple__17 = PyTuple_Pack(1, __pyx_n_s_id); if (unlikely(!__pyx_tuple__17)) __PYX_ERR(0, 536, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__17);
  __Pyx_GIVEREF(__pyx_tuple__17);

  /* "gumbocy.pyx":20
 * cdef re2cy.RE2 *_RE2_SEARCH_STYLE_HIDDEN = new re2cy.RE2(r"(display\s*\:\s*none)|(visibility\s*\:\s*hidden)")
 * 
 * _RE_EXTERNAL_HREF = re.compile(r"^([A-Za-z0-9\+\.\-]+\:)?\/\/")             # <<<<<<<<<<<<<<
 * _RE_SPLIT_WHITESPACE = re.compile(r"\s+")
 * 
 */
  __pyx_tuple__18 = PyTuple_Pack(1, __pyx_kp_s_A_Za_z0_9); if (unlikely(!__pyx_tuple__18)) __PYX_ERR(0, 20, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__18);
  __Pyx_GIVEREF(__pyx_tuple__18);

  /* "gumbocy.pyx":21
 * 
 * _RE_EXTERNAL_HREF = re.compile(r"^([A-Za-z0-9\+\.\-]+\:)?\/\/")
 * _RE_SPLIT_WHITESPACE = re.compile(r"\s+")             # <<<<<<<<<<<<<<
 * 
 * cdef class HTMLParser:
 */
  __pyx_tuple__19 = PyTuple_Pack(1, __pyx_kp_s_s); if (unlikely(!__pyx_tuple__19)) __PYX_ERR(0, 21, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__19);
  __Pyx_GIVEREF(__pyx_tuple__19);
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_RefNannyFinishContext();
  return -1;
}

static int __Pyx_InitGlobals(void) {
  __pyx_umethod_PyList_Type_pop.type = (PyObject*)&PyList_Type;
  if (__Pyx_InitStrings(__pyx_string_tab) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  __pyx_int_0 = PyInt_FromLong(0); if (unlikely(!__pyx_int_0)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_999 = PyInt_FromLong(999); if (unlikely(!__pyx_int_999)) __PYX_ERR(0, 1, __pyx_L1_error)
  return 0;
  __pyx_L1_error:;
  return -1;
}

#if PY_MAJOR_VERSION < 3
PyMODINIT_FUNC initgumbocy(void); /*proto*/
PyMODINIT_FUNC initgumbocy(void)
#else
PyMODINIT_FUNC PyInit_gumbocy(void); /*proto*/
PyMODINIT_FUNC PyInit_gumbocy(void)
#endif
{
  PyObject *__pyx_t_1 = NULL;
  std::vector<__pyx_t_5re2cy_ArgPtr>  *__pyx_t_2;
  re2::RE2 *__pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  __Pyx_RefNannyDeclarations
  #if CYTHON_REFNANNY
  __Pyx_RefNanny = __Pyx_RefNannyImportAPI("refnanny");
  if (!__Pyx_RefNanny) {
      PyErr_Clear();
      __Pyx_RefNanny = __Pyx_RefNannyImportAPI("Cython.Runtime.refnanny");
      if (!__Pyx_RefNanny)
          Py_FatalError("failed to import 'refnanny' module");
  }
  #endif
  __Pyx_RefNannySetupContext("PyMODINIT_FUNC PyInit_gumbocy(void)", 0);
  if (__Pyx_check_binary_version() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_empty_tuple = PyTuple_New(0); if (unlikely(!__pyx_empty_tuple)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_empty_bytes = PyBytes_FromStringAndSize("", 0); if (unlikely(!__pyx_empty_bytes)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_empty_unicode = PyUnicode_FromStringAndSize("", 0); if (unlikely(!__pyx_empty_unicode)) __PYX_ERR(0, 1, __pyx_L1_error)
  #ifdef __Pyx_CyFunction_USED
  if (__pyx_CyFunction_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_FusedFunction_USED
  if (__pyx_FusedFunction_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_Coroutine_USED
  if (__pyx_Coroutine_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_Generator_USED
  if (__pyx_Generator_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_StopAsyncIteration_USED
  if (__pyx_StopAsyncIteration_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  /*--- Library function declarations ---*/
  /*--- Threads initialization code ---*/
  #if defined(__PYX_FORCE_INIT_THREADS) && __PYX_FORCE_INIT_THREADS
  #ifdef WITH_THREAD /* Python build with threading support? */
  PyEval_InitThreads();
  #endif
  #endif
  /*--- Module creation code ---*/
  #if PY_MAJOR_VERSION < 3
  __pyx_m = Py_InitModule4("gumbocy", __pyx_methods, 0, 0, PYTHON_API_VERSION); Py_XINCREF(__pyx_m);
  #else
  __pyx_m = PyModule_Create(&__pyx_moduledef);
  #endif
  if (unlikely(!__pyx_m)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_d = PyModule_GetDict(__pyx_m); if (unlikely(!__pyx_d)) __PYX_ERR(0, 1, __pyx_L1_error)
  Py_INCREF(__pyx_d);
  __pyx_b = PyImport_AddModule(__Pyx_BUILTIN_MODULE_NAME); if (unlikely(!__pyx_b)) __PYX_ERR(0, 1, __pyx_L1_error)
  #if CYTHON_COMPILING_IN_PYPY
  Py_INCREF(__pyx_b);
  #endif
  if (PyObject_SetAttrString(__pyx_m, "__builtins__", __pyx_b) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  /*--- Initialize various global constants etc. ---*/
  if (__Pyx_InitGlobals() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #if PY_MAJOR_VERSION < 3 && (__PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT)
  if (__Pyx_init_sys_getdefaultencoding_params() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  if (__pyx_module_is_main_gumbocy) {
    if (PyObject_SetAttrString(__pyx_m, "__name__", __pyx_n_s_main) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  }
  #if PY_MAJOR_VERSION >= 3
  {
    PyObject *modules = PyImport_GetModuleDict(); if (unlikely(!modules)) __PYX_ERR(0, 1, __pyx_L1_error)
    if (!PyDict_GetItemString(modules, "gumbocy")) {
      if (unlikely(PyDict_SetItemString(modules, "gumbocy", __pyx_m) < 0)) __PYX_ERR(0, 1, __pyx_L1_error)
    }
  }
  #endif
  /*--- Builtin init code ---*/
  if (__Pyx_InitCachedBuiltins() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  /*--- Constants init code ---*/
  if (__Pyx_InitCachedConstants() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  /*--- Global init code ---*/
  /*--- Variable export code ---*/
  /*--- Function export code ---*/
  /*--- Type init code ---*/
  __pyx_vtabptr_7gumbocy_HTMLParser = &__pyx_vtable_7gumbocy_HTMLParser;
  __pyx_vtable_7gumbocy_HTMLParser.guess_node_hidden = (int (*)(struct __pyx_obj_7gumbocy_HTMLParser *, GumboNode *, PyObject *))__pyx_f_7gumbocy_10HTMLParser_guess_node_hidden;
  __pyx_vtable_7gumbocy_HTMLParser.guess_node_boilerplate = (int (*)(struct __pyx_obj_7gumbocy_HTMLParser *, GumboNode *, PyObject *))__pyx_f_7gumbocy_10HTMLParser_guess_node_boilerplate;
  __pyx_vtable_7gumbocy_HTMLParser.get_attributes = (PyObject *(*)(struct __pyx_obj_7gumbocy_HTMLParser *, GumboNode *))__pyx_f_7gumbocy_10HTMLParser_get_attributes;
  __pyx_vtable_7gumbocy_HTMLParser.close_word_group = (void (*)(struct __pyx_obj_7gumbocy_HTMLParser *))__pyx_f_7gumbocy_10HTMLParser_close_word_group;
  __pyx_vtable_7gumbocy_HTMLParser.add_text = (void (*)(struct __pyx_obj_7gumbocy_HTMLParser *, PyObject *))__pyx_f_7gumbocy_10HTMLParser_add_text;
  __pyx_vtable_7gumbocy_HTMLParser.add_hyperlink_text = (void (*)(struct __pyx_obj_7gumbocy_HTMLParser *, PyObject *))__pyx_f_7gumbocy_10HTMLParser_add_hyperlink_text;
  __pyx_vtable_7gumbocy_HTMLParser.open_hyperlink = (void (*)(struct __pyx_obj_7gumbocy_HTMLParser *, PyObject *))__pyx_f_7gumbocy_10HTMLParser_open_hyperlink;
  __pyx_vtable_7gumbocy_HTMLParser.close_hyperlink = (void (*)(struct __pyx_obj_7gumbocy_HTMLParser *))__pyx_f_7gumbocy_10HTMLParser_close_hyperlink;
  __pyx_vtable_7gumbocy_HTMLParser._traverse_node = (int (*)(struct __pyx_obj_7gumbocy_HTMLParser *, int, GumboNode *, int, int, int, int, int))__pyx_f_7gumbocy_10HTMLParser__traverse_node;
  __pyx_vtable_7gumbocy_HTMLParser._traverse_node_simple = (int (*)(struct __pyx_obj_7gumbocy_HTMLParser *, int, GumboNode *))__pyx_f_7gumbocy_10HTMLParser__traverse_node_simple;
  if (PyType_Ready(&__pyx_type_7gumbocy_HTMLParser) < 0) __PYX_ERR(0, 23, __pyx_L1_error)
  __pyx_type_7gumbocy_HTMLParser.tp_print = 0;
  if (__Pyx_SetVtable(__pyx_type_7gumbocy_HTMLParser.tp_dict, __pyx_vtabptr_7gumbocy_HTMLParser) < 0) __PYX_ERR(0, 23, __pyx_L1_error)
  if (PyObject_SetAttrString(__pyx_m, "HTMLParser", (PyObject *)&__pyx_type_7gumbocy_HTMLParser) < 0) __PYX_ERR(0, 23, __pyx_L1_error)
  __pyx_ptype_7gumbocy_HTMLParser = &__pyx_type_7gumbocy_HTMLParser;
  /*--- Type import code ---*/
  /*--- Variable import code ---*/
  /*--- Function import code ---*/
  /*--- Execution code ---*/
  #if defined(__Pyx_Generator_USED) || defined(__Pyx_Coroutine_USED)
  if (__Pyx_patch_abc() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif

  /* "gumbocy.pyx":1
 * import re             # <<<<<<<<<<<<<<
 * cimport gumbocy
 * cimport re2cy
 */
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_re, 0, -1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_re, __pyx_t_1) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "gumbocy.pyx":12
 *     int printf(const char* format, ...);
 * 
 * cdef vector[re2cy.ArgPtr] *argp = new vector[re2cy.ArgPtr]()             # <<<<<<<<<<<<<<
 * cdef re2cy.ArgPtr *empty_args = &(deref(argp)[0])
 * 
 */
  try {
    __pyx_t_2 = new std::vector<__pyx_t_5re2cy_ArgPtr> ();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 12, __pyx_L1_error)
  }
  __pyx_v_7gumbocy_argp = __pyx_t_2;

  /* "gumbocy.pyx":13
 * 
 * cdef vector[re2cy.ArgPtr] *argp = new vector[re2cy.ArgPtr]()
 * cdef re2cy.ArgPtr *empty_args = &(deref(argp)[0])             # <<<<<<<<<<<<<<
 * 
 * cdef bint re2_search(char* s, re2cy.RE2 &pattern):
 */
  __pyx_v_7gumbocy_empty_args = (&((*__pyx_v_7gumbocy_argp)[0]));

  /* "gumbocy.pyx":18
 *     return re2cy.RE2.PartialMatchN(s, pattern, empty_args, 0)
 * 
 * cdef re2cy.RE2 *_RE2_SEARCH_STYLE_HIDDEN = new re2cy.RE2(r"(display\s*\:\s*none)|(visibility\s*\:\s*hidden)")             # <<<<<<<<<<<<<<
 * 
 * _RE_EXTERNAL_HREF = re.compile(r"^([A-Za-z0-9\+\.\-]+\:)?\/\/")
 */
  try {
    __pyx_t_3 = new re2::RE2(((char const *)"(display\\s*\\:\\s*none)|(visibility\\s*\\:\\s*hidden)"));
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 18, __pyx_L1_error)
  }
  __pyx_v_7gumbocy__RE2_SEARCH_STYLE_HIDDEN = __pyx_t_3;

  /* "gumbocy.pyx":20
 * cdef re2cy.RE2 *_RE2_SEARCH_STYLE_HIDDEN = new re2cy.RE2(r"(display\s*\:\s*none)|(visibility\s*\:\s*hidden)")
 * 
 * _RE_EXTERNAL_HREF = re.compile(r"^([A-Za-z0-9\+\.\-]+\:)?\/\/")             # <<<<<<<<<<<<<<
 * _RE_SPLIT_WHITESPACE = re.compile(r"\s+")
 * 
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_re); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 20, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_compile); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 20, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_tuple__18, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 20, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_RE_EXTERNAL_HREF, __pyx_t_1) < 0) __PYX_ERR(0, 20, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "gumbocy.pyx":21
 * 
 * _RE_EXTERNAL_HREF = re.compile(r"^([A-Za-z0-9\+\.\-]+\:)?\/\/")
 * _RE_SPLIT_WHITESPACE = re.compile(r"\s+")             # <<<<<<<<<<<<<<
 * 
 * cdef class HTMLParser:
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_re); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 21, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_compile); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 21, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_tuple__19, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 21, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_RE_SPLIT_WHITESPACE, __pyx_t_1) < 0) __PYX_ERR(0, 21, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "gumbocy.pyx":1
 * import re             # <<<<<<<<<<<<<<
 * cimport gumbocy
 * cimport re2cy
 */
  __pyx_t_1 = PyDict_New(); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_test, __pyx_t_1) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /*--- Wrapped vars code ---*/

  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  if (__pyx_m) {
    if (__pyx_d) {
      __Pyx_AddTraceback("init gumbocy", __pyx_clineno, __pyx_lineno, __pyx_filename);
    }
    Py_DECREF(__pyx_m); __pyx_m = 0;
  } else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_ImportError, "init gumbocy");
  }
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  #if PY_MAJOR_VERSION < 3
  return;
  #else
  return __pyx_m;
  #endif
}

/* --- Runtime support code --- */
/* Refnanny */
#if CYTHON_REFNANNY
static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname) {
    PyObject *m = NULL, *p = NULL;
    void *r = NULL;
    m = PyImport_ImportModule((char *)modname);
    if (!m) goto end;
    p = PyObject_GetAttrString(m, (char *)"RefNannyAPI");
    if (!p) goto end;
    r = PyLong_AsVoidPtr(p);
end:
    Py_XDECREF(p);
    Py_XDECREF(m);
    return (__Pyx_RefNannyAPIStruct *)r;
}
#endif

/* GetBuiltinName */
static PyObject *__Pyx_GetBuiltinName(PyObject *name) {
    PyObject* result = __Pyx_PyObject_GetAttrStr(__pyx_b, name);
    if (unlikely(!result)) {
        PyErr_Format(PyExc_NameError,
#if PY_MAJOR_VERSION >= 3
            "name '%U' is not defined", name);
#else
            "name '%.200s' is not defined", PyString_AS_STRING(name));
#endif
    }
    return result;
}

/* RaiseDoubleKeywords */
static void __Pyx_RaiseDoubleKeywordsError(
    const char* func_name,
    PyObject* kw_name)
{
    PyErr_Format(PyExc_TypeError,
        #if PY_MAJOR_VERSION >= 3
        "%s() got multiple values for keyword argument '%U'", func_name, kw_name);
        #else
        "%s() got multiple values for keyword argument '%s'", func_name,
        PyString_AsString(kw_name));
        #endif
}

/* ParseKeywords */
static int __Pyx_ParseOptionalKeywords(
    PyObject *kwds,
    PyObject **argnames[],
    PyObject *kwds2,
    PyObject *values[],
    Py_ssize_t num_pos_args,
    const char* function_name)
{
    PyObject *key = 0, *value = 0;
    Py_ssize_t pos = 0;
    PyObject*** name;
    PyObject*** first_kw_arg = argnames + num_pos_args;
    while (PyDict_Next(kwds, &pos, &key, &value)) {
        name = first_kw_arg;
        while (*name && (**name != key)) name++;
        if (*name) {
            values[name-argnames] = value;
            continue;
        }
        name = first_kw_arg;
        #if PY_MAJOR_VERSION < 3
        if (likely(PyString_CheckExact(key)) || likely(PyString_Check(key))) {
            while (*name) {
                if ((CYTHON_COMPILING_IN_PYPY || PyString_GET_SIZE(**name) == PyString_GET_SIZE(key))
                        && _PyString_Eq(**name, key)) {
                    values[name-argnames] = value;
                    break;
                }
                name++;
            }
            if (*name) continue;
            else {
                PyObject*** argname = argnames;
                while (argname != first_kw_arg) {
                    if ((**argname == key) || (
                            (CYTHON_COMPILING_IN_PYPY || PyString_GET_SIZE(**argname) == PyString_GET_SIZE(key))
                             && _PyString_Eq(**argname, key))) {
                        goto arg_passed_twice;
                    }
                    argname++;
                }
            }
        } else
        #endif
        if (likely(PyUnicode_Check(key))) {
            while (*name) {
                int cmp = (**name == key) ? 0 :
                #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION >= 3
                    (PyUnicode_GET_SIZE(**name) != PyUnicode_GET_SIZE(key)) ? 1 :
                #endif
                    PyUnicode_Compare(**name, key);
                if (cmp < 0 && unlikely(PyErr_Occurred())) goto bad;
                if (cmp == 0) {
                    values[name-argnames] = value;
                    break;
                }
                name++;
            }
            if (*name) continue;
            else {
                PyObject*** argname = argnames;
                while (argname != first_kw_arg) {
                    int cmp = (**argname == key) ? 0 :
                    #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION >= 3
                        (PyUnicode_GET_SIZE(**argname) != PyUnicode_GET_SIZE(key)) ? 1 :
                    #endif
                        PyUnicode_Compare(**argname, key);
                    if (cmp < 0 && unlikely(PyErr_Occurred())) goto bad;
                    if (cmp == 0) goto arg_passed_twice;
                    argname++;
                }
            }
        } else
            goto invalid_keyword_type;
        if (kwds2) {
            if (unlikely(PyDict_SetItem(kwds2, key, value))) goto bad;
        } else {
            goto invalid_keyword;
        }
    }
    return 0;
arg_passed_twice:
    __Pyx_RaiseDoubleKeywordsError(function_name, key);
    goto bad;
invalid_keyword_type:
    PyErr_Format(PyExc_TypeError,
        "%.200s() keywords must be strings", function_name);
    goto bad;
invalid_keyword:
    PyErr_Format(PyExc_TypeError,
    #if PY_MAJOR_VERSION < 3
        "%.200s() got an unexpected keyword argument '%.200s'",
        function_name, PyString_AsString(key));
    #else
        "%s() got an unexpected keyword argument '%U'",
        function_name, key);
    #endif
bad:
    return -1;
}

/* RaiseArgTupleInvalid */
static void __Pyx_RaiseArgtupleInvalid(
    const char* func_name,
    int exact,
    Py_ssize_t num_min,
    Py_ssize_t num_max,
    Py_ssize_t num_found)
{
    Py_ssize_t num_expected;
    const char *more_or_less;
    if (num_found < num_min) {
        num_expected = num_min;
        more_or_less = "at least";
    } else {
        num_expected = num_max;
        more_or_less = "at most";
    }
    if (exact) {
        more_or_less = "exactly";
    }
    PyErr_Format(PyExc_TypeError,
                 "%.200s() takes %.8s %" CYTHON_FORMAT_SSIZE_T "d positional argument%.1s (%" CYTHON_FORMAT_SSIZE_T "d given)",
                 func_name, more_or_less, num_expected,
                 (num_expected == 1) ? "" : "s", num_found);
}

/* ArgTypeTest */
static void __Pyx_RaiseArgumentTypeInvalid(const char* name, PyObject *obj, PyTypeObject *type) {
    PyErr_Format(PyExc_TypeError,
        "Argument '%.200s' has incorrect type (expected %.200s, got %.200s)",
        name, type->tp_name, Py_TYPE(obj)->tp_name);
}
static CYTHON_INLINE int __Pyx_ArgTypeTest(PyObject *obj, PyTypeObject *type, int none_allowed,
    const char *name, int exact)
{
    if (unlikely(!type)) {
        PyErr_SetString(PyExc_SystemError, "Missing type object");
        return 0;
    }
    if (none_allowed && obj == Py_None) return 1;
    else if (exact) {
        if (likely(Py_TYPE(obj) == type)) return 1;
        #if PY_MAJOR_VERSION == 2
        else if ((type == &PyBaseString_Type) && likely(__Pyx_PyBaseString_CheckExact(obj))) return 1;
        #endif
    }
    else {
        if (likely(PyObject_TypeCheck(obj, type))) return 1;
    }
    __Pyx_RaiseArgumentTypeInvalid(name, obj, type);
    return 0;
}

/* dict_getitem_default */
static PyObject* __Pyx_PyDict_GetItemDefault(PyObject* d, PyObject* key, PyObject* default_value) {
    PyObject* value;
#if PY_MAJOR_VERSION >= 3 && !CYTHON_COMPILING_IN_PYPY
    value = PyDict_GetItemWithError(d, key);
    if (unlikely(!value)) {
        if (unlikely(PyErr_Occurred()))
            return NULL;
        value = default_value;
    }
    Py_INCREF(value);
#else
    if (PyString_CheckExact(key) || PyUnicode_CheckExact(key) || PyInt_CheckExact(key)) {
        value = PyDict_GetItem(d, key);
        if (unlikely(!value)) {
            value = default_value;
        }
        Py_INCREF(value);
    } else {
        if (default_value == Py_None)
            default_value = NULL;
        value = PyObject_CallMethodObjArgs(
            d, __pyx_n_s_get, key, default_value, NULL);
    }
#endif
    return value;
}

/* BytesEquals */
static CYTHON_INLINE int __Pyx_PyBytes_Equals(PyObject* s1, PyObject* s2, int equals) {
#if CYTHON_COMPILING_IN_PYPY
    return PyObject_RichCompareBool(s1, s2, equals);
#else
    if (s1 == s2) {
        return (equals == Py_EQ);
    } else if (PyBytes_CheckExact(s1) & PyBytes_CheckExact(s2)) {
        const char *ps1, *ps2;
        Py_ssize_t length = PyBytes_GET_SIZE(s1);
        if (length != PyBytes_GET_SIZE(s2))
            return (equals == Py_NE);
        ps1 = PyBytes_AS_STRING(s1);
        ps2 = PyBytes_AS_STRING(s2);
        if (ps1[0] != ps2[0]) {
            return (equals == Py_NE);
        } else if (length == 1) {
            return (equals == Py_EQ);
        } else {
            int result = memcmp(ps1, ps2, (size_t)length);
            return (equals == Py_EQ) ? (result == 0) : (result != 0);
        }
    } else if ((s1 == Py_None) & PyBytes_CheckExact(s2)) {
        return (equals == Py_NE);
    } else if ((s2 == Py_None) & PyBytes_CheckExact(s1)) {
        return (equals == Py_NE);
    } else {
        int result;
        PyObject* py_result = PyObject_RichCompare(s1, s2, equals);
        if (!py_result)
            return -1;
        result = __Pyx_PyObject_IsTrue(py_result);
        Py_DECREF(py_result);
        return result;
    }
#endif
}

/* UnicodeEquals */
static CYTHON_INLINE int __Pyx_PyUnicode_Equals(PyObject* s1, PyObject* s2, int equals) {
#if CYTHON_COMPILING_IN_PYPY
    return PyObject_RichCompareBool(s1, s2, equals);
#else
#if PY_MAJOR_VERSION < 3
    PyObject* owned_ref = NULL;
#endif
    int s1_is_unicode, s2_is_unicode;
    if (s1 == s2) {
        goto return_eq;
    }
    s1_is_unicode = PyUnicode_CheckExact(s1);
    s2_is_unicode = PyUnicode_CheckExact(s2);
#if PY_MAJOR_VERSION < 3
    if ((s1_is_unicode & (!s2_is_unicode)) && PyString_CheckExact(s2)) {
        owned_ref = PyUnicode_FromObject(s2);
        if (unlikely(!owned_ref))
            return -1;
        s2 = owned_ref;
        s2_is_unicode = 1;
    } else if ((s2_is_unicode & (!s1_is_unicode)) && PyString_CheckExact(s1)) {
        owned_ref = PyUnicode_FromObject(s1);
        if (unlikely(!owned_ref))
            return -1;
        s1 = owned_ref;
        s1_is_unicode = 1;
    } else if (((!s2_is_unicode) & (!s1_is_unicode))) {
        return __Pyx_PyBytes_Equals(s1, s2, equals);
    }
#endif
    if (s1_is_unicode & s2_is_unicode) {
        Py_ssize_t length;
        int kind;
        void *data1, *data2;
        if (unlikely(__Pyx_PyUnicode_READY(s1) < 0) || unlikely(__Pyx_PyUnicode_READY(s2) < 0))
            return -1;
        length = __Pyx_PyUnicode_GET_LENGTH(s1);
        if (length != __Pyx_PyUnicode_GET_LENGTH(s2)) {
            goto return_ne;
        }
        kind = __Pyx_PyUnicode_KIND(s1);
        if (kind != __Pyx_PyUnicode_KIND(s2)) {
            goto return_ne;
        }
        data1 = __Pyx_PyUnicode_DATA(s1);
        data2 = __Pyx_PyUnicode_DATA(s2);
        if (__Pyx_PyUnicode_READ(kind, data1, 0) != __Pyx_PyUnicode_READ(kind, data2, 0)) {
            goto return_ne;
        } else if (length == 1) {
            goto return_eq;
        } else {
            int result = memcmp(data1, data2, (size_t)(length * kind));
            #if PY_MAJOR_VERSION < 3
            Py_XDECREF(owned_ref);
            #endif
            return (equals == Py_EQ) ? (result == 0) : (result != 0);
        }
    } else if ((s1 == Py_None) & s2_is_unicode) {
        goto return_ne;
    } else if ((s2 == Py_None) & s1_is_unicode) {
        goto return_ne;
    } else {
        int result;
        PyObject* py_result = PyObject_RichCompare(s1, s2, equals);
        if (!py_result)
            return -1;
        result = __Pyx_PyObject_IsTrue(py_result);
        Py_DECREF(py_result);
        return result;
    }
return_eq:
    #if PY_MAJOR_VERSION < 3
    Py_XDECREF(owned_ref);
    #endif
    return (equals == Py_EQ);
return_ne:
    #if PY_MAJOR_VERSION < 3
    Py_XDECREF(owned_ref);
    #endif
    return (equals == Py_NE);
#endif
}

/* PyObjectCall */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call(PyObject *func, PyObject *arg, PyObject *kw) {
    PyObject *result;
    ternaryfunc call = func->ob_type->tp_call;
    if (unlikely(!call))
        return PyObject_Call(func, arg, kw);
    if (unlikely(Py_EnterRecursiveCall((char*)" while calling a Python object")))
        return NULL;
    result = (*call)(func, arg, kw);
    Py_LeaveRecursiveCall();
    if (unlikely(!result) && unlikely(!PyErr_Occurred())) {
        PyErr_SetString(
            PyExc_SystemError,
            "NULL result without error in PyObject_Call");
    }
    return result;
}
#endif

/* PyObjectCallMethO */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallMethO(PyObject *func, PyObject *arg) {
    PyObject *self, *result;
    PyCFunction cfunc;
    cfunc = PyCFunction_GET_FUNCTION(func);
    self = PyCFunction_GET_SELF(func);
    if (unlikely(Py_EnterRecursiveCall((char*)" while calling a Python object")))
        return NULL;
    result = cfunc(self, arg);
    Py_LeaveRecursiveCall();
    if (unlikely(!result) && unlikely(!PyErr_Occurred())) {
        PyErr_SetString(
            PyExc_SystemError,
            "NULL result without error in PyObject_Call");
    }
    return result;
}
#endif

/* PyObjectCallOneArg */
#if CYTHON_COMPILING_IN_CPYTHON
static PyObject* __Pyx__PyObject_CallOneArg(PyObject *func, PyObject *arg) {
    PyObject *result;
    PyObject *args = PyTuple_New(1);
    if (unlikely(!args)) return NULL;
    Py_INCREF(arg);
    PyTuple_SET_ITEM(args, 0, arg);
    result = __Pyx_PyObject_Call(func, args, NULL);
    Py_DECREF(args);
    return result;
}
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg) {
#ifdef __Pyx_CyFunction_USED
    if (likely(PyCFunction_Check(func) || PyObject_TypeCheck(func, __pyx_CyFunctionType))) {
#else
    if (likely(PyCFunction_Check(func))) {
#endif
        if (likely(PyCFunction_GET_FLAGS(func) & METH_O)) {
            return __Pyx_PyObject_CallMethO(func, arg);
        }
    }
    return __Pyx__PyObject_CallOneArg(func, arg);
}
#else
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg) {
    PyObject *result;
    PyObject *args = PyTuple_Pack(1, arg);
    if (unlikely(!args)) return NULL;
    result = __Pyx_PyObject_Call(func, args, NULL);
    Py_DECREF(args);
    return result;
}
#endif

/* PyObjectCallNoArg */
  #if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallNoArg(PyObject *func) {
#ifdef __Pyx_CyFunction_USED
    if (likely(PyCFunction_Check(func) || PyObject_TypeCheck(func, __pyx_CyFunctionType))) {
#else
    if (likely(PyCFunction_Check(func))) {
#endif
        if (likely(PyCFunction_GET_FLAGS(func) & METH_NOARGS)) {
            return __Pyx_PyObject_CallMethO(func, NULL);
        }
    }
    return __Pyx_PyObject_Call(func, __pyx_empty_tuple, NULL);
}
#endif

/* PyErrFetchRestore */
    #if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE void __Pyx_ErrRestoreInState(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb) {
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    tmp_type = tstate->curexc_type;
    tmp_value = tstate->curexc_value;
    tmp_tb = tstate->curexc_traceback;
    tstate->curexc_type = type;
    tstate->curexc_value = value;
    tstate->curexc_traceback = tb;
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
}
static CYTHON_INLINE void __Pyx_ErrFetchInState(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb) {
    *type = tstate->curexc_type;
    *value = tstate->curexc_value;
    *tb = tstate->curexc_traceback;
    tstate->curexc_type = 0;
    tstate->curexc_value = 0;
    tstate->curexc_traceback = 0;
}
#endif

/* WriteUnraisableException */
    static void __Pyx_WriteUnraisable(const char *name, CYTHON_UNUSED int clineno,
                                  CYTHON_UNUSED int lineno, CYTHON_UNUSED const char *filename,
                                  int full_traceback, CYTHON_UNUSED int nogil) {
    PyObject *old_exc, *old_val, *old_tb;
    PyObject *ctx;
    __Pyx_PyThreadState_declare
#ifdef WITH_THREAD
    PyGILState_STATE state;
    if (nogil)
        state = PyGILState_Ensure();
#ifdef _MSC_VER
    else state = (PyGILState_STATE)-1;
#endif
#endif
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&old_exc, &old_val, &old_tb);
    if (full_traceback) {
        Py_XINCREF(old_exc);
        Py_XINCREF(old_val);
        Py_XINCREF(old_tb);
        __Pyx_ErrRestore(old_exc, old_val, old_tb);
        PyErr_PrintEx(1);
    }
    #if PY_MAJOR_VERSION < 3
    ctx = PyString_FromString(name);
    #else
    ctx = PyUnicode_FromString(name);
    #endif
    __Pyx_ErrRestore(old_exc, old_val, old_tb);
    if (!ctx) {
        PyErr_WriteUnraisable(Py_None);
    } else {
        PyErr_WriteUnraisable(ctx);
        Py_DECREF(ctx);
    }
#ifdef WITH_THREAD
    if (nogil)
        PyGILState_Release(state);
#endif
}

/* GetModuleGlobalName */
    static CYTHON_INLINE PyObject *__Pyx_GetModuleGlobalName(PyObject *name) {
    PyObject *result;
#if CYTHON_COMPILING_IN_CPYTHON
    result = PyDict_GetItem(__pyx_d, name);
    if (likely(result)) {
        Py_INCREF(result);
    } else {
#else
    result = PyObject_GetItem(__pyx_d, name);
    if (!result) {
        PyErr_Clear();
#endif
        result = __Pyx_GetBuiltinName(name);
    }
    return result;
}

/* None */
      static CYTHON_INLINE void __Pyx_RaiseUnboundLocalError(const char *varname) {
    PyErr_Format(PyExc_UnboundLocalError, "local variable '%s' referenced before assignment", varname);
}

/* PyObjectCallMethod1 */
      static PyObject* __Pyx_PyObject_CallMethod1(PyObject* obj, PyObject* method_name, PyObject* arg) {
    PyObject *method, *result = NULL;
    method = __Pyx_PyObject_GetAttrStr(obj, method_name);
    if (unlikely(!method)) goto bad;
#if CYTHON_COMPILING_IN_CPYTHON
    if (likely(PyMethod_Check(method))) {
        PyObject *self = PyMethod_GET_SELF(method);
        if (likely(self)) {
            PyObject *args;
            PyObject *function = PyMethod_GET_FUNCTION(method);
            args = PyTuple_New(2);
            if (unlikely(!args)) goto bad;
            Py_INCREF(self);
            PyTuple_SET_ITEM(args, 0, self);
            Py_INCREF(arg);
            PyTuple_SET_ITEM(args, 1, arg);
            Py_INCREF(function);
            Py_DECREF(method); method = NULL;
            result = __Pyx_PyObject_Call(function, args, NULL);
            Py_DECREF(args);
            Py_DECREF(function);
            return result;
        }
    }
#endif
    result = __Pyx_PyObject_CallOneArg(method, arg);
bad:
    Py_XDECREF(method);
    return result;
}

/* append */
      static CYTHON_INLINE int __Pyx_PyObject_Append(PyObject* L, PyObject* x) {
    if (likely(PyList_CheckExact(L))) {
        if (unlikely(__Pyx_PyList_Append(L, x) < 0)) return -1;
    } else {
        PyObject* retval = __Pyx_PyObject_CallMethod1(L, __pyx_n_s_append, x);
        if (unlikely(!retval))
            return -1;
        Py_DECREF(retval);
    }
    return 0;
}

/* GetItemInt */
      static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Generic(PyObject *o, PyObject* j) {
    PyObject *r;
    if (!j) return NULL;
    r = PyObject_GetItem(o, j);
    Py_DECREF(j);
    return r;
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_List_Fast(PyObject *o, Py_ssize_t i,
                                                              CYTHON_NCP_UNUSED int wraparound,
                                                              CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_COMPILING_IN_CPYTHON
    if (wraparound & unlikely(i < 0)) i += PyList_GET_SIZE(o);
    if ((!boundscheck) || likely((0 <= i) & (i < PyList_GET_SIZE(o)))) {
        PyObject *r = PyList_GET_ITEM(o, i);
        Py_INCREF(r);
        return r;
    }
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
#else
    return PySequence_GetItem(o, i);
#endif
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Tuple_Fast(PyObject *o, Py_ssize_t i,
                                                              CYTHON_NCP_UNUSED int wraparound,
                                                              CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_COMPILING_IN_CPYTHON
    if (wraparound & unlikely(i < 0)) i += PyTuple_GET_SIZE(o);
    if ((!boundscheck) || likely((0 <= i) & (i < PyTuple_GET_SIZE(o)))) {
        PyObject *r = PyTuple_GET_ITEM(o, i);
        Py_INCREF(r);
        return r;
    }
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
#else
    return PySequence_GetItem(o, i);
#endif
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Fast(PyObject *o, Py_ssize_t i, int is_list,
                                                     CYTHON_NCP_UNUSED int wraparound,
                                                     CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_COMPILING_IN_CPYTHON
    if (is_list || PyList_CheckExact(o)) {
        Py_ssize_t n = ((!wraparound) | likely(i >= 0)) ? i : i + PyList_GET_SIZE(o);
        if ((!boundscheck) || (likely((n >= 0) & (n < PyList_GET_SIZE(o))))) {
            PyObject *r = PyList_GET_ITEM(o, n);
            Py_INCREF(r);
            return r;
        }
    }
    else if (PyTuple_CheckExact(o)) {
        Py_ssize_t n = ((!wraparound) | likely(i >= 0)) ? i : i + PyTuple_GET_SIZE(o);
        if ((!boundscheck) || likely((n >= 0) & (n < PyTuple_GET_SIZE(o)))) {
            PyObject *r = PyTuple_GET_ITEM(o, n);
            Py_INCREF(r);
            return r;
        }
    } else {
        PySequenceMethods *m = Py_TYPE(o)->tp_as_sequence;
        if (likely(m && m->sq_item)) {
            if (wraparound && unlikely(i < 0) && likely(m->sq_length)) {
                Py_ssize_t l = m->sq_length(o);
                if (likely(l >= 0)) {
                    i += l;
                } else {
                    if (!PyErr_ExceptionMatches(PyExc_OverflowError))
                        return NULL;
                    PyErr_Clear();
                }
            }
            return m->sq_item(o, i);
        }
    }
#else
    if (is_list || PySequence_Check(o)) {
        return PySequence_GetItem(o, i);
    }
#endif
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
}

/* SetItemInt */
      static CYTHON_INLINE int __Pyx_SetItemInt_Generic(PyObject *o, PyObject *j, PyObject *v) {
    int r;
    if (!j) return -1;
    r = PyObject_SetItem(o, j, v);
    Py_DECREF(j);
    return r;
}
static CYTHON_INLINE int __Pyx_SetItemInt_Fast(PyObject *o, Py_ssize_t i, PyObject *v, int is_list,
                                               CYTHON_NCP_UNUSED int wraparound, CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_COMPILING_IN_CPYTHON
    if (is_list || PyList_CheckExact(o)) {
        Py_ssize_t n = (!wraparound) ? i : ((likely(i >= 0)) ? i : i + PyList_GET_SIZE(o));
        if ((!boundscheck) || likely((n >= 0) & (n < PyList_GET_SIZE(o)))) {
            PyObject* old = PyList_GET_ITEM(o, n);
            Py_INCREF(v);
            PyList_SET_ITEM(o, n, v);
            Py_DECREF(old);
            return 1;
        }
    } else {
        PySequenceMethods *m = Py_TYPE(o)->tp_as_sequence;
        if (likely(m && m->sq_ass_item)) {
            if (wraparound && unlikely(i < 0) && likely(m->sq_length)) {
                Py_ssize_t l = m->sq_length(o);
                if (likely(l >= 0)) {
                    i += l;
                } else {
                    if (!PyErr_ExceptionMatches(PyExc_OverflowError))
                        return -1;
                    PyErr_Clear();
                }
            }
            return m->sq_ass_item(o, i, v);
        }
    }
#else
#if CYTHON_COMPILING_IN_PYPY
    if (is_list || (PySequence_Check(o) && !PyDict_Check(o))) {
#else
    if (is_list || PySequence_Check(o)) {
#endif
        return PySequence_SetItem(o, i, v);
    }
#endif
    return __Pyx_SetItemInt_Generic(o, PyInt_FromSsize_t(i), v);
}

/* SliceObject */
        static CYTHON_INLINE PyObject* __Pyx_PyObject_GetSlice(PyObject* obj,
        Py_ssize_t cstart, Py_ssize_t cstop,
        PyObject** _py_start, PyObject** _py_stop, PyObject** _py_slice,
        int has_cstart, int has_cstop, CYTHON_UNUSED int wraparound) {
#if CYTHON_COMPILING_IN_CPYTHON
    PyMappingMethods* mp;
#if PY_MAJOR_VERSION < 3
    PySequenceMethods* ms = Py_TYPE(obj)->tp_as_sequence;
    if (likely(ms && ms->sq_slice)) {
        if (!has_cstart) {
            if (_py_start && (*_py_start != Py_None)) {
                cstart = __Pyx_PyIndex_AsSsize_t(*_py_start);
                if ((cstart == (Py_ssize_t)-1) && PyErr_Occurred()) goto bad;
            } else
                cstart = 0;
        }
        if (!has_cstop) {
            if (_py_stop && (*_py_stop != Py_None)) {
                cstop = __Pyx_PyIndex_AsSsize_t(*_py_stop);
                if ((cstop == (Py_ssize_t)-1) && PyErr_Occurred()) goto bad;
            } else
                cstop = PY_SSIZE_T_MAX;
        }
        if (wraparound && unlikely((cstart < 0) | (cstop < 0)) && likely(ms->sq_length)) {
            Py_ssize_t l = ms->sq_length(obj);
            if (likely(l >= 0)) {
                if (cstop < 0) {
                    cstop += l;
                    if (cstop < 0) cstop = 0;
                }
                if (cstart < 0) {
                    cstart += l;
                    if (cstart < 0) cstart = 0;
                }
            } else {
                if (!PyErr_ExceptionMatches(PyExc_OverflowError))
                    goto bad;
                PyErr_Clear();
            }
        }
        return ms->sq_slice(obj, cstart, cstop);
    }
#endif
    mp = Py_TYPE(obj)->tp_as_mapping;
    if (likely(mp && mp->mp_subscript))
#endif
    {
        PyObject* result;
        PyObject *py_slice, *py_start, *py_stop;
        if (_py_slice) {
            py_slice = *_py_slice;
        } else {
            PyObject* owned_start = NULL;
            PyObject* owned_stop = NULL;
            if (_py_start) {
                py_start = *_py_start;
            } else {
                if (has_cstart) {
                    owned_start = py_start = PyInt_FromSsize_t(cstart);
                    if (unlikely(!py_start)) goto bad;
                } else
                    py_start = Py_None;
            }
            if (_py_stop) {
                py_stop = *_py_stop;
            } else {
                if (has_cstop) {
                    owned_stop = py_stop = PyInt_FromSsize_t(cstop);
                    if (unlikely(!py_stop)) {
                        Py_XDECREF(owned_start);
                        goto bad;
                    }
                } else
                    py_stop = Py_None;
            }
            py_slice = PySlice_New(py_start, py_stop, Py_None);
            Py_XDECREF(owned_start);
            Py_XDECREF(owned_stop);
            if (unlikely(!py_slice)) goto bad;
        }
#if CYTHON_COMPILING_IN_CPYTHON
        result = mp->mp_subscript(obj, py_slice);
#else
        result = PyObject_GetItem(obj, py_slice);
#endif
        if (!_py_slice) {
            Py_DECREF(py_slice);
        }
        return result;
    }
    PyErr_Format(PyExc_TypeError,
        "'%.200s' object is unsliceable", Py_TYPE(obj)->tp_name);
bad:
    return NULL;
}

/* PyIntBinop */
        #if CYTHON_COMPILING_IN_CPYTHON
static PyObject* __Pyx_PyInt_EqObjC(PyObject *op1, PyObject *op2, CYTHON_UNUSED long intval, CYTHON_UNUSED int inplace) {
    if (op1 == op2) {
        Py_RETURN_TRUE;
    }
    #if PY_MAJOR_VERSION < 3
    if (likely(PyInt_CheckExact(op1))) {
        const long b = intval;
        long a = PyInt_AS_LONG(op1);
        if (a == b) {
            Py_RETURN_TRUE;
        } else {
            Py_RETURN_FALSE;
        }
    }
    #endif
    #if CYTHON_USE_PYLONG_INTERNALS && PY_MAJOR_VERSION >= 3
    if (likely(PyLong_CheckExact(op1))) {
        const long b = intval;
        long a;
        const digit* digits = ((PyLongObject*)op1)->ob_digit;
        const Py_ssize_t size = Py_SIZE(op1);
        if (likely(__Pyx_sst_abs(size) <= 1)) {
            a = likely(size) ? digits[0] : 0;
            if (size == -1) a = -a;
        } else {
            switch (size) {
                case -2:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        a = -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    }
                case 2:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        a = (long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    }
                case -3:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        a = -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    }
                case 3:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        a = (long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    }
                case -4:
                    if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                        a = -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    }
                case 4:
                    if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                        a = (long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    }
                #if PyLong_SHIFT < 30 && PyLong_SHIFT != 15
                default: return PyLong_Type.tp_richcompare(op1, op2, Py_EQ);
                #else
                default: Py_RETURN_FALSE;
                #endif
            }
        }
            if (a == b) {
                Py_RETURN_TRUE;
            } else {
                Py_RETURN_FALSE;
            }
    }
    #endif
    if (PyFloat_CheckExact(op1)) {
        const long b = intval;
        double a = PyFloat_AS_DOUBLE(op1);
            if ((double)a == (double)b) {
                Py_RETURN_TRUE;
            } else {
                Py_RETURN_FALSE;
            }
    }
    return PyObject_RichCompare(op1, op2, Py_EQ);
}
#endif

/* PyObjectCallMethod2 */
        static PyObject* __Pyx_PyObject_CallMethod2(PyObject* obj, PyObject* method_name, PyObject* arg1, PyObject* arg2) {
    PyObject *args, *method, *result = NULL;
    method = __Pyx_PyObject_GetAttrStr(obj, method_name);
#if CYTHON_COMPILING_IN_CPYTHON
    if (likely(PyMethod_Check(method)) && likely(PyMethod_GET_SELF(method))) {
        PyObject *self, *function;
        self = PyMethod_GET_SELF(method);
        function = PyMethod_GET_FUNCTION(method);
        args = PyTuple_New(3);
        if (unlikely(!args)) goto bad;
        Py_INCREF(self);
        PyTuple_SET_ITEM(args, 0, self);
        Py_INCREF(arg1);
        PyTuple_SET_ITEM(args, 1, arg1);
        Py_INCREF(arg2);
        PyTuple_SET_ITEM(args, 2, arg2);
        Py_INCREF(function);
        Py_DECREF(method);
        method = function;
    } else
#endif
    {
        args = PyTuple_New(2);
        if (unlikely(!args)) goto bad;
        Py_INCREF(arg1);
        PyTuple_SET_ITEM(args, 0, arg1);
        Py_INCREF(arg2);
        PyTuple_SET_ITEM(args, 1, arg2);
    }
    result = __Pyx_PyObject_Call(method, args, NULL);
    Py_DECREF(args);
    Py_DECREF(method);
    return result;
bad:
    Py_XDECREF(method);
    return result;
}

/* dict_setdefault */
        static CYTHON_INLINE PyObject *__Pyx_PyDict_SetDefault(PyObject *d, PyObject *key, PyObject *default_value,
                                                       CYTHON_UNUSED int is_safe_type) {
    PyObject* value;
#if PY_VERSION_HEX >= 0x030400A0
    if (1) {
        value = PyDict_SetDefault(d, key, default_value);
        if (unlikely(!value)) return NULL;
        Py_INCREF(value);
#else
    if (is_safe_type == 1 || (is_safe_type == -1 &&
#if PY_MAJOR_VERSION >= 3 && !CYTHON_COMPILING_IN_PYPY
            (PyUnicode_CheckExact(key) || PyString_CheckExact(key) || PyLong_CheckExact(key)))) {
        value = PyDict_GetItemWithError(d, key);
        if (unlikely(!value)) {
            if (unlikely(PyErr_Occurred()))
                return NULL;
            if (unlikely(PyDict_SetItem(d, key, default_value) == -1))
                return NULL;
            value = default_value;
        }
        Py_INCREF(value);
#else
            (PyString_CheckExact(key) || PyUnicode_CheckExact(key) || PyInt_CheckExact(key) || PyLong_CheckExact(key)))) {
        value = PyDict_GetItem(d, key);
        if (unlikely(!value)) {
            if (unlikely(PyDict_SetItem(d, key, default_value) == -1))
                return NULL;
            value = default_value;
        }
        Py_INCREF(value);
#endif
#endif
    } else {
        value = __Pyx_PyObject_CallMethod2(d, __pyx_n_s_setdefault, key, default_value);
    }
    return value;
}

/* PyObjectCallMethod0 */
            static PyObject* __Pyx_PyObject_CallMethod0(PyObject* obj, PyObject* method_name) {
    PyObject *method, *result = NULL;
    method = __Pyx_PyObject_GetAttrStr(obj, method_name);
    if (unlikely(!method)) goto bad;
#if CYTHON_COMPILING_IN_CPYTHON
    if (likely(PyMethod_Check(method))) {
        PyObject *self = PyMethod_GET_SELF(method);
        if (likely(self)) {
            PyObject *function = PyMethod_GET_FUNCTION(method);
            result = __Pyx_PyObject_CallOneArg(function, self);
            Py_DECREF(method);
            return result;
        }
    }
#endif
    result = __Pyx_PyObject_CallNoArg(method);
    Py_DECREF(method);
bad:
    return result;
}

/* UnpackUnboundCMethod */
            static int __Pyx_TryUnpackUnboundCMethod(__Pyx_CachedCFunction* target) {
    PyObject *method;
    method = __Pyx_PyObject_GetAttrStr(target->type, *target->method_name);
    if (unlikely(!method))
        return -1;
    target->method = method;
#if CYTHON_COMPILING_IN_CPYTHON
    #if PY_MAJOR_VERSION >= 3
    if (likely(PyObject_TypeCheck(method, &PyMethodDescr_Type)))
    #endif
    {
        PyMethodDescrObject *descr = (PyMethodDescrObject*) method;
        target->func = descr->d_method->ml_meth;
        target->flag = descr->d_method->ml_flags & (METH_VARARGS | METH_KEYWORDS | METH_O | METH_NOARGS);
    }
#endif
    return 0;
}

/* CallUnboundCMethod0 */
            static PyObject* __Pyx__CallUnboundCMethod0(__Pyx_CachedCFunction* cfunc, PyObject* self) {
    PyObject *args, *result = NULL;
    if (unlikely(!cfunc->method) && unlikely(__Pyx_TryUnpackUnboundCMethod(cfunc) < 0)) return NULL;
#if CYTHON_COMPILING_IN_CPYTHON
    args = PyTuple_New(1);
    if (unlikely(!args)) goto bad;
    Py_INCREF(self);
    PyTuple_SET_ITEM(args, 0, self);
#else
    args = PyTuple_Pack(1, self);
    if (unlikely(!args)) goto bad;
#endif
    result = __Pyx_PyObject_Call(cfunc->method, args, NULL);
    Py_DECREF(args);
bad:
    return result;
}

/* pop */
            static CYTHON_INLINE PyObject* __Pyx__PyObject_Pop(PyObject* L) {
#if CYTHON_COMPILING_IN_CPYTHON
    if (Py_TYPE(L) == &PySet_Type) {
        return PySet_Pop(L);
    }
#endif
    return __Pyx_PyObject_CallMethod0(L, __pyx_n_s_pop);
}
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyList_Pop(PyObject* L) {
    if (likely(PyList_GET_SIZE(L) > (((PyListObject*)L)->allocated >> 1))) {
        Py_SIZE(L) -= 1;
        return PyList_GET_ITEM(L, PyList_GET_SIZE(L));
    }
    return __Pyx_CallUnboundCMethod0(&__pyx_umethod_PyList_Type_pop, L);
}
#endif

/* SetVTable */
            static int __Pyx_SetVtable(PyObject *dict, void *vtable) {
#if PY_VERSION_HEX >= 0x02070000
    PyObject *ob = PyCapsule_New(vtable, 0, 0);
#else
    PyObject *ob = PyCObject_FromVoidPtr(vtable, 0);
#endif
    if (!ob)
        goto bad;
    if (PyDict_SetItem(dict, __pyx_n_s_pyx_vtable, ob) < 0)
        goto bad;
    Py_DECREF(ob);
    return 0;
bad:
    Py_XDECREF(ob);
    return -1;
}

/* Import */
            static PyObject *__Pyx_Import(PyObject *name, PyObject *from_list, int level) {
    PyObject *empty_list = 0;
    PyObject *module = 0;
    PyObject *global_dict = 0;
    PyObject *empty_dict = 0;
    PyObject *list;
    #if PY_VERSION_HEX < 0x03030000
    PyObject *py_import;
    py_import = __Pyx_PyObject_GetAttrStr(__pyx_b, __pyx_n_s_import);
    if (!py_import)
        goto bad;
    #endif
    if (from_list)
        list = from_list;
    else {
        empty_list = PyList_New(0);
        if (!empty_list)
            goto bad;
        list = empty_list;
    }
    global_dict = PyModule_GetDict(__pyx_m);
    if (!global_dict)
        goto bad;
    empty_dict = PyDict_New();
    if (!empty_dict)
        goto bad;
    {
        #if PY_MAJOR_VERSION >= 3
        if (level == -1) {
            if (strchr(__Pyx_MODULE_NAME, '.')) {
                #if PY_VERSION_HEX < 0x03030000
                PyObject *py_level = PyInt_FromLong(1);
                if (!py_level)
                    goto bad;
                module = PyObject_CallFunctionObjArgs(py_import,
                    name, global_dict, empty_dict, list, py_level, NULL);
                Py_DECREF(py_level);
                #else
                module = PyImport_ImportModuleLevelObject(
                    name, global_dict, empty_dict, list, 1);
                #endif
                if (!module) {
                    if (!PyErr_ExceptionMatches(PyExc_ImportError))
                        goto bad;
                    PyErr_Clear();
                }
            }
            level = 0;
        }
        #endif
        if (!module) {
            #if PY_VERSION_HEX < 0x03030000
            PyObject *py_level = PyInt_FromLong(level);
            if (!py_level)
                goto bad;
            module = PyObject_CallFunctionObjArgs(py_import,
                name, global_dict, empty_dict, list, py_level, NULL);
            Py_DECREF(py_level);
            #else
            module = PyImport_ImportModuleLevelObject(
                name, global_dict, empty_dict, list, level);
            #endif
        }
    }
bad:
    #if PY_VERSION_HEX < 0x03030000
    Py_XDECREF(py_import);
    #endif
    Py_XDECREF(empty_list);
    Py_XDECREF(empty_dict);
    return module;
}

/* CodeObjectCache */
            static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line) {
    int start = 0, mid = 0, end = count - 1;
    if (end >= 0 && code_line > entries[end].code_line) {
        return count;
    }
    while (start < end) {
        mid = start + (end - start) / 2;
        if (code_line < entries[mid].code_line) {
            end = mid;
        } else if (code_line > entries[mid].code_line) {
             start = mid + 1;
        } else {
            return mid;
        }
    }
    if (code_line <= entries[mid].code_line) {
        return mid;
    } else {
        return mid + 1;
    }
}
static PyCodeObject *__pyx_find_code_object(int code_line) {
    PyCodeObject* code_object;
    int pos;
    if (unlikely(!code_line) || unlikely(!__pyx_code_cache.entries)) {
        return NULL;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if (unlikely(pos >= __pyx_code_cache.count) || unlikely(__pyx_code_cache.entries[pos].code_line != code_line)) {
        return NULL;
    }
    code_object = __pyx_code_cache.entries[pos].code_object;
    Py_INCREF(code_object);
    return code_object;
}
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object) {
    int pos, i;
    __Pyx_CodeObjectCacheEntry* entries = __pyx_code_cache.entries;
    if (unlikely(!code_line)) {
        return;
    }
    if (unlikely(!entries)) {
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Malloc(64*sizeof(__Pyx_CodeObjectCacheEntry));
        if (likely(entries)) {
            __pyx_code_cache.entries = entries;
            __pyx_code_cache.max_count = 64;
            __pyx_code_cache.count = 1;
            entries[0].code_line = code_line;
            entries[0].code_object = code_object;
            Py_INCREF(code_object);
        }
        return;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if ((pos < __pyx_code_cache.count) && unlikely(__pyx_code_cache.entries[pos].code_line == code_line)) {
        PyCodeObject* tmp = entries[pos].code_object;
        entries[pos].code_object = code_object;
        Py_DECREF(tmp);
        return;
    }
    if (__pyx_code_cache.count == __pyx_code_cache.max_count) {
        int new_max = __pyx_code_cache.max_count + 64;
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Realloc(
            __pyx_code_cache.entries, (size_t)new_max*sizeof(__Pyx_CodeObjectCacheEntry));
        if (unlikely(!entries)) {
            return;
        }
        __pyx_code_cache.entries = entries;
        __pyx_code_cache.max_count = new_max;
    }
    for (i=__pyx_code_cache.count; i>pos; i--) {
        entries[i] = entries[i-1];
    }
    entries[pos].code_line = code_line;
    entries[pos].code_object = code_object;
    __pyx_code_cache.count++;
    Py_INCREF(code_object);
}

/* AddTraceback */
            #include "compile.h"
#include "frameobject.h"
#include "traceback.h"
static PyCodeObject* __Pyx_CreateCodeObjectForTraceback(
            const char *funcname, int c_line,
            int py_line, const char *filename) {
    PyCodeObject *py_code = 0;
    PyObject *py_srcfile = 0;
    PyObject *py_funcname = 0;
    #if PY_MAJOR_VERSION < 3
    py_srcfile = PyString_FromString(filename);
    #else
    py_srcfile = PyUnicode_FromString(filename);
    #endif
    if (!py_srcfile) goto bad;
    if (c_line) {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        #else
        py_funcname = PyUnicode_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        #endif
    }
    else {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromString(funcname);
        #else
        py_funcname = PyUnicode_FromString(funcname);
        #endif
    }
    if (!py_funcname) goto bad;
    py_code = __Pyx_PyCode_New(
        0,
        0,
        0,
        0,
        0,
        __pyx_empty_bytes, /*PyObject *code,*/
        __pyx_empty_tuple, /*PyObject *consts,*/
        __pyx_empty_tuple, /*PyObject *names,*/
        __pyx_empty_tuple, /*PyObject *varnames,*/
        __pyx_empty_tuple, /*PyObject *freevars,*/
        __pyx_empty_tuple, /*PyObject *cellvars,*/
        py_srcfile,   /*PyObject *filename,*/
        py_funcname,  /*PyObject *name,*/
        py_line,
        __pyx_empty_bytes  /*PyObject *lnotab*/
    );
    Py_DECREF(py_srcfile);
    Py_DECREF(py_funcname);
    return py_code;
bad:
    Py_XDECREF(py_srcfile);
    Py_XDECREF(py_funcname);
    return NULL;
}
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename) {
    PyCodeObject *py_code = 0;
    PyFrameObject *py_frame = 0;
    py_code = __pyx_find_code_object(c_line ? c_line : py_line);
    if (!py_code) {
        py_code = __Pyx_CreateCodeObjectForTraceback(
            funcname, c_line, py_line, filename);
        if (!py_code) goto bad;
        __pyx_insert_code_object(c_line ? c_line : py_line, py_code);
    }
    py_frame = PyFrame_New(
        PyThreadState_GET(), /*PyThreadState *tstate,*/
        py_code,             /*PyCodeObject *code,*/
        __pyx_d,      /*PyObject *globals,*/
        0                    /*PyObject *locals*/
    );
    if (!py_frame) goto bad;
    py_frame->f_lineno = py_line;
    PyTraceBack_Here(py_frame);
bad:
    Py_XDECREF(py_code);
    Py_XDECREF(py_frame);
}

/* CIntFromPyVerify */
            #define __PYX_VERIFY_RETURN_INT(target_type, func_type, func_value)\
    __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, 0)
#define __PYX_VERIFY_RETURN_INT_EXC(target_type, func_type, func_value)\
    __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, 1)
#define __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, exc)\
    {\
        func_type value = func_value;\
        if (sizeof(target_type) < sizeof(func_type)) {\
            if (unlikely(value != (func_type) (target_type) value)) {\
                func_type zero = 0;\
                if (exc && unlikely(value == (func_type)-1 && PyErr_Occurred()))\
                    return (target_type) -1;\
                if (is_unsigned && unlikely(value < zero))\
                    goto raise_neg_overflow;\
                else\
                    goto raise_overflow;\
            }\
        }\
        return (target_type) value;\
    }

/* CIntToPy */
            static CYTHON_INLINE PyObject* __Pyx_PyInt_From_unsigned_int(unsigned int value) {
    const unsigned int neg_one = (unsigned int) -1, const_zero = (unsigned int) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(unsigned int) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(unsigned int) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
        } else if (sizeof(unsigned int) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
        }
    } else {
        if (sizeof(unsigned int) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(unsigned int) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(unsigned int),
                                     little, !is_unsigned);
    }
}

/* CIntToPy */
            static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value) {
    const long neg_one = (long) -1, const_zero = (long) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(long) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(long) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
        } else if (sizeof(long) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
        }
    } else {
        if (sizeof(long) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(long) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(long),
                                     little, !is_unsigned);
    }
}

/* CIntToPy */
            static CYTHON_INLINE PyObject* __Pyx_PyInt_From_int(int value) {
    const int neg_one = (int) -1, const_zero = (int) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(int) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(int) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
        } else if (sizeof(int) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
        }
    } else {
        if (sizeof(int) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(int) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(int),
                                     little, !is_unsigned);
    }
}

/* CIntFromPy */
            static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *x) {
    const int neg_one = (int) -1, const_zero = (int) 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(int) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(int, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (int) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (int) 0;
                case  1: __PYX_VERIFY_RETURN_INT(int, digit, digits[0])
                case 2:
                    if (8 * sizeof(int) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 2 * PyLong_SHIFT) {
                            return (int) (((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(int) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 3 * PyLong_SHIFT) {
                            return (int) (((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(int) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 4 * PyLong_SHIFT) {
                            return (int) (((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (int) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(int) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, unsigned long, PyLong_AsUnsignedLong(x))
            } else if (sizeof(int) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (int) 0;
                case -1: __PYX_VERIFY_RETURN_INT(int, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(int,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(int) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(int) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                            return (int) ((((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(int) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                            return (int) ((((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 4 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(int) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 4 * PyLong_SHIFT) {
                            return (int) ((((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(int) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, long, PyLong_AsLong(x))
            } else if (sizeof(int) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, PY_LONG_LONG, PyLong_AsLongLong(x))
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            int val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (int) -1;
        }
    } else {
        int val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (int) -1;
        val = __Pyx_PyInt_As_int(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to int");
    return (int) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to int");
    return (int) -1;
}

/* CIntFromPy */
            static CYTHON_INLINE unsigned int __Pyx_PyInt_As_unsigned_int(PyObject *x) {
    const unsigned int neg_one = (unsigned int) -1, const_zero = (unsigned int) 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(unsigned int) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(unsigned int, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (unsigned int) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (unsigned int) 0;
                case  1: __PYX_VERIFY_RETURN_INT(unsigned int, digit, digits[0])
                case 2:
                    if (8 * sizeof(unsigned int) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(unsigned int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(unsigned int) >= 2 * PyLong_SHIFT) {
                            return (unsigned int) (((((unsigned int)digits[1]) << PyLong_SHIFT) | (unsigned int)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(unsigned int) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(unsigned int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(unsigned int) >= 3 * PyLong_SHIFT) {
                            return (unsigned int) (((((((unsigned int)digits[2]) << PyLong_SHIFT) | (unsigned int)digits[1]) << PyLong_SHIFT) | (unsigned int)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(unsigned int) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(unsigned int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(unsigned int) >= 4 * PyLong_SHIFT) {
                            return (unsigned int) (((((((((unsigned int)digits[3]) << PyLong_SHIFT) | (unsigned int)digits[2]) << PyLong_SHIFT) | (unsigned int)digits[1]) << PyLong_SHIFT) | (unsigned int)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (unsigned int) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(unsigned int) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(unsigned int, unsigned long, PyLong_AsUnsignedLong(x))
            } else if (sizeof(unsigned int) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(unsigned int, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (unsigned int) 0;
                case -1: __PYX_VERIFY_RETURN_INT(unsigned int, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(unsigned int,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(unsigned int) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(unsigned int, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(unsigned int) - 1 > 2 * PyLong_SHIFT) {
                            return (unsigned int) (((unsigned int)-1)*(((((unsigned int)digits[1]) << PyLong_SHIFT) | (unsigned int)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(unsigned int) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(unsigned int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(unsigned int) - 1 > 2 * PyLong_SHIFT) {
                            return (unsigned int) ((((((unsigned int)digits[1]) << PyLong_SHIFT) | (unsigned int)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(unsigned int) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(unsigned int, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(unsigned int) - 1 > 3 * PyLong_SHIFT) {
                            return (unsigned int) (((unsigned int)-1)*(((((((unsigned int)digits[2]) << PyLong_SHIFT) | (unsigned int)digits[1]) << PyLong_SHIFT) | (unsigned int)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(unsigned int) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(unsigned int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(unsigned int) - 1 > 3 * PyLong_SHIFT) {
                            return (unsigned int) ((((((((unsigned int)digits[2]) << PyLong_SHIFT) | (unsigned int)digits[1]) << PyLong_SHIFT) | (unsigned int)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(unsigned int) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(unsigned int, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(unsigned int) - 1 > 4 * PyLong_SHIFT) {
                            return (unsigned int) (((unsigned int)-1)*(((((((((unsigned int)digits[3]) << PyLong_SHIFT) | (unsigned int)digits[2]) << PyLong_SHIFT) | (unsigned int)digits[1]) << PyLong_SHIFT) | (unsigned int)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(unsigned int) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(unsigned int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(unsigned int) - 1 > 4 * PyLong_SHIFT) {
                            return (unsigned int) ((((((((((unsigned int)digits[3]) << PyLong_SHIFT) | (unsigned int)digits[2]) << PyLong_SHIFT) | (unsigned int)digits[1]) << PyLong_SHIFT) | (unsigned int)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(unsigned int) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(unsigned int, long, PyLong_AsLong(x))
            } else if (sizeof(unsigned int) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(unsigned int, PY_LONG_LONG, PyLong_AsLongLong(x))
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            unsigned int val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (unsigned int) -1;
        }
    } else {
        unsigned int val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (unsigned int) -1;
        val = __Pyx_PyInt_As_unsigned_int(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to unsigned int");
    return (unsigned int) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to unsigned int");
    return (unsigned int) -1;
}

/* CIntFromPy */
            static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *x) {
    const long neg_one = (long) -1, const_zero = (long) 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(long) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(long, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (long) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (long) 0;
                case  1: __PYX_VERIFY_RETURN_INT(long, digit, digits[0])
                case 2:
                    if (8 * sizeof(long) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 2 * PyLong_SHIFT) {
                            return (long) (((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(long) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 3 * PyLong_SHIFT) {
                            return (long) (((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(long) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 4 * PyLong_SHIFT) {
                            return (long) (((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (long) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(long) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, unsigned long, PyLong_AsUnsignedLong(x))
            } else if (sizeof(long) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (long) 0;
                case -1: __PYX_VERIFY_RETURN_INT(long, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(long,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(long) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(long) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                            return (long) ((((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(long) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                            return (long) ((((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(long) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                            return (long) ((((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(long) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, long, PyLong_AsLong(x))
            } else if (sizeof(long) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, PY_LONG_LONG, PyLong_AsLongLong(x))
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            long val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (long) -1;
        }
    } else {
        long val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (long) -1;
        val = __Pyx_PyInt_As_long(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to long");
    return (long) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to long");
    return (long) -1;
}

/* CheckBinaryVersion */
            static int __Pyx_check_binary_version(void) {
    char ctversion[4], rtversion[4];
    PyOS_snprintf(ctversion, 4, "%d.%d", PY_MAJOR_VERSION, PY_MINOR_VERSION);
    PyOS_snprintf(rtversion, 4, "%s", Py_GetVersion());
    if (ctversion[0] != rtversion[0] || ctversion[2] != rtversion[2]) {
        char message[200];
        PyOS_snprintf(message, sizeof(message),
                      "compiletime version %s of module '%.100s' "
                      "does not match runtime version %s",
                      ctversion, __Pyx_MODULE_NAME, rtversion);
        return PyErr_WarnEx(NULL, message, 1);
    }
    return 0;
}

/* InitStrings */
            static int __Pyx_InitStrings(__Pyx_StringTabEntry *t) {
    while (t->p) {
        #if PY_MAJOR_VERSION < 3
        if (t->is_unicode) {
            *t->p = PyUnicode_DecodeUTF8(t->s, t->n - 1, NULL);
        } else if (t->intern) {
            *t->p = PyString_InternFromString(t->s);
        } else {
            *t->p = PyString_FromStringAndSize(t->s, t->n - 1);
        }
        #else
        if (t->is_unicode | t->is_str) {
            if (t->intern) {
                *t->p = PyUnicode_InternFromString(t->s);
            } else if (t->encoding) {
                *t->p = PyUnicode_Decode(t->s, t->n - 1, t->encoding, NULL);
            } else {
                *t->p = PyUnicode_FromStringAndSize(t->s, t->n - 1);
            }
        } else {
            *t->p = PyBytes_FromStringAndSize(t->s, t->n - 1);
        }
        #endif
        if (!*t->p)
            return -1;
        ++t;
    }
    return 0;
}

static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char* c_str) {
    return __Pyx_PyUnicode_FromStringAndSize(c_str, (Py_ssize_t)strlen(c_str));
}
static CYTHON_INLINE char* __Pyx_PyObject_AsString(PyObject* o) {
    Py_ssize_t ignore;
    return __Pyx_PyObject_AsStringAndSize(o, &ignore);
}
static CYTHON_INLINE char* __Pyx_PyObject_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
#if CYTHON_COMPILING_IN_CPYTHON && (__PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT)
    if (
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
            __Pyx_sys_getdefaultencoding_not_ascii &&
#endif
            PyUnicode_Check(o)) {
#if PY_VERSION_HEX < 0x03030000
        char* defenc_c;
        PyObject* defenc = _PyUnicode_AsDefaultEncodedString(o, NULL);
        if (!defenc) return NULL;
        defenc_c = PyBytes_AS_STRING(defenc);
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
        {
            char* end = defenc_c + PyBytes_GET_SIZE(defenc);
            char* c;
            for (c = defenc_c; c < end; c++) {
                if ((unsigned char) (*c) >= 128) {
                    PyUnicode_AsASCIIString(o);
                    return NULL;
                }
            }
        }
#endif
        *length = PyBytes_GET_SIZE(defenc);
        return defenc_c;
#else
        if (__Pyx_PyUnicode_READY(o) == -1) return NULL;
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
        if (PyUnicode_IS_ASCII(o)) {
            *length = PyUnicode_GET_LENGTH(o);
            return PyUnicode_AsUTF8(o);
        } else {
            PyUnicode_AsASCIIString(o);
            return NULL;
        }
#else
        return PyUnicode_AsUTF8AndSize(o, length);
#endif
#endif
    } else
#endif
#if (!CYTHON_COMPILING_IN_PYPY) || (defined(PyByteArray_AS_STRING) && defined(PyByteArray_GET_SIZE))
    if (PyByteArray_Check(o)) {
        *length = PyByteArray_GET_SIZE(o);
        return PyByteArray_AS_STRING(o);
    } else
#endif
    {
        char* result;
        int r = PyBytes_AsStringAndSize(o, &result, length);
        if (unlikely(r < 0)) {
            return NULL;
        } else {
            return result;
        }
    }
}
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject* x) {
   int is_true = x == Py_True;
   if (is_true | (x == Py_False) | (x == Py_None)) return is_true;
   else return PyObject_IsTrue(x);
}
static CYTHON_INLINE PyObject* __Pyx_PyNumber_IntOrLong(PyObject* x) {
  PyNumberMethods *m;
  const char *name = NULL;
  PyObject *res = NULL;
#if PY_MAJOR_VERSION < 3
  if (PyInt_Check(x) || PyLong_Check(x))
#else
  if (PyLong_Check(x))
#endif
    return __Pyx_NewRef(x);
  m = Py_TYPE(x)->tp_as_number;
#if PY_MAJOR_VERSION < 3
  if (m && m->nb_int) {
    name = "int";
    res = PyNumber_Int(x);
  }
  else if (m && m->nb_long) {
    name = "long";
    res = PyNumber_Long(x);
  }
#else
  if (m && m->nb_int) {
    name = "int";
    res = PyNumber_Long(x);
  }
#endif
  if (res) {
#if PY_MAJOR_VERSION < 3
    if (!PyInt_Check(res) && !PyLong_Check(res)) {
#else
    if (!PyLong_Check(res)) {
#endif
      PyErr_Format(PyExc_TypeError,
                   "__%.4s__ returned non-%.4s (type %.200s)",
                   name, name, Py_TYPE(res)->tp_name);
      Py_DECREF(res);
      return NULL;
    }
  }
  else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_TypeError,
                    "an integer is required");
  }
  return res;
}
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject* b) {
  Py_ssize_t ival;
  PyObject *x;
#if PY_MAJOR_VERSION < 3
  if (likely(PyInt_CheckExact(b))) {
    if (sizeof(Py_ssize_t) >= sizeof(long))
        return PyInt_AS_LONG(b);
    else
        return PyInt_AsSsize_t(x);
  }
#endif
  if (likely(PyLong_CheckExact(b))) {
    #if CYTHON_USE_PYLONG_INTERNALS
    const digit* digits = ((PyLongObject*)b)->ob_digit;
    const Py_ssize_t size = Py_SIZE(b);
    if (likely(__Pyx_sst_abs(size) <= 1)) {
        ival = likely(size) ? digits[0] : 0;
        if (size == -1) ival = -ival;
        return ival;
    } else {
      switch (size) {
         case 2:
           if (8 * sizeof(Py_ssize_t) > 2 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -2:
           if (8 * sizeof(Py_ssize_t) > 2 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case 3:
           if (8 * sizeof(Py_ssize_t) > 3 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -3:
           if (8 * sizeof(Py_ssize_t) > 3 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case 4:
           if (8 * sizeof(Py_ssize_t) > 4 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -4:
           if (8 * sizeof(Py_ssize_t) > 4 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
      }
    }
    #endif
    return PyLong_AsSsize_t(b);
  }
  x = PyNumber_Index(b);
  if (!x) return -1;
  ival = PyInt_AsSsize_t(x);
  Py_DECREF(x);
  return ival;
}
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t ival) {
    return PyInt_FromSize_t(ival);
}


#endif /* Py_PYTHON_H */
